@page "/admin/stats"
@layout AdminLayout
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.RadarChart
@using BlazorApp.Components.Base
@using BlazorApp.Models
@using System.Text.Json;

<PageTitle>Blue Skies - Stats</PageTitle>

<div class="mt-2 pr-10 pb-10 ">
    <div class="flex w-full justify-between p-4">
        <div class="">
            <Heading >
                <Superscript>
                    <h2>Website</h2>
                </Superscript>
                <Header>
                    <h1>Statistics</h1>
                </Header>
            </Heading>
        </div>
        
    </div>
    
    <div class="flex flex-col gap-20">
        <div class="w-1/2">
            <Chart Config="pieConfig"></Chart>
        </div>
        <div class="flex flex-row">
            <div class="w-full">
                <Chart Config="radarConfig"></Chart>
            </div>
            <div class="w-full">
                <Chart Config="barConfig"></Chart>
            </div>
        </div>
    </div>
</div>

@code {
    private PieConfig? pieConfig;
    private BarConfig? barConfig;
    public RadarConfig? radarConfig;
    private List<UserModel> users = new List<UserModel>();


    protected override void OnInitialized()
    {
        @* **************************************** Radar Chart Config ************************************************ *@
        radarConfig = new RadarConfig
        {
            Options = new RadarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Some Chart"
                },
                Scale = new LinearRadialAxis
                {
                    Ticks = new LinearRadialTicks
                    {
                        BeginAtZero = true,
                        Max = 10,
                    }
                }

            },
        };

        IDataset<int> dataset3 = new RadarDataset<int>(new[] { 4, 5, 3})
        {
            Label = "My first dataset",
            BackgroundColor = "rgba(255,99,132,0.2)",
            BorderColor = "rgba(255,99,132,1)",
            PointBackgroundColor = "rgba(255,99,132,1)",
            PointBorderColor = "#fff",
            PointHoverBackgroundColor = "#fff",
            PointHoverBorderColor = "rgba(255,99,132,1)",


        };
        foreach (string label in new[] { "Small", "Medium", "Large" })
        {

            radarConfig.Data.Labels.Add(label);
        }
        radarConfig.Data.Datasets.Add(dataset3);

        @* **************************************** Bar Chart Config ************************************************ *@
        barConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Position = Position.Top
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Some Chart"
                },
                
            }
        };

        IDataset<int> dataset1 = new BarDataset<int>(new[] {4})
        {
            Label = "My first dataset",
            BackgroundColor = "rgba(255,99,132,0.2)",
            BorderColor = "rgba(255,99,132,1)",
            BorderWidth = 1
        };

        IDataset<int> dataset2 = new BarDataset<int>(new[] { 6, 5, 3, 7 })
        {
            Label = "My second dataset",
            BackgroundColor = "rgba(54, 162, 235, 0.2)",
            BorderColor = "rgba(54, 162, 235, 1)",
            BorderWidth = 1
        };

        @* _config.Data.Labels.AddRange(Months.Take(InitalCount)); *@
        barConfig.Data.Datasets.Add(dataset1);
        barConfig.Data.Datasets.Add(dataset2);

        @* **************************************** Pie Chart Config ************************************************ *@
        pieConfig = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Active Users"
                },
                @* Scale = new ArcScale
                {
                    Ticks = new ArcScaleTicks
                    {
                        BeginAtZero = true
                    },
                    Reverse = false
                } *@
            }
        };

        foreach (string color in new[] { "Remaining", "Past 3 months", "Past month", "Past week" })
        {
            pieConfig.Data.Labels.Add(color);
        }

        PieDataset<int> dataset = new PieDataset<int>(new[] { 6, 5, 3, 4})
        {
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
                ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
                ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
            }
        };
        pieConfig.Data.Datasets.Add(dataset);

    }

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
    }
    private async Task GetUsers(){
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5096/user/all");
        var response = await client.SendAsync(request);
        if(response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            users = JsonSerializer.Deserialize<List<UserModel>>(data, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }
}