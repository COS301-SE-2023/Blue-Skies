@page "/advanced"
@layout MainLayout
@inject ProtectedLocalStorage ProtectedLocalStore;
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject NavigationManager NavigationManager;
@using BlazorApp.Models;
@using System.Text.Json
@using BlazorApp.Components.Advanced
@inject BlazorApp.Data.ToastService toastService;
@inject BlazorApp.Data.LoadingService loadingService;

<PageTitle>Advanced Calculations</PageTitle>
<div class="fade-in-enter-active">
    @if (isLoaded) {
        @* Check if user is logged in *@
        if (!logIn)
        {
            ProtectedSessionStore.SetAsync("redirect", "advanced");
            loadingService.ShowLoadingScreen();
            NavigationManager.NavigateTo("/login");
        }
        @* Check if logged in user is admin *@
        else if (isAd)
        {
            loadingService.ShowLoadingScreen();
            NavigationManager.NavigateTo("/admin/keys");
        }
        else if (longitude == 0 && latitude == 0)
        {
            @* deleteToast.Show("Solar Score not Created", "You must first create a solar score", "error"); *@
            toastService.ShowToast("Solar Score not Created", "You must first create a solar score", "error");
            loadingService.ShowLoadingScreen();
            NavigationManager.NavigateTo("/solarScore");
        }
        else
        {
            <div class="w-full">
                <div class="mb-20">
                    @* Load data to edit advanced calculations or display active calculation*@
                    @if (edit)
                    {
                        var reportName = currentReport.reportName;
                    <Results currentLocationData="currentLocationData"
                        systems="systems" reportName="@reportName"/>    
                    } else {
                    <Results currentLocationData="currentLocationData"
                        systems="systems" />
                    }
                </div>
                <div class="w-full">
                    <BuildYourHome @bind-selectedSystem="selectedSystem" appliances="@appliances" systems="systems" reportAllAppliance="reportAllAppliance" currentReport="currentReport" edit="edit"/>
                </div>
            </div>
        }
     }
</div>

@code {
    private bool logIn = false;
    private bool isAd = false;
    private bool isLoaded = false;
    private bool edit = false;
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private List<ApplianceModel> appliances = new List<ApplianceModel>();
    private List<ApplianceModel> advancedCalculationAppliances = new List<ApplianceModel>();
    private List<SystemModel> systems = new List<SystemModel>();
    private List<ReportAllApplianceModel> reportAllAppliance = new List<ReportAllApplianceModel>();
    private ReportModel currentReport = new ReportModel(); 
    public LocationDataModel currentLocationData { get; set; } = new LocationDataModel();
    private int selectedSystem = 0;
    private int solarScore = 0;
    private double longitude = 0;
    private double latitude = 0;


    /// <summary>
///     <list type="bullet">
///         <item>Check if user is logged in</item>
///         <item>Check if logged in user is admin</item>
///         <item>Check if the user has created a solar score</item>
///         <item>Get the current report either half populated from the solarScore page or a fully populated if editing an existing report</item>
///         <item>Get the location data from the database</item>
///         <item>Get all the appliances and systems from the database</item>
///         <item>Set the selected system to the current report system</item>
///     </list>
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var loggedIn = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
        var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");
        logIn = loggedIn.Value;
        isAd = isAdmin.Value;
        isLoaded = true;

        @* Get the current report either half populated from the solarScore page or a fully populated if editing an existing report *@
        var editing = await ProtectedSessionStore.GetAsync<bool>("edit");
        edit = editing.Value;

        var lat = await ProtectedSessionStore.GetAsync<double>("latitude");
        latitude = lat.Value;
        var lng = await ProtectedSessionStore.GetAsync<double>("longitude");
        longitude = lng.Value;
        await getLocationData(latitude, longitude);
        if (edit)
        {
            var rep = await ProtectedSessionStore.GetAsync<ReportModel>("currentReport");
            currentReport = rep.Value!;
            var reportAllAppl = await ProtectedSessionStore.GetAsync<List<ReportAllApplianceModel>>("userReportAllAppliance");
            reportAllAppliance = reportAllAppl.Value!;
        }

        await GetAppliancesAsync();
        await GetSystemsAsync();
        for (int i = 0; i < systems.Count; i++)
        {
            if (currentReport.systemId == systems[i].systemId)
            {
                selectedSystem = i;
            }  
        }
        loadingService.HideLoadingScreen();

    }

    /// <summary>
    /// <list type="bullet">
    ///     <item>Tries to get the location data from the database.</item>
    ///     <item>If the data exists: save it's data to the currentLocationData variable</item>
    ///     <item>If the data does not exist print error.</item>
    /// </list>
    /// </summary>
    public async Task getLocationData(double latitude, double longitude){
        string lat = latitude.ToString().Replace(",", ".");
        string lon = longitude.ToString().Replace(",", ".");
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/locationData/getLocationData/" + lat + "/" + lon);
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Location data found");
            string data = response.Content.ReadAsStringAsync().Result;
            currentLocationData = JsonSerializer.Deserialize<LocationDataModel>(data)!;
        } else {
            Console.WriteLine("Location data not found in Results");
        }
        return;
    }
    /// <summary>
    /// <list type="bullet">
    ///     <item>Get all the systems from the database</item>
    ///     <item>Save the systems to the systems variable</item>
    ///     <item>Save the systems to the session storage</item>
    /// </list>
    /// </summary>
    private async Task GetSystemsAsync()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/System/all");
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            systems = JsonSerializer.Deserialize<List<SystemModel>>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive =
                true
                })!;
            if (systems.Count > 0)
            {
                await ProtectedSessionStore.SetAsync("systems", systems);
            }
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }

    /// <summary>
    /// <list type="bullet">
    ///     <item>Get all the appliances from the database</item>
    ///     <item>Save the appliances to the appliances variable</item>
    ///     <item>Save the appliances to the session storage</item>
    /// </list>
    /// </summary>
    private async Task GetAppliancesAsync()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/Appliance/all");
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            appliances = JsonSerializer.Deserialize<List<ApplianceModel>>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive =
                true
                })!;
            if (appliances.Count > 0)
            {
                await ProtectedSessionStore.SetAsync("reportAppliances", appliances);
            }
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }
}