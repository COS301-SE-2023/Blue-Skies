@page "/advanced"
@layout MainLayout
@inject ProtectedLocalStorage ProtectedLocalStore;
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject NavigationManager NavigationManager;
@using BlazorApp.Models;
@using System.Text.Json
@using BlazorApp.Components.Advanced
@using BlazorApp.Components
@using BlazorApp.FancyData
@using BlazorApp.Components.Advanced.Skeletons
@inject BlazorApp.Data.ToastService toastService;
@inject BlazorApp.Data.ApplianceService applianceService;

<PageTitle>Advanced Calculations</PageTitle>

<div class="fade-in-enter-active">
    <Image ImageName="03.png" css="absolute hidden md:block top-20 lg:-top-2 -left-20 lg:-left-2" />
    <Image ImageName="shapes.svg" css="absolute -top-1/3 sm:transform scale-[0.6] -left-[45%] -z-20 w-2/3 h-full -rotate-[40]" alt="Shapes" />
    <div class="w-full px-2 lg:px-20 ">
        <div class="mb-20">
            @* Load data to edit advanced calculations or display active calculation*@
            @if (edit)
            {
                <Results currentLocationData="currentLocationData" selectedSystem="selectedSystem" systems="systems" reportName="@currentReport.reportName"/>
            }else{
                <Results currentLocationData="currentLocationData" selectedSystem="selectedSystem" systems="systems"/>
            }
                
        </div>
        @if (systems.Count == 0)
        {
            <TabSkeleton />
        } else {
            <div class="relative flex flex-col lg:flex-row justify-evenly items-center w-full gap-4 lg:gap-0 mx-auto my-7">
                <div class="flex flex-col lg:flex-row gap-4 w-full">
                    <div @onclick="ResetCalculation" class="w-full cursor-pointer">
                        <Button css="h-14 bg-white rounded-full w-2/3 max-w-xs mx-auto right-10" style="outline">
                            <p class="text-[14px] sm:text-base">Reset</p>
                        </Button>
                    </div>
                    <div @onclick="SaveCalculation" class="w-full block lg:hidden mb-4 cursor-pointer">
                        <Button css="h-14 w-2/3 max-w-xs mx-auto" style="pill">
                            @if (edit)
                            {
                                <p class="text-[14px]  sm:text-base">Update calculation</p>
                            }
                            else
                            {
                                <p class="text-[14px]  sm:text-base">Save this calculation</p>
                            }
                        </Button>
                    </div>
                    <div class="w-full">
                        <Tabs @bind-Items="tabs"></Tabs>
                    </div>
                    <div @onclick="SaveCalculation" class="w-full hidden lg:block cursor-pointer">
                        <Button css="h-14 w-2/3 max-w-xs mx-auto" style="pill">
                            @if (edit)
                            {
                                <p class="text-[12px]  sm:text-base">Update calculation</p>
                            }
                            else
                            {
                                <p class="text-[12px]  sm:text-base">Save this calculation</p>
                            }
                        </Button>
                    </div>
                </div>
            </div>
        }
        <div class="w-full">
            @if(tabs[0].active) {
                <div class="fade-in-active px-2">
                    <BuildYourHome  @ref="buildYourHomeComponent" @bind-selectedSystem="selectedSystem" appliances="@appliances" systems="systems" currentLocationData="currentLocationData" currentReport="currentReport" edit="edit" />
                    <div class="px-10 w-full">
                        <Variants @bind-selectedSystem="selectedSystem" appliances="@appliances" systems="systems" currentLocationData="currentLocationData" currentReport="currentReport" edit="edit" customAppliances="@customAppliances"/>
                    </div>
                </div>
            }
            else if (tabs[1].active)
            {
                <div class="fade-in-active">
                    <Finanace />
                </div>
            }else if (tabs[2].active)
            {
                <div class="fade-in-active">
                    @{
                        int numSolarPanels = 0;
                        if(systems != null) {
                            numSolarPanels = systems[selectedSystem].numberOfPanels;
                        }
                        <FancyData currentLocationData="currentLocationData" numSolarPanels="@numSolarPanels"/>
                    }
                </div>
            }
        </div>
    </div>   
</div>

<ModalPopup @ref="ModalPopup" Title="Save your calculation?">
    @if (edit)
    {
        <p>Rename this calculation?</p>
    }
    else
    {
        <p>Add a nickname for this calculation:</p>
    }
        <Input @bind-InputValue="calculationName" placeholder="Nickname" />
        <div class="flex flex-row gap-4 justify-center">
        @if (edit)
        {
            <div @onclick="UpdateCalculation">
                <Button>
                    <p>Update</p>
                </Button>
            </div>
        }
        else
        {
            <div @onclick="CallSaveCalculation">
                <Button>
                    <p>Save</p>
                </Button>
            </div>
        }
            <div @onclick="ModalPopup.Dismiss">
                <Button style="outline">
                    <p>Cancel</p>
                </Button>
            </div>
        </div>
</ModalPopup>

@code {
    private SharedUtils.locationDataClass locationDataClass = new SharedUtils.locationDataClass();
    private SharedUtils.systemClass systemDataClass = new SharedUtils.systemClass();
    private SharedUtils.applianceClass applianceDataClass = new SharedUtils.applianceClass();
    private SharedUtils.reportAllApplianceClass reportAllApplianceClass = new SharedUtils.reportAllApplianceClass();
    private SharedUtils.customApplianceClass customApplianceClass = new SharedUtils.customApplianceClass();

    private DataHandlers.CalculationDataHandler calculationDataHandler = new DataHandlers.CalculationDataHandler();
    BuildYourHome? buildYourHomeComponent;
    private bool logIn = false;
    private bool isAd = false;
    private bool edit = false;
    private List<ApplianceModel> appliances = new List<ApplianceModel>();
    private List<SystemModel> systems = new List<SystemModel>();
    private ReportModel currentReport = new ReportModel(); 
    private List<CustomApplianceModel> customAppliances = new List<CustomApplianceModel>();
    public LocationDataModel? currentLocationData { get; set; }
    private int selectedSystem = 0;
    private string calculationName {get; set;} = "";
    public ModalPopup ModalPopup { get; set; } = new ModalPopup();
    private List<TabItemModel> tabs = new List<TabItemModel>
    {
        new TabItemModel("Appliances", true),
        new TabItemModel("Finance", false),
        new TabItemModel("Advanced", false)
    };


    /// <summary>
    ///     <list type="bullet">
    ///         <item>Check if user is logged in</item>
    ///         <item>Check if logged in user is admin</item>
    ///         <item>Check if the user has created a solar score</item>
    ///         <item>Get the current report either half populated from the solarScore page or a fully populated if editing an existing report</item>
    ///         <item>Get the location data from the database</item>
    ///         <item>Get all the appliances and systems from the database</item>
    ///         <item>Set the selected system to the current report system</item>
    ///     </list>
    /// </summary>
    protected override async Task OnInitializedAsync()
    { 
        var loggedIn = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
        var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");
        logIn = loggedIn.Value;
        isAd = isAdmin.Value;

        if (!logIn)
        {
            await ProtectedSessionStore.SetAsync("redirect", "advanced");
            NavigationManager.NavigateTo("/login");
        }
        else if (isAd)
        {
            NavigationManager.NavigateTo("/admin/keys");
        }

        applianceService.UpdateAppliancesRequested += UpdateAppliances;

        @* Get the current report either half populated from the solarScore page or a fully populated if editing an existing report *@
        var editing = await ProtectedSessionStore.GetAsync<bool>("edit");
        edit = editing.Value;

        var tempLatitude = await ProtectedSessionStore.GetAsync<double>("latitude");
        var tempLongitude = await ProtectedSessionStore.GetAsync<double>("longitude");
        double? lat = tempLatitude.Value;
        double? lng = tempLongitude.Value;

        Console.WriteLine(lat);
        Console.WriteLine(lng);

        if(lat == null || lng == null || lat == 0 || lng == 0)
        {
            toastService.ShowToast("Solar Score not Created", "You must first create a solar score", "error");
            NavigationManager.NavigateTo("/");
        }
        double latitude = lat ?? 0;
        double longitude = lng ?? 0;

        int numTries = 0;
        currentLocationData = null;
        while(currentLocationData == null && numTries < 10) {
            currentLocationData = await locationDataClass.GetInitialLocationData(latitude, longitude, currentLocationData);
            numTries++;
            await Task.Delay(1000);
        }

        if (currentLocationData != null)
        {
            await ProtectedSessionStore.SetAsync("currentLocationData", currentLocationData);
        }
        else
        {
            toastService.ShowToast("Location Data not Found", "Location data could not be found", "error");
            NavigationManager.NavigateTo("/");
        }

        appliances = await applianceDataClass.GetAllAppliances();
        
        if (appliances.Count > 0)
        {
            await ProtectedSessionStore.SetAsync("reportAppliances", appliances);
        }

        systems = await systemDataClass.GetAllSystems();
        if (systems.Count > 0)
        {
            await ProtectedSessionStore.SetAsync("systems", systems);
        }

        if (edit)
        {
            var rep = await ProtectedSessionStore.GetAsync<ReportModel>("currentReport");
            currentReport = rep.Value!;
            List<ApplianceModel>? tempAppliances = await calculationDataHandler.GetReportAllAppliancesByReport(currentReport.reportId);
                
            if(tempAppliances != null) {
                foreach (ApplianceModel app in tempAppliances)
                {
                    ApplianceModel? appliance = appliances.Find(x => x.name == app.name && x.type == app.type);
                    if(appliance != null) {
                        appliance.quantity = app.quantity;
                    } else {
                        appliances.Add(app);
                    }
                }
            }

            for (int i = systems.Count - 1; i > 2; i--)
            {
                if (currentReport.systemId == systems[i].systemId)
                {
                    selectedSystem = 3;
                } else {
                    systems.RemoveAt(i);

                }

            }
            if(selectedSystem != 3)
            {
                for(int i = 0; i < systems.Count; i++)
                {
                    if (currentReport.systemId == systems[i].systemId)
                    {
                        selectedSystem = i;
                    } 
                }
            }


        } else {
            currentReport.latitude = latitude!;
            currentReport.longitude = longitude!;

            systems = await systemDataClass.GetAllSystems();
            if (systems.Count > 0)
            {
                await ProtectedSessionStore.SetAsync("systems", systems);
            }
            selectedSystem = 0;
            for (int i = systems.Count - 1; i > 2; i--)
            {
                systems.RemoveAt(i);
            }
            
        }
        if(systems.Count < 4)
        {
            SystemModel system = new SystemModel();
            system.systemId = -1;
            system.systemSize = "Custom";
            system.numberOfPanels = -1;
            system.numberOfBatteries = -1;
            system.batterySize = -1;
            system.inverterOutput = -1;
            system.solarInput = -1;
            systems.Add(system);
        }
        
        Console.WriteLine("Selected System" + selectedSystem);

        @* Get custom Appliances *@
        customAppliances = await customApplianceClass.GetAllCustomAppliances();
        _ = GetSatteliteImage();
    }

    private async Task GetSatteliteImage() {
        if(currentLocationData != null && currentLocationData.satteliteImageData == null) {
            currentLocationData = await locationDataClass.GetSatelliteImageData(currentLocationData.latitude, currentLocationData.longitude, currentLocationData);
            StateHasChanged();
        }
    }

    public void SaveCalculation()
    {
        tabs[0].active = true;
        tabs[1].active = false;
        tabs[2].active = false;
        ModalPopup.Show();
    }
    public async void CallSaveCalculation()
    {
        await ProtectedSessionStore.SetAsync("calculationName", calculationName);
        buildYourHomeComponent!.SaveCalculation();
        ModalPopup.Dismiss();
    }

    public async void UpdateCalculation()
    {
        await ProtectedSessionStore.SetAsync("calculationName", calculationName);
        await buildYourHomeComponent!.UpdateCalculation();
        ModalPopup.Dismiss();
    }
    
    public void ResetCalculation()
    {
        buildYourHomeComponent!.ResetHome();
    }

    private void UpdateAppliances(List<ApplianceModel> applianceGroups)
    {
        appliances = applianceGroups;
    }
}