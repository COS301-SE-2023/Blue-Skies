@page "/advanced"
@layout MainLayout
@inject ProtectedLocalStorage ProtectedLocalStore;
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject NavigationManager NavigationManager;
@using BlazorApp.Models;
@using System.Text.Json
@using BlazorApp.Components.Advanced
@using BlazorApp.Components.Base
@inject BlazorApp.Data.ToastService toastService;
@inject BlazorApp.Data.LoadingService loadingService;

<PageTitle>Advanced Calculations</PageTitle>
<div class="fade-in-enter-active">
    @if (isLoaded)
    {
        @* Check if user is logged in *@
        if (!logIn)
        {
            ProtectedSessionStore.SetAsync("redirect", "advanced");
            loadingService.ShowLoadingScreen();
            NavigationManager.NavigateTo("/login");
        }
        @* Check if logged in user is admin *@
        else if (isAd)
        {
            loadingService.ShowLoadingScreen();
            NavigationManager.NavigateTo("/admin/keys");
        }
        else if (longitude == 0 && latitude == 0)
        {
            @* deleteToast.Show("Solar Score not Created", "You must first create a solar score", "error"); *@
            toastService.ShowToast("Solar Score not Created", "You must first create a solar score", "error");
            loadingService.ShowLoadingScreen();
            NavigationManager.NavigateTo("/solarScore");
        }
        else
        {
            <div class="w-full px-20 ">
                <div class="mb-20">
                    @* Load data to edit advanced calculations or display active calculation*@
                    @if (edit)
                    {
                        var reportName = currentReport.reportName;
                        <Results currentLocationData="currentLocationData" selectedSystem="selectedSystem" systems="systems" reportName="@reportName"/>    
                    }

                </div>
                <div class="flex justify-center items-center w-full max-w-2xl mx-auto  my-7">
                    <Tabs @bind-Items="tabs"></Tabs>
                </div>
                <div class="w-full">
                    @if(tabs[0].active) {
                        <div class="fade-in-active">
                            <BuildYourHome @bind-selectedSystem="selectedSystem" appliances="@appliances" systems="systems" currentLocationData="currentLocationData" reportAllAppliance="reportAllAppliance" currentReport="currentReport" edit="edit" latitude="latitude" longitude="longitude"/>
                            <Variants @bind-selectedSystem="selectedSystem" appliances="@appliances" systems="systems" currentLocationData="currentLocationData" reportAllAppliance="reportAllAppliance" currentReport="currentReport" edit="edit" latitude="latitude" longitude="longitude"/>
                        </div>
                    }
                    else if (tabs[1].active)
                    {
                        <div class="fade-in-active">
                            <Finanace />
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    private SharedUtils.locationDataClass locationDataClass = new SharedUtils.locationDataClass();
    private SharedUtils.systemClass systemDataClass = new SharedUtils.systemClass();
    private SharedUtils.applianceClass applianceDataClass = new SharedUtils.applianceClass();
    private bool logIn = false;
    private bool isAd = false;
    private bool isLoaded = false;
    private bool edit = false;
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private List<ApplianceModel> appliances = new List<ApplianceModel>();
    private List<ApplianceModel> advancedCalculationAppliances = new List<ApplianceModel>();
    private List<SystemModel> systems = new List<SystemModel>();
    private List<ReportAllApplianceModel> reportAllAppliance = new List<ReportAllApplianceModel>();
    private ReportModel currentReport = new ReportModel();
    public LocationDataModel currentLocationData { get; set; } = new LocationDataModel();
    private int selectedSystem = 0;
    private double longitude = 0;
    private double latitude = 0;
    private List<TabItemModel> tabs = new List<TabItemModel>
    {
        new TabItemModel("Appliances", true),
        new TabItemModel("Finance", false),
        new TabItemModel("Fancy", false)
    };


    /// <summary>
    ///     <list type="bullet">
    ///         <item>Check if user is logged in</item>
    ///         <item>Check if logged in user is admin</item>
    ///         <item>Check if the user has created a solar score</item>
    ///         <item>Get the current report either half populated from the solarScore page or a fully populated if editing an existing report</item>
    ///         <item>Get the location data from the database</item>
    ///         <item>Get all the appliances and systems from the database</item>
    ///         <item>Set the selected system to the current report system</item>
    ///     </list>
    /// </summary>
    protected override async Task OnInitializedAsync()
    { 
        var loggedIn = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
        var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");
        logIn = loggedIn.Value;
        isAd = isAdmin.Value;
        isLoaded = true;

        @* Get the current report either half populated from the solarScore page or a fully populated if editing an existing report *@
        var editing = await ProtectedSessionStore.GetAsync<bool>("edit");
        edit = editing.Value;

        var lat = await ProtectedSessionStore.GetAsync<double>("latitude");
        latitude = lat.Value;
        var lng = await ProtectedSessionStore.GetAsync<double>("longitude");
        longitude = lng.Value;

        var sSystem = await ProtectedSessionStore.GetAsync<int>("selectedSystem");
        selectedSystem = sSystem.Value;

        currentLocationData = await locationDataClass.GetLocationData(latitude, longitude);
        if (edit)
        {
            var rep = await ProtectedSessionStore.GetAsync<ReportModel>("currentReport");
            currentReport = rep.Value!;
            var reportAllAppl = await ProtectedSessionStore.GetAsync<List<ReportAllApplianceModel>>("userReportAllAppliance");
            reportAllAppliance = reportAllAppl.Value!;

        }
        else
        {
            currentReport.latitude = latitude;
            currentReport.longitude = longitude;
        }

        appliances = await applianceDataClass.GetAllAppliances();
        if (appliances.Count > 0)
        {
            await ProtectedSessionStore.SetAsync("reportAppliances", appliances);
        }

        systems = await systemDataClass.GetAllSystems();
        if (systems.Count > 0)
        {
            await ProtectedSessionStore.SetAsync("systems", systems);
        }

        for (int i = 0; i < systems.Count; i++)
        {
            if (currentReport.systemId == systems[i].systemId)
            {
                selectedSystem = i;
            }
        }
        loadingService.HideLoadingScreen();

    }
}