@page "/advanced"
@layout MainLayout
@inject ProtectedLocalStorage ProtectedLocalStore;
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject NavigationManager NavigationManager;
@using BlazorApp.Models;
@using System.Text.Json
@using BlazorApp.Components
@inject BlazorApp.Data.ToastService toastService;

<PageTitle>Advanced Calculations</PageTitle>
    <div class="fade-in-active">
        @if(!isLoaded){}
        else if (!logIn) {
            ProtectedLocalStore.SetAsync("redirect", "advanced");
            NavigationManager.NavigateTo("/login");
        } else  if (isAd) {
            NavigationManager.NavigateTo("/admin/keys");  
        } else if (solarScore == 0) {
            @* deleteToast.Show("Solar Score not Created", "You must first create a solar score", "error"); *@
            toastService.ShowToast("Solar Score not Created", "You must first create a solar score", "error");

            NavigationManager.NavigateTo("/solarScore");
        } else {
        <div class="w-full">
            <div class="mb-20"><BlazorApp.Section.AdvancedResults solarScore="solarScore" basicCalculation="basicCalculation" systems="systems"/></div>
            <div class="w-full">
                <BlazorApp.Section.BuildYourHome @bind-selectedSystem="selectedSystem"  appliances="@appliances" systems="systems" basicCalc="basicCalculation" solarScore="solarScore"/>    
            </div>
        </div>
        }
    </div>

@code {
    private bool logIn = false;
    private bool isAd = false;
    private bool isLoaded = false;
    private bool loading = false;
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private List<ApplianceModel> appliances = new List<ApplianceModel>();
    private List<ApplianceModel> advancedCalculationAppliances = new List<ApplianceModel>();

    private BasicCalculationModel basicCalculation = new BasicCalculationModel();
    private List<SystemModel> systems = new List<SystemModel>();
    private int selectedSystem = 0;
    private int solarScore = 0;


    protected override async Task OnInitializedAsync()
    {
        var loggedIn = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
        logIn = loggedIn.Value;
        var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");
        isAd = isAdmin.Value;
        isLoaded = true;
        var bCalc = await ProtectedSessionStore.GetAsync<BasicCalculationModel>("basicCalculation");
        Console.WriteLine("Value" + bCalc);
        var sScore = await ProtectedSessionStore.GetAsync<int>("solarScore");
        var sSystem = await ProtectedSessionStore.GetAsync<int>("selectedSystem");
        selectedSystem = sSystem.Value;
        solarScore = sScore.Value;
        basicCalculation = bCalc.Value!;
        
        var load = await ProtectedSessionStore.GetAsync<bool>("load");
        loading = load.Value;
        await GetAppliancesAsync();
        await GetSystemsAsync();
    }

    private async Task GetSystemsAsync(){
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/System/all");
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            systems = JsonSerializer.Deserialize<List<SystemModel>>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive =
                true
                })!;
            if (systems.Count > 0)
            {
                await ProtectedLocalStore.SetAsync("systems", systems);
            }
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }

    private async Task GetAppliancesAsync()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/Appliance/all");
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            appliances = JsonSerializer.Deserialize<List<ApplianceModel>>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive =
                true
                })!;
            if (appliances.Count > 0)
            {
                await ProtectedLocalStore.SetAsync("reportAppliances", appliances);
            }
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }
}