@page "/advanced"
@layout MainLayout
@inject ProtectedLocalStorage ProtectedLocalStore;
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject NavigationManager NavigationManager;
@using BlazorApp.Models;
@using System.Text.Json
@using BlazorApp.Components
@inject BlazorApp.Data.ToastService toastService;
@inject BlazorApp.Data.LoadingService loadingService;

<PageTitle>Advanced Calculations</PageTitle>
<div class="fade-in-enter-active">
    @if (!isLoaded) { }
    else if (!logIn)
    {
        ProtectedSessionStore.SetAsync("redirect", "advanced");
        loadingService.ShowLoadingScreen();
        NavigationManager.NavigateTo("/login");
    }
    else if (isAd)
    {
        loadingService.ShowLoadingScreen();
        NavigationManager.NavigateTo("/admin/keys");
    }
    else if (solarScore == 0 && longitude == 0 && latitude == 0)
    {
        @* deleteToast.Show("Solar Score not Created", "You must first create a solar score", "error"); *@
        toastService.ShowToast("Solar Score not Created", "You must first create a solar score", "error");
        loadingService.ShowLoadingScreen();
        NavigationManager.NavigateTo("/solarScore");
    }
    else
    {
        <div class="w-full">
            <div class="mb-20">
                @if (edit)
                {
                    var reportName = currentReport.reportName;
                <BlazorApp.Section.AdvancedResults solarScore="solarScore" currentReport="currentReport"
                    systems="systems" reportName="@reportName"/>    
                } else {
                <BlazorApp.Section.AdvancedResults solarScore="solarScore" currentReport="currentReport"
                    systems="systems" />
                }
            </div>
            <div class="w-full">
                <BlazorApp.Section.BuildYourHome @bind-selectedSystem="selectedSystem" appliances="@appliances"
                    systems="systems" solarScore="solarScore" reportAllAppliance="reportAllAppliance" currentReport="currentReport" edit="edit"/>
            </div>
        </div>
    }
</div>

@code {
    private bool logIn = false;
    private bool isAd = false;
    private bool isLoaded = false;
    private bool edit = false;
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private List<ApplianceModel> appliances = new List<ApplianceModel>();
    private List<ApplianceModel> advancedCalculationAppliances = new List<ApplianceModel>();
    private List<SystemModel> systems = new List<SystemModel>();
    private List<ReportAllApplianceModel> reportAllAppliance = new List<ReportAllApplianceModel>();
    private ReportModel currentReport = new ReportModel(); 
    private int selectedSystem = 0;
    private int solarScore = 0;
    private double longitude = 0;
    private double latitude = 0;


    protected override async Task OnInitializedAsync()
    {
        var loggedIn = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
        var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");
        logIn = loggedIn.Value;
        isAd = isAdmin.Value;
        isLoaded = true;

        @* Get the current report either half populated from the solarScore page or a fully populated if editing an existing report *@
        var editing = await ProtectedSessionStore.GetAsync<bool>("edit");
        edit = editing.Value;

        var rep = await ProtectedSessionStore.GetAsync<ReportModel>("currentReport");
        currentReport = rep.Value!;
        
        if (edit)
        {
            var reportAllAppl = await ProtectedSessionStore.GetAsync<List<ReportAllApplianceModel>>("userReportAllAppliance");
            reportAllAppliance = reportAllAppl.Value!;
        }
        @* TODO: Do calculations to set solar score from solar Irradtiation *@

        await GetAppliancesAsync();
        await GetSystemsAsync();
        for (int i = 0; i < systems.Count; i++)
        {
            if (currentReport.systemId == systems[i].systemId)
            {
                selectedSystem = i;
            }  
        }
        loadingService.HideLoadingScreen();

    }

    private async Task GetSystemsAsync()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/System/all");
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            systems = JsonSerializer.Deserialize<List<SystemModel>>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive =
                true
                })!;
            if (systems.Count > 0)
            {
                await ProtectedSessionStore.SetAsync("systems", systems);
            }
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }

    private async Task GetAppliancesAsync()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/Appliance/all");
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            appliances = JsonSerializer.Deserialize<List<ApplianceModel>>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive =
                true
                })!;
            if (appliances.Count > 0)
            {
                await ProtectedSessionStore.SetAsync("reportAppliances", appliances);
            }
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }
}