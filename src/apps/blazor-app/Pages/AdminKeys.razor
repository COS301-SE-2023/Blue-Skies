@page "/admin/keys"
@layout AdminLayout
@using BlazorApp.Components.Base
@using BlazorApp.Components
@using BlazorApp.Models
@using System.Text.Json;

<PageTitle>Blue Skies - Keys</PageTitle>

<div class="mt-2">
    <div class="flex w-full justify-around p-4">
        <div class="">
            <Heading>
                <Superscript>
                    <h2>This is a super script</h2>
                </Superscript>
                <Header>
                    <h1>API Keys</h1>
                </Header>
            </Heading>
        </div>
        <div class="flex  gap-10 items-center">
          <div @onclick="DeleteKeys">
              <Button style="outline">
                  <content>Delete</content>
             </Button>
            </div>
            <div @onclick="AddKey">
                <Button style="pill">
                   <content>Add</content>
                </Button>
            </div>
        </div>
    </div>

    <Toast @ref="Toast" Title="Successful" Type="success">
        <ChildContent>
            <p></p>
        </ChildContent>
    </Toast>


    <div class="relative overflow-x-auto  mt-2">
        <table class="w-full text-sm text-center ">
            <thead class="text-xs bg-primary-50  uppercase ">
                <tr>
                    <th scope="col" class="px-6 py-3 text-center">
                        <input type="checkbox" class="form-checkbox h-5 w-5  " />
                    </th>
                    <th scope="col" class="px-6 py-3 text-center">
                        Suspend
                    </th>
                    <th scope="col" class="px-6 py-3  ">
                        Owner
                    </th>
                    <th scope="col" class="px-6 py-3">
                        Monthly API usage
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var key in keys)
                {
                    <KeyEntry recordState="key.recordState" key="key" OnSelect="AddDeleteArr" OnSave="SaveKey" OnSuspendChange="ToggleSuspend"/>     
                }              
            </tbody>
        </table>
    
    </div>
</div>

@code {
    private Toast Toast { get; set; } = new Toast();

    private List<APIKeyModel> keys = new List<APIKeyModel>();

    private List<int> deleteArr = new List<int>();
    private async Task DeleteKeys(){
        foreach(int id in deleteArr){
            await DeleteKey(id);
        }
        deleteArr.Clear();
        await GetKeys();
    }
    private void AddDeleteArr(int id){
        if(deleteArr.Contains(id)){
            deleteArr.Remove(id);
        }else{
            deleteArr.Add(id);
        }
        //Print deleteArr
        foreach(int i in deleteArr){
            Console.WriteLine(i);
        }
    }

    private async Task DeleteKey(int id)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Delete, "http://localhost:5096/key/delete");
        var content = new StringContent("{\r\n  \"keyId\": " + id +"\r\n}", null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            await GetKeys();
            Console.WriteLine("Delete");
        }
        else
        {
            Console.WriteLine("Failed to delete");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await GetKeys();
    }

    private async Task GetKeys(){
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5096/key/all");
        var response = await client.SendAsync(request);
        if(response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            keys = JsonSerializer.Deserialize<List<APIKeyModel>>(data, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }

    private void AddKey()
    {
        keys.Add(new APIKeyModel { keyId = -1, owner = "", APIKey = "", remainingCalls = 0, suspended = 0, recordState = true });
    }

    private async Task ToggleSuspend(APIKeyModel key) {
        Console.WriteLine("Toggle Suspend");
            var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Patch, "http://localhost:5096/key/update");
            var content = new StringContent("{\r\n \"keyId\": " + key.keyId+ ",\r\n  \"owner\": \"" + key.owner+ "\",\r\n  \"APIKey\": \"" + key.APIKey + "\",\r\n  \"remainingCalls\": " + key.remainingCalls + ",\r\n  \"suspended\": " + key.suspended + " \r\n}", null, "application/json");
            request.Content = content;
            var response = await client.SendAsync(request);
            if(response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                await GetKeys();
            }
            else
            {
                Console.WriteLine("Failed");
                 Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
    }

    private async Task SaveKey(APIKeyModel key)
    {
        Toast.Show("Saved", "The record entry was successfuly saved.", "success");
        if(key.keyId == -1){
            Console.WriteLine("Add");
            var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Post, "http://localhost:5096/key/create");
            var content = new StringContent("{\r\n  \"owner\": \"" + key.owner+ "\",\r\n  \"APIKey\": \"" + key.APIKey + "\",\r\n  \"remainingCalls\": " + key.remainingCalls + ",\r\n  \"suspended\": " + key.suspended + "\r\n}", null, "application/json");
            request.Content = content;
            var response = await client.SendAsync(request);
            if(response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                await GetKeys();
            }
            else
            {
                Console.WriteLine("Failed");
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }

        }else{
            Console.WriteLine("Update");
            var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Patch, "http://localhost:5096/key/update");
            var content = new StringContent("{\r\n \"keyId\": " + key.keyId+ ",\r\n  \"owner\": \"" + key.owner+ "\",\r\n  \"APIKey\": \"" + key.APIKey + "\",\r\n  \"remainingCalls\": " + key.remainingCalls + ",\r\n  \"suspended\": " + key.suspended + " \r\n}", null, "application/json");
            request.Content = content;
            var response = await client.SendAsync(request);
            if(response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                await GetKeys();
            }
            else
            {
                Console.WriteLine("Failed");
                 Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
    }
}