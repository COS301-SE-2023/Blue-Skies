@page "/admin/appliances"
@layout AdminLayout
@using BlazorApp.Components.Base
@using BlazorApp.Components
@using BlazorApp.Models
@using System.Text.Json;

<PageTitle>Blue Skies - Appliances</PageTitle>

<div class="mt-2">
    <div class="flex w-full justify-around p-4">
        <div class="">
            <Heading >
                <Superscript>
                    <h2>This is a super script</h2>
                </Superscript>
                <Header>
                    <h1>Appliances</h1>
                </Header>
            </Heading>
        </div>
        <div class="flex  gap-10 items-center">
            <div @onclick="deleteAppliances">
                <Button style="outline">
                    <content>Delete</content>
                </Button>
            </div>
            <div @onclick="AddAppliance">
                <Button style="pill">
                   <content>Add</content>
                </Button>
            </div>
        </div>
    </div>
    
    <div class="relative overflow-x-auto  mt-2">
        <table class="w-full  text-sm text-left ">
            <thead class="text-xs bg-primary-50  uppercase ">
                <tr>
                    <th scope="col" class="px-6 py-3 ">
                        <input type="checkbox" class="form-checkbox h-5 w-5  " />
                    </th>
                    <th scope="col" class="px-6 py-3  ">
                        Appliance Type
                    </th>
                    <th scope="col" class="px-6 py-3 ">
                        Power usage
                    </th>
                    <th scope="col" class="px-6 py-3 "></th>
                </tr>
            </thead>
            <tbody>
                @* For each appliance *@
                @foreach (var appliance in appliances)
                {
                    <ApplianceEntry appliance="appliance" OnSelect="AddDeleteArr" />   
                }
            </tbody>
        </table>
    </div>
</div>

@code {

    public bool recordState { get; set; } = false;

    public void toggleRecordState(int state)
    {
        recordState = !recordState;
    }

    //Get All Appliances
    private List<ApplianceModel> appliances = new List<ApplianceModel>();
    private List<int> deleteArr = new List<int>();
    private async Task deleteAppliances(){
        foreach(int id in deleteArr){
            await DeleteAppliance(id);
        }
        deleteArr.Clear();
        await GetAppliances();
        Console.WriteLine("Delete");
    }
    private void AddDeleteArr(int id){
        if(deleteArr.Contains(id)){
            deleteArr.Remove(id);
        }else{
            deleteArr.Add(id);
        }
        //Print deleteArr
        foreach(int i in deleteArr){
            Console.WriteLine(i);
        }
    }

        //Delete Appliance
    private async Task DeleteAppliance(int id)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Delete, "http://localhost:5096/appliance/delete");
        var content = new StringContent("{\r\n  \"applianceId\": " +id+"\r\n}", null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            await GetAppliances();
        }
        else
        {
            Console.WriteLine("Failed to delete");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        
        await GetAppliances();
    }
    
    private async Task GetAppliances(){
          var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5096/appliance/all");
        var response = await client.SendAsync(request);
        if(response.StatusCode == System.Net.HttpStatusCode.OK)
        {
           var data = await response.Content.ReadAsStringAsync();
        appliances = JsonSerializer.Deserialize<List<ApplianceModel>>(data, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        }
        else
        {
            Console.WriteLine("Failed");
        }
        
    }

    private void AddAppliance()
    {
        appliances.Add(new ApplianceModel { applianceId = 0, type = "", powerUsage = 0 });
        @* add api call *@
    }
}