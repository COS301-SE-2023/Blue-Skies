@page "/login"
@layout AuthLayout
@using BlazorApp.Components.Base
@using BlazorApp.Models
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStore
@inject BlazorApp.Data.LoadingService loadingService

<PageTitle>Login</PageTitle>

    @if (!isLoaded) {}
    else if (logIn) {
        loadingService.ShowLoadingScreen();
        NavigationManager.NavigateTo("/");
    } else  if (isAd) {
        loadingService.ShowLoadingScreen();
        NavigationManager.NavigateTo("/admin/keys");
    } else {
        <div class="w-full h-screen overflow-hidden">
            <div class="flex fade-in-enter-active px-10 py-4 gap-20 flex-col w-full justify-center z-10 mt-10  items-center overflow-hidden">
                <Image ImageName="shapes.svg" css="absolute -top-1/2 -right-1/2 w-full h-full" alt="Shapes"/>
                <Image ImageName="shapes.svg" css="absolute -bottom-1/2 -left-1/2 w-full h-full" alt="Shapes"/>
                <div class="justify-start pl-20 flex w-full">
                    <a href="/" @onclick="() => loadingService.ShowLoadingScreen()" class="relative">
                        <Image ImageName="Logo.svg" css="h-16 md:h-20 xl:h-24" alt="Logo"/>
                    </a>
                </div>
                <Image ImageName="Sun.svg" css="absolute top-0 right-0" alt="Sun"/>
                <Image ImageName="Panels_Trees.svg" css="absolute bottom-0 left-0 " alt="UI Elements"/>
                <Image ImageName="Robert_Waving.png" css="absolute translate-x-1/2 bottom-10 robert-slide-in-right -right-[200px] h-[800px] " alt="Rob"/>

                <div class="flex mx-auto my-auto  items-center justify-center w-full">
                    <div class="my-auto mx-auto max-w-lg w-full text-left">
                        <Heading >
                            <Superscript>
                                <p>Welcome Back</p>
                            </Superscript>
                            <Header>
                                <h1>Log In</h1>
                            </Header>
                        </Heading>
                        <div class="@showError">
                            <p class="text-red-600 ">@errorMessage</p>
                        </div>
                        <form @onsubmit="HandleSubmit">
                            @if (!emailIsValid)
                            {
                                <p class="mt-8 text-red-600 font-bold">The email is invalid.</p>
                                <Input css="border-1 border-red-400" type="email" name="email" placeholder="Enter email address" @bind-InputValue="email"/>
                            }else {
                                <Input css="mt-8" type="email" name="email" placeholder="Enter email address" @bind-InputValue="email"/>
                            }
                            @if (!passwordIsValid)
                            {
                                <p class="mt-8 text-red-600 font-bold">Incorrect Password.</p>
                                <Input css="border-1 border-red-400" type="password" name="password" placeholder="Enter password" @bind-InputValue="password"/>
                            }
                            else {
                                <Input css="mt-8" type="password" name="password" placeholder="Enter password" @bind-InputValue="password"/>
                            }
                            <Button css="mt-10 flex justify-center mx-auto max-w-xs" style="pill">
                                <content>
                                    <input type="submit" value="Log In" />
                                </content>
                            </Button>
                            <p class="text-primary-900 text-center mt-8 text-sm">Don't have an account yet? <a href="/register" class="text-primary-500 ml-2">Register for free</a></p>
                        </form>
                    </div>
                </div>
            </div>

        </div>
    }

@code {
    public string? email { get; set; }
    public string? password { get; set; }

    public bool emailIsValid { get; set; } = true;
    public bool passwordIsValid { get; set; } = true;

    public string? showError = "hidden";
    public string? errorMessage = "Could not login";
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");

    private bool isAd = false;
    private bool logIn = false;
    private bool isLoaded = false;
    private string? redirect = "";

     protected override async Task OnInitializedAsync()
    {
        var loggedIn = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
        var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");
        var re = await ProtectedLocalStore.GetAsync<string>("redirect");
        redirect = re.Value;
        isAd = isAdmin.Value;
        logIn = loggedIn.Value;
        isLoaded = true;
    }

private async Task HandleSubmit()
{
    Console.WriteLine("OnSubmit");


    var isValid = ValidateForm();

    if (isValid)
    {
        await HandleValidSubmit();
    }
    else
    {
        HandleInvalidSubmit();
    }
}

    public async Task HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/auth/login");
        var content = new StringContent("{\r\n    \"email\" : \"" + email + "\",\r\n    \"password\" : \"" + password+ "\",\r\n    \"repassword\" : \"" + password + "\"\r\n}", null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);

        if(response.IsSuccessStatusCode){
            Console.WriteLine("Success");
            showError = "hidden";
            //Navigate to home page 
            UserModel? data= await response.Content.ReadFromJsonAsync<UserModel>();

            await ProtectedLocalStore.SetAsync("loggedIn", true);
            if (email != null)
            {
            await ProtectedLocalStore.SetAsync("userEmail", email);
            } else {
                await ProtectedLocalStore.SetAsync("userEmail", "");
            }
            if (data != null)
            {
                await ProtectedLocalStore.SetAsync("userId", data.userId);
                if(data.userRole == 1){
                    await ProtectedLocalStore.SetAsync("isAdmin", true);
                    loadingService.ShowLoadingScreen();
                    NavigationManager.NavigateTo("/admin/keys");              
                }
                else{
                    await ProtectedLocalStore.SetAsync("isAdmin", false);
                    await ProtectedLocalStore.DeleteAsync("redirect");
                    loadingService.ShowLoadingScreen();
                    NavigationManager.NavigateTo("/" + redirect);
                }
            } else {
                await ProtectedLocalStore.SetAsync("userId", "");
                await ProtectedLocalStore.SetAsync("isAdmin", false);
                await ProtectedLocalStore.SetAsync("loggedIn", false);
            }
      
        }else{
            Console.WriteLine("Failed");
            string message = await response.Content.ReadAsStringAsync();
            errorMessage = message;
             showError = "block";
        }
    }

    public void HandleInvalidSubmit()
    {
        Console.WriteLine("OnInvalidSubmit");
    }

private bool ValidateForm()
{
    emailIsValid = true;
    @* check email using regex *@
    if (string.IsNullOrEmpty(email))
    {
        Console.WriteLine("email is empty");
        return false;
    }
    else if (!Regex.IsMatch(email, @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$"))
    {
        Console.WriteLine("email is not valid");
        @* Add Toast *@
        emailIsValid = false;
        return false;
    }

    @* check if password is empty *@
    if (string.IsNullOrEmpty(password))
    {
        Console.WriteLine("password is empty");
        
        passwordIsValid = false;
        
        return false;
    }

    return true;
}

private void HandleEmailChanged(string value)
{
    email = value;
}

private void HandlePasswordChanged(string value)
{
    password = value;
}
}