@page "/login"
@layout AuthLayout
@using BlazorApp.Components.Base
@inject NavigationManager NavigationManager
<PageTitle>Login</PageTitle>

<div class="w-full h-[100vh]">
    <div class="absolute top-0 left-0 w-full h-full bg-black opacity-10"></div>
    <Image ImageName="Banhoek-landscape.jpg" css="w-full h-full object-fit -z-10" alt="background image"/>


    <div class="flex w-full h-full absolute top-0 left-0 justify-start">
    <div class="absolute top-14 right-72 h-32 w-3/12 bg-white opacity-40 blur-3xl"></div>
    <a href="/" class="absolute top-14 right-72">
        <Image ImageName="Logo.svg" css="h-20 m-4" alt="Logo"/>
    </a>
    @* <Image ImageName="19.svg" css="absolute top-10 right-10 z-10" alt="blob"/>
    <Image ImageName="19.svg" css="absolute top-10 right-10 z-10" alt="blob"/>
    <Image ImageName="19.svg" css="absolute top-10 right-10 z-10" alt="blob"/>
    <Image ImageName="19.svg" css="absolute top-10 right-10 z-10" alt="blob"/> *@
        <Card css="my-auto w-full text-left ml-60">
            <Heading >
                <Superscript>
                    <p>Welcome Back</p>
                </Superscript>
                <Header>
                    <h1>Log In</h1>    
                </Header>
            </Heading>
            <form @onsubmit="HandleSubmit">
                <Input css="mt-8" type="email" name="email" placeholder="Enter email address" @bind-InputValue="email"/>
                <Input css="mt-8" type="password" name="password" placeholder="Enter password" @bind-InputValue="password"/>
                <Button css="mt-10 flex justify-center" style="pill">
                    <content>
                        <input type="submit" value="Log In" />
                    </content>
                </Button>

                <p class="text-primary-900 text-center mt-8 text-sm">or continue with</p>
                <div class="flex justify-center mt-8 gap-4">
                    <Button css="" style="outline">
                        <content>
                            <a href="/" class="">
                                <Image ImageName="Google.svg" css="h-6" alt="Google"/>
                            </a>
                        </content>
                    </Button>
                    <Button style="outline">
                        <content>
                            <a href="/">
                                <Image ImageName="Facebook-logo.svg" css="h-6" alt="Facebook"/>
                            </a>
                        </content>
                    </Button>
                </div>
                <p class="text-primary-900 text-center mt-8 text-sm">Don't have an account yet? <a href="/register" class="text-primary-500 ml-2">Register for free</a></p>
            </form>
        </Card>
    </div>
</div>

@code {
    public string? email { get; set; }
    public string? password { get; set; }

private async Task HandleSubmit()
{
    Console.WriteLine("OnSubmit");
    Console.WriteLine(email);
    Console.WriteLine(password);

    var isValid = ValidateForm();

    if (isValid)
    {
        await HandleValidSubmit();
    }
    else
    {
        HandleInvalidSubmit();
    }
}

    public async Task HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5096/auth/login");
        var content = new StringContent("{\r\n    \"email\" : \"" + email + "\",\r\n    \"password\" : \"" + password+ "\",\r\n    \"repassword\" : \"" + password + "\"\r\n}", null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);
        if(response.IsSuccessStatusCode){
            Console.WriteLine("Success");
            //Navigate to home page
             NavigationManager.NavigateTo("/");
        }else{
             Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
        Console.WriteLine(await response.Content.ReadAsStringAsync());
    }

    public void HandleInvalidSubmit()
    {
        Console.WriteLine("OnInvalidSubmit");
    }

private bool ValidateForm()
{
    @* check email using regex *@
    if (string.IsNullOrEmpty(email))
    {
        Console.WriteLine("email is empty");
        return false;
    }
    else if (!Regex.IsMatch(email, @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$"))
    {
        Console.WriteLine("email is not valid");
        return false;
    }

    @* check if password is empty *@
    if (string.IsNullOrEmpty(password))
    {
        Console.WriteLine("password is empty");
        return false;
    }

    return true;
}

private void HandleEmailChanged(string value)
{
    email = value;
}

private void HandlePasswordChanged(string value)
{
    password = value;
}
}



