@page "/"
@using BlazorApp.Components.Base
@using System.Drawing;
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStorage
@layout MainLayout
@inject BlazorApp.Data.LoadingService loadingService
@using MaxRev.Gdal.Core;
@using System.IO;
@using System.Net.Http.Json;
@using System.Text.Json;

<PageTitle>Blue Skies - Home</PageTitle>

<div class="fade-in-enter-active">
  @if (satteliteImageData != null)
  {
    <Image ImageName="@satteliteImageData" css=" w-full h-full object-cover" alt="Shapes"/>
  }
  else
  {
      <p>No satellite image available.</p>
  }

  @if (heightMapData != null)
  {
    <Image ImageName="@heightMapData" css=" w-full h-full object-cover" alt="Shapes"/>
  }
  else
  {
      <p>No height map available.</p>
  }

  @if (annualFluxImageData != null)
  {
    <Image ImageName="@annualFluxImageData" css=" w-full h-full object-cover" alt="Shapes"/>
  }
  else
  {
      <p>No annual flux map available.</p>
  }

  @if (monthlyFluxImagesData != null)
  {
    foreach (var image in monthlyFluxImagesData)
    {
      if(image != null) {
        <Image ImageName="@image" css=" w-full h-full object-cover" alt="Shapes"/>
      }
    }
  } else {
      <p>No monthly flux maps available.</p>
  }

  @if (isLoaded){
    @if(isAd){
        loadingService.ShowLoadingScreen();
        NavigationManager.NavigateTo("/admin/keys");
    } else {
        <div class="w-full relative">
            <BlazorApp.Components.Home.Hero />

            @* How it works *@
            <Image ImageName="shapes.svg" css="absolute -top-64  -z-10 -left-1/2 w-2/3 h-2/3" alt="Shapes"/>
            <div class="mt-36 relative">
              <Image ImageName="Robert_Pointing.png" css="absolute top-0  -z-10  left-32 robert-slide-up h-72" alt="Rob"/>
              <BlazorApp.Components.Home.HowItWorks />
            </div>
            
            @* Unlock your full potential *@
            <BlazorApp.Components.Home.CTA />

            @* Frequently Asked Questions *@
            <div class="mt-72 lg:mt-44 mb-40 relative">
              <Image ImageName="shapes.svg" css="absolute -top-2/3 -z-20 -right-1/2 w-full h-full" alt="Shapes"/>
              <Image ImageName="Robert_Confused.png" css="absolute -top-32 z-20 right-16  h-80" alt="Rob"/>
              <Image ImageName="Panels.svg" css="absolute -top-20 -z-20 left-8" alt="Shapes"/>
            <BlazorApp.Components.Home.FAQ />
            </div>
        </div>
    }
  }
</div>


@code {
  private string? satteliteImageData;
  private string? heightMapData;

  private string? annualFluxImageData;

  private string?[]? monthlyFluxImagesData;
  private DataHandlers.RooftopDataHandler rooftopDataHandler = new DataHandlers.RooftopDataHandler();
  private bool isAd = false;
  private bool isLoaded = false;

/// <summary>
/// On page load, check if user is admin
/// </summary>
  protected override async Task OnInitializedAsync()
  {
    GdalBase.ConfigureAll();
    var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");
    await ProtectedSessionStorage.SetAsync("parent", "index");
    isAd = isAdmin.Value;
    isLoaded = true;
    loadingService.HideLoadingScreen();

    string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");

    bool showImages = true;
    bool loadImagesFromFiles = true;
    bool loadImagesFromAPI = false;
    bool saveDataToAPI = false;

    byte[]? satteliteImageDataBytes = null;
    byte[]? heightData = null;
    byte[]? monthlyFluxData = null;
    byte[]? maskData = null;
    byte[]? fluxData = null;

    var satteliteImageLocation = "Pages/SatelliteImage";
    var heightMapLocation = "Pages/DSM";
    var maskLocation = "Pages/Mask";
    var annualFluxLocation = "Pages/annualFlux";
    var montlyFluxLocation = "Pages/monthlyFlux";

    if(loadImagesFromFiles) {
      if (File.Exists(satteliteImageLocation))
      {
          using (var memoryStream = new MemoryStream())
          using (var fileStream = new FileStream(satteliteImageLocation, FileMode.Open, FileAccess.Read))
          {
              await fileStream.CopyToAsync(memoryStream);
              satteliteImageDataBytes = memoryStream.ToArray();
          }
      }

      if (File.Exists(heightMapLocation))
      {
        using (var memoryStream = new MemoryStream())
        using (var fileStream = new FileStream(heightMapLocation, FileMode.Open, FileAccess.Read))
        {
            await fileStream.CopyToAsync(memoryStream);
            heightData = memoryStream.ToArray();
        }
      }

      if (File.Exists(maskLocation)) {
        using (var memoryStream = new MemoryStream())
        using (var fileStream = new FileStream(maskLocation, FileMode.Open, FileAccess.Read))
        {
            await fileStream.CopyToAsync(memoryStream);
            maskData = memoryStream.ToArray();
        }
      }

      if(File.Exists(annualFluxLocation)) {
          using (var memoryStream = new MemoryStream())
          using (var fileStream = new FileStream(annualFluxLocation, FileMode.Open, FileAccess.Read))
          {
              await fileStream.CopyToAsync(memoryStream);
              fluxData = memoryStream.ToArray();
          }
      }

      if (File.Exists(montlyFluxLocation)) {
        using (var memoryStream = new MemoryStream())
        using (var fileStream = new FileStream(montlyFluxLocation, FileMode.Open, FileAccess.Read))
        {
            await fileStream.CopyToAsync(memoryStream);
            monthlyFluxData = memoryStream.ToArray();
        }
      }
    } else if(loadImagesFromAPI) {
      @* ToDO: add API Call*@
      double latitude = 123;
      double longitude = 123;

      var client = new HttpClient();
      var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/locationData/getLocationData/" + latitude.ToString().Replace(",",".") + "/" + longitude.ToString().Replace(",","."));
      Console.WriteLine("Calling get");
      var response = await client.SendAsync(request);
      if (response.IsSuccessStatusCode) {
        var data = await response.Content.ReadAsStringAsync();
        LocationDataModel result = JsonSerializer.Deserialize<LocationDataModel>(data)!;
        satteliteImageDataBytes = result.satteliteImageData;
        heightData = result.satteliteImageElevationData;
        maskData = result.maskData;
        fluxData = result.annualFluxData;
        monthlyFluxData = result.monthlyFluxData;

        Console.WriteLine("Letttsss goooo fetched successfully");
      } else {
        Console.WriteLine("Error fetching data");
      }
    }

    if(saveDataToAPI) {
      LocationDataModel locationDataModel = new LocationDataModel();
      locationDataModel.latitude = 123;
      locationDataModel.longitude = 123;
      locationDataModel.locationName = "Test";
      locationDataModel.solarPanelsData = "Sollar panels data";
      locationDataModel.satteliteImageData = satteliteImageDataBytes;
      locationDataModel.satteliteImageElevationData = heightData;
      locationDataModel.maskData = maskData;
      locationDataModel.annualFluxData = fluxData;
      locationDataModel.monthlyFluxData = monthlyFluxData;
      locationDataModel.daylightHours = 123;
      locationDataModel.horisonElevationData = "Horison elevation data";

      @* ToDO: add API Call *@

      var client = new HttpClient();
      var request = new HttpRequestMessage(HttpMethod.Post, API_PORT + "/locationData/create");
      var postData = new
      {
          latitude = locationDataModel.latitude,
          longitude = locationDataModel.longitude,
          locationName = locationDataModel.locationName,
          solarPanelsData = locationDataModel.solarPanelsData,
          satteliteImageData = locationDataModel.satteliteImageData,
          satteliteImageElevationData = locationDataModel.satteliteImageElevationData,
          annualFluxData = locationDataModel.annualFluxData,
          monthlyFluxData = locationDataModel.monthlyFluxData,
          maskData = locationDataModel.maskData,
          daylightHours =  locationDataModel.daylightHours,
          horisonElevationData = locationDataModel.horisonElevationData
      };

      var json = JsonSerializer.Serialize(postData);
      request.Content = new StringContent(json, null, "application/json");
      var response = await client.SendAsync(request);
      
      if (response.IsSuccessStatusCode)
      {
        Console.WriteLine("Success leeeetss goooooo");
      } else {
        Console.WriteLine("Error noooooooooo");
      }
    }

    if(showImages) {
      if(satteliteImageDataBytes != null) {
        satteliteImageData = rooftopDataHandler.GetSatelliteImage(satteliteImageDataBytes);
      }

      if(heightData != null) {
        heightMapData = rooftopDataHandler.GetHeightMap(heightData);      
      }
      
      if(maskData != null && satteliteImageDataBytes != null && fluxData != null) {
        annualFluxImageData = rooftopDataHandler.GetAnnualFluxMap(fluxData, satteliteImageDataBytes, maskData);
      }

      if(monthlyFluxData != null && satteliteImageDataBytes != null && maskData != null) {
        monthlyFluxImagesData = rooftopDataHandler.GetMonthlyFluxMap(monthlyFluxData, satteliteImageDataBytes, maskData);
      }
    }
  }

  /// <summary>
  /// Navigate to register page
  /// </summary>
  void Register()
  {
    loadingService.ShowLoadingScreen();
    NavigationManager.NavigateTo("/register");
  }
}