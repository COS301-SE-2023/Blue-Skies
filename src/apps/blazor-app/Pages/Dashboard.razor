@page "/dashboard"
@layout MainLayout
@using BlazorApp.Components.Base
@using BlazorApp.Components.Dashboard
@using BlazorApp.Models
@using System.Text.Json
@inject ProtectedLocalStorage ProtectedLocalStore
@inject NavigationManager NavigationManager

<PageTitle>Dashboard - Blue Skies</PageTitle>

<div class="fade-in-enter-active">
    @if (!isLoaded) { }
    else if (!logIn)
    {
        NavigationManager.NavigateTo("/login");
    }
    else if (isAd)
    {
        NavigationManager.NavigateTo("/admin/keys");
    }
    else
    {
        <div class="flex flex-col justify-center items-center px-10">
            @{
                selectedDate = reports[selectedReport].dateCreated;
            }
            <SelectCalculation @bind-selectedReport="selectedReport" userReports="userReportNames"
                dateCreated="selectedDate" />
            <LocationInfo css="mt-8" selectedReport="selectedReport" reportAll="reportAll" />
            <div class="mt-10 w-full">
                <Card>
                    <Heading>
                        <Header>
                            <h1 class="text-xl">Appliances</h1>
                        </Header>
                        <Subscript>
                            <p>What do you want to run in a power outage?</p>
                        </Subscript>
                    </Heading>
                    <div class="p-10 justify-start flex flex-col rounded-3xl w-full">
                        <div class="flex gap-4 justify-evenly scale-90">
                            @{
                                updateAppliances();
                                for (int i = 0; i < reportAllAppliance.Count; i++)
                                {
                                    var appliance = reportAllAppliance[i].type;
                                    var count = reportAllAppliance[i].numberOfAppliances;
                                    string iconName = appliance + ".svg";
                                    <Appliance ImageName="@iconName" Name="@appliance" Count="@count" />
                                }
                            }
                            @* <Appliance ImageName="Fridge.svg" Name="Fridge" Count="1" />
                        <Appliance ImageName="Microwave.svg" Name="Microwave" Count="1" />
                        <Appliance ImageName="Kettle.svg" Name="Kettle" Count="0" />
                        <Appliance ImageName="CCTV.svg" Name="CCTV" Count="4" />
                        <Appliance ImageName="LED Lights.svg" Name="LED Lights" Count="12" />
                        <Appliance ImageName="Washing Machine.svg" Name="Washing Machine" Count="1" />
                        <Appliance ImageName="Computer.svg" Name="Computer" Count="2" />
                        <Appliance ImageName="TV.svg" Name="TV" Count="2" /> *@
                        </div>
                    </div>
                    <div class="flex w-full mt-5">
                        <div class="w-full flex flex-col gap-4 justify-start items-center">
                            <h3 class="font-medium text-md text-primary-900 text-left">Running Hours</h3>
                            <div class="flex items-center text-left gap-2">
                                <div class="w-2 h-2 bg-primary-400 rounded-full"></div>
                                <p class="">Usable Sunlight</p>
                            </div>
                            <svg width="220" height="184" viewBox="0 0 220 184" fill="none"
                                xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" clip-rule="evenodd"
                                    d="M2.11367 131.46C5.68531 149.416 13.67 166.141 25.2784 180.159C28.911 184.545 35.483 184.517 39.5102 180.49C43.5375 176.463 43.4836 169.966 39.9438 165.504C27.8485 150.258 20.6247 130.973 20.6247 110C20.6247 60.6395 60.6392 20.625 110 20.625C159.36 20.625 199.375 60.6395 199.375 110C199.375 130.972 192.151 150.258 180.056 165.503C176.516 169.965 176.462 176.462 180.49 180.49C184.517 184.517 191.089 184.545 194.722 180.159C206.33 166.141 214.315 149.416 217.886 131.46C222.131 110.122 219.952 88.0047 211.627 67.9048C203.301 47.805 189.202 30.6253 171.113 18.5383C153.023 6.45139 131.756 2.01229e-06 110 0C88.2441 0 66.9767 6.45139 48.8873 18.5383C30.7979 30.6253 16.6989 47.8049 8.3733 67.9048C0.0476613 88.0047 -2.13071 110.122 2.11367 131.46Z"
                                    fill="#D9D9D9" />
                                <path fill-rule="evenodd" clip-rule="evenodd"
                                    d="M8.07957 151.379C12.3173 161.817 18.1252 171.523 25.2854 180.167C28.9145 184.549 35.4795 184.52 39.5025 180.497C43.5255 176.474 43.4715 169.985 39.9378 165.526C35.3438 159.729 31.4811 153.377 28.4445 146.613C26.4887 142.263 24.8707 137.729 23.6238 133.043C21.5145 125.136 20.4962 116.96 20.6118 108.742C20.7155 101.379 21.7281 94.0748 23.6143 86.9927C24.8675 82.275 26.497 77.7105 28.4685 73.3333C33.2607 62.6776 40.0962 53.0622 48.5908 45.0328C55.8453 38.1756 64.1867 32.5915 73.2621 28.5006C77.6929 26.5002 82.316 24.8504 87.0961 23.5868C95.7755 21.2863 104.769 20.3023 113.773 20.6827C120.228 20.9553 126.618 21.9262 132.834 23.5682C137.679 24.8447 142.363 26.5179 146.849 28.5507C147.313 28.7606 147.775 28.9745 148.236 29.1925C155.928 32.8321 163.045 37.5437 169.38 43.1728C173.633 46.9518 180.109 47.3708 184.352 43.5806C188.595 39.7903 188.993 33.2373 184.822 29.3674C176.594 21.7322 167.231 15.3873 157.048 10.5691C143.755 4.27926 129.336 0.718717 114.643 0.098026C99.9499 -0.522665 85.2817 1.8091 71.5056 6.95543C57.7295 12.1018 45.1252 19.9582 34.438 30.0601C23.7508 40.162 15.1977 52.3043 9.28444 65.7691C3.37118 79.2338 0.217845 93.7475 0.0108935 108.452C-0.196058 123.157 2.54758 137.753 8.07957 151.379Z"
                                    fill="#3871C1" />
                                <path
                                    d="M109.016 97.75V100.172L100.219 120.5H95.4688L104.266 101.266H92.9375V97.75H109.016ZM116.516 96.5V120.5H112.016V96.5H116.516ZM115.875 111.453H114.641C114.651 110.276 114.807 109.193 115.109 108.203C115.411 107.203 115.844 106.339 116.406 105.609C116.969 104.87 117.641 104.297 118.422 103.891C119.214 103.484 120.089 103.281 121.047 103.281C121.88 103.281 122.635 103.401 123.312 103.641C124 103.87 124.589 104.245 125.078 104.766C125.578 105.276 125.964 105.948 126.234 106.781C126.505 107.615 126.641 108.625 126.641 109.812V120.5H122.109V109.781C122.109 109.031 122 108.443 121.781 108.016C121.573 107.578 121.266 107.271 120.859 107.094C120.464 106.906 119.974 106.812 119.391 106.812C118.745 106.812 118.193 106.932 117.734 107.172C117.286 107.411 116.927 107.745 116.656 108.172C116.385 108.589 116.188 109.078 116.062 109.641C115.938 110.203 115.875 110.807 115.875 111.453Z"
                                    fill="#000F52" />
                            </svg>
                        </div>
                        <div class="w-full">
                            @{
                                var imageName = "";
                                var sysSize = reportAll[selectedReport].systemSize;
                                if (sysSize != null)
                                {
                                    if (sysSize.Equals("Small"))
                                    {
                                        imageName = "House 3.svg";
                                    }
                                    else if (sysSize.Equals("Medium"))
                                    {
                                        imageName = "House 2.svg";
                                    }
                                    else if (sysSize.Equals("Large"))
                                    {
                                        imageName = "House 1.svg";
                                    }
                                }
                            }
                            <Image ImageName=@imageName alt="House" css="scale-90" />
                        </div>
                        <div class="w-full flex flex-col gap-4 justify-start items-center">
                            <h3 class="font-medium text-md text-primary-900 text-left">Appliance Energy Consumption</h3>
                            <div class="flex items-center text-left gap-2">
                                <div class="w-2 h-2 bg-primary-400 rounded-full"></div>
                                <p class="">High Energy Consumption</p>
                            </div>
                            <svg width="222" height="222" viewBox="0 0 222 222" fill="none"
                                xmlns="http://www.w3.org/2000/svg">
                                <path
                                    d="M111 221.372C171.751 221.372 221 172.123 221 111.372C221 50.6203 171.751 1.37158 111 1.37158C50.2487 1.37158 1 50.6203 1 111.372C1 172.123 50.2487 221.372 111 221.372Z"
                                    stroke="#C1C7CD" />
                                <path
                                    d="M111 199.372C159.601 199.372 199 159.973 199 111.372C199 62.7705 159.601 23.3716 111 23.3716C62.3989 23.3716 23 62.7705 23 111.372C23 159.973 62.3989 199.372 111 199.372Z"
                                    stroke="#C1C7CD" />
                                <path
                                    d="M111 177.372C147.451 177.372 177 147.822 177 111.372C177 74.9208 147.451 45.3716 111 45.3716C74.5492 45.3716 45 74.9208 45 111.372C45 147.822 74.5492 177.372 111 177.372Z"
                                    stroke="#C1C7CD" />
                                <path
                                    d="M111 155.372C135.301 155.372 155 135.672 155 111.372C155 87.0711 135.301 67.3716 111 67.3716C86.6995 67.3716 67 87.0711 67 111.372C67 135.672 86.6995 155.372 111 155.372Z"
                                    stroke="#C1C7CD" />
                                <path
                                    d="M111 133.372C123.15 133.372 133 123.522 133 111.372C133 99.2213 123.15 89.3716 111 89.3716C98.8497 89.3716 89 99.2213 89 111.372C89 123.522 98.8497 133.372 111 133.372Z"
                                    stroke="#C1C7CD" />
                                <path
                                    d="M199.159 72.7442C204.354 84.601 207.104 97.3839 207.244 110.328C207.385 123.272 204.912 136.112 199.976 148.079C195.039 160.045 187.739 170.893 178.512 179.973C169.286 189.053 158.323 196.178 146.278 200.923L111 111.372L199.159 72.7442Z"
                                    fill="#3871C1" stroke="white" />
                                <path
                                    d="M18.9185 83.3527C24.9017 63.6895 37.0222 46.4579 53.5057 34.1805C69.9892 21.903 89.97 15.2246 110.523 15.1228L111 111.372L18.9185 83.3527Z"
                                    fill="#3871C1" stroke="white" />
                                <path
                                    d="M110.624 36.9282C125.07 36.9282 139.201 41.1528 151.277 49.0818C163.353 57.0108 172.846 68.2981 178.589 81.5541L110.624 110.996L110.624 36.9282Z"
                                    fill="#75CDF7" stroke="white" />
                                <path
                                    d="M137.866 179.871C125.643 184.706 112.354 186.2 99.3632 184.202C86.3721 182.204 74.1468 176.784 63.9421 168.5L110.624 110.996L137.866 179.871Z"
                                    fill="#A0D3FE" stroke="white" />
                                <path
                                    d="M88.5619 137.905C83.2326 133.555 79.3119 127.723 77.2951 121.146C75.2782 114.569 75.2556 107.542 77.2301 100.952L110.57 110.942L88.5619 137.905Z"
                                    fill="#E0EEFE" stroke="white" />
                            </svg>
                        </div>
                    </div>
                </Card>
            </div>
        </div>
    }
</div>
@code {
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private List<ReportModel> reports = new List<ReportModel>();
    private List<string> userReportNames = new List<string>();
    private List<ReportAllModel> reportAll = new List<ReportAllModel>();
    private List<ReportAllApplianceModel> allReportAllAppliance = new List<ReportAllApplianceModel>();
    private List<ReportAllApplianceModel> reportAllAppliance = new List<ReportAllApplianceModel>();

    private bool isLoaded = false;
    private bool logIn = false;
    private bool isAd = false;
    private int userId = -1;
    private int selectedReport;
    private DateTime selectedDate;
    protected override async Task OnInitializedAsync()
    {
        var loggedIn = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
        var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");
        var usId = await ProtectedLocalStore.GetAsync<int>("userId");
        logIn = loggedIn.Value;
        isAd = isAdmin.Value;
        isLoaded = true;
        userId = usId.Value;

        await GetUserReports();
        await GetReportAll();
        await GetReportAllAppliance();
    }

    private void updateAppliances()
    {
        reportAllAppliance.Clear();
        int reportId = reportAll[selectedReport].reportId;
        Console.WriteLine("Count all: " + allReportAllAppliance.Count);
        Console.WriteLine("Report id: " + reportId);
        foreach (var reportAllApp in allReportAllAppliance)
        {
            Console.WriteLine("Report id in loop: " + reportAllApp.reportId);
            if (reportAllApp.reportId == reportId)
            {
                reportAllAppliance.Add(reportAllApp);
            }
        }
        Console.WriteLine("Count: " + reportAllAppliance.Count);
    }

    private async Task GetUserReports()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/Report/getUserReports/" + userId);
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            reports = JsonSerializer.Deserialize<List<ReportModel>>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive =
                true
                })!;
            if (reports.Count > 0)
            {
                await ProtectedLocalStore.SetAsync("userReports", reports);
            }
        }
        else
        {
            Console.WriteLine("Failed to get user reports");
        }
    }

    private async Task GetReportAll()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/ReportAll/user/" + userId);
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            reportAll = JsonSerializer.Deserialize<List<ReportAllModel>>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive =
                true
                })!;
            if (reportAll.Count > 0)
            {
                await ProtectedLocalStore.SetAsync("reportAll", reportAll);
            }
            foreach (var report in reportAll)
            {
                userReportNames.Add(report.reportName!);
            }
        }
        else
        {
            Console.WriteLine("Failed to get report all");
        }
    }

    private async Task GetReportAllAppliance()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/ReportAllAppliance/all");
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            allReportAllAppliance = JsonSerializer.Deserialize<List<ReportAllApplianceModel>>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive =
                true
                })!;
            if (allReportAllAppliance.Count > 0)
            {
                await ProtectedLocalStore.SetAsync("userReportAllAppliancereportAllAppliance", allReportAllAppliance);
            }
        }
        else
        {
            Console.WriteLine("Failed to get allReportAllAppliance");
        }
    }
}
