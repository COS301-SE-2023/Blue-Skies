@page "/dashboard"
@layout MainLayout
@using BlazorApp.Components.Base
@using BlazorApp.Components.Dashboard
@using BlazorApp.Components
@using BlazorApp.FancyData
@using ChartJs.Blazor.PolarAreaChart
@using ApplianceEnergyConsumption
@using BlazorApp.Models;
@using BlazorApp.Components.Advanced
@inject BlazorApp.Data.ReportManager reportManager
@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject BlazorApp.Data.ToastService toastService
@inject BlazorApp.Data.TooltipService tooltipService

<PageTitle>Dashboard - Blue Skies</PageTitle>
<div class="fade-in-active px-1 md:px-5">
    <Image ImageName="04.png" css="absolute hidden md:block top-20 lg:-top-10 -right-20 lg:-right-5" />
    @if (reports.Count > 0 || !receivedReports)
    {
            <div class="flex flex-col justify-center items-center px-10">
            @{
                if (reports.Count > selectedReport)
                {
                    selectedDate = reports[selectedReport].dateCreated;
                }
            }
            <SelectCalculation @bind-selectedReport="selectedReport" userReports="reports" dateCreated="selectedDate" switchReport="SwitchReport" @bind-isGenerateReport="@isGenerateReport" displayNewData="@currentLocationDataReceived"/>
            @if (isGenerateReport == false)
            {
                    <LocationInfo css="mt-8" reports="reports" selectedReport="selectedReport" currentLocationData="@currentLocationData" systems="systems" selectedSystem="selectedSystem" solarScore="solarScore" displayNewData="@currentLocationDataReceived"/>
                    <div class="md:w-2/5 w-4/5 mt-10">
                        <Tabs @bind-Items="tabs" ></Tabs>
                    </div>
                    <div class="w-full mt-10">
                        @if(tabs[0].active) {
                            <div class="fade-in-active px-2 mb-5">
                                <Appliances @ref="applianceComponent" selectedAppliance="@selectedAppliance" selectedReport="@selectedReport" selectedSystem="@selectedSystem" currentLocationData="@currentLocationData" reports="@reports" systems="@systems" />
                            </div>
                        }else if (tabs[1].active)
                        {
                            <div class="fade-in-active">
                                @{
                                    int numSolarPanels = 0;
                                    if (systems.Count > 0)
                                    {
                                        for (int i = 0; i < systems.Count; i++)
                                        {
                                            if (systems[i].systemId == reports[selectedReport].systemId)
                                            {
                                                numSolarPanels = systems[i].numberOfPanels;
                                            }
                                        }
                                    }
                                    <Card css="w-full mb-5">
                                        <FancyData @ref="fancyDataComponent" currentLocationData="currentLocationData"  numSolarPanels="@numSolarPanels" cancellationTokenSource="@cancellationTokenSource"/>
                                    </Card>
                                }
                            </div>
                        }
                    </div>
            }
            </div>
    }
    else
    {
            <div class="flex flex-col justify-center items-center px-10 mt-10">
                <div class="flex flex-col justify-center items-center">
                    <h1 class="text-4xl font-medium text-primary-900">No Reports</h1> <br />
                    <p class="text-center">You have no reports. Create a report to get started.</p>
                </div>
                <div class="mt-10 flex flex-col sm:flex-row items-center justify-center gap-6">
                    <div @onclick='() => CreateReport()'>
                        <Button style="pill" css="h-14">
                            <p class="text-sm font-semibold hover:text-white">Create a Report </p>
                        </Button>
                    </div>
                </div>
            </div>
    }
</div>
            <ModalPopup @ref="modalPopup" Title="Delete Record?">
                <ChildContent>
                    <p>Are you sure that you want to delete this record?</p>
                    <div class="flex flex-row gap-4 justify-center">
                        <div @onclick="Delete">
                            <Button style="danger">
                                <p>delete</p>
                            </Button>
                        </div>
                        <div @onclick="modalPopup.Dismiss">
                            <Button style="outline-danger">
                                <p>Cancel</p>
                            </Button>
                        </div>
                    </div>
                </ChildContent>
            </ModalPopup>


@code {
    Appliances? applianceComponent;
    FancyData? fancyDataComponent;
    private DataHandlers.SolarDataHandler solarCalculator = new DataHandlers.SolarDataHandler();
    private SharedUtils.systemClass systemClass = new SharedUtils.systemClass();
    private SharedUtils.reportClass reportClass = new SharedUtils.reportClass();
    private SharedUtils.locationDataClass locationDataClass = new SharedUtils.locationDataClass();
    private List<ReportModel> reports = new List<ReportModel>();
    private List<SystemModel> systems = new List<SystemModel>();
    private List<SystemModel> allSystems = new List<SystemModel>();
    private bool logIn = false;
    private bool isAd = false;
    private int userId = -1;
    [Parameter]
    public int selectedReport { get; set; }
    public int selectedSystem { get; set; }
    public string selectedAppliance = "";
    public bool isGenerateReport = false;
    private DateTime selectedDate;
    private ModalPopup modalPopup { get; set; } = new ModalPopup();
    public LocationDataModel? currentLocationData = new LocationDataModel();
    public int solarScore = 0;
    private bool receivedReports = false;
    private bool currentLocationDataReceived = false;
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
    private List<TabItemModel> tabs = new List<TabItemModel>
    {
        new TabItemModel("Appliances", true),
        new TabItemModel("Advanced", false)
    };

    /// <summary>
    /// Load the user's reports and all applianceComponent
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Dashboard Initialized");
        cancellationTokenSource = new CancellationTokenSource();
        selectedReport = 0;

        var loggedIn = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
        var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");
        var usId = await ProtectedLocalStore.GetAsync<int>("userId");
        logIn = loggedIn.Value;
        isAd = isAdmin.Value;
        userId = usId.Value;

        if (!logIn)
        {
            await ProtectedSessionStore.SetAsync("redirect", "dashboard");
            NavigationManager.NavigateTo("/login");
        }
        else if (isAd)
        {
            NavigationManager.NavigateTo("/admin/keys");
        }

        Console.WriteLine("Getting Reports ------------------------------------------");

        int counter = 0;
        List<ReportModel>? result = null;
        while(result == null && counter < 10) {
            result = await reportClass.GetUserReports(userId);
            counter++;
            await Task.Delay(1000);
        }

        if (result != null) {
            reports = result;
            if(reports.Count > 0) {
                await ProtectedSessionStore.SetAsync("userReports", reports);
            }
        } else {
            toastService.ShowToast("Error getting your reports", "Please try again later", "error");
        }
        receivedReports = true;

        if (reports.Count > 0)
        {
            selectedReport = 0;
            await ProtectedSessionStore.DeleteAsync("createdReport");
            allSystems = await systemClass.GetAllSystems();
            await SetSelectedSystem();
            currentLocationData = await locationDataClass.GetInitialLocationData(reports[selectedReport].latitude, reports[selectedReport].longitude, null, cancellationTokenSource.Token);
            currentLocationDataReceived = true;
            if (currentLocationData != null)
            {
                await ProtectedSessionStore.SetAsync("latitude", currentLocationData.latitude);
                await ProtectedSessionStore.SetAsync("longitude", currentLocationData.longitude);
                solarScore = solarCalculator.getSolarScore(currentLocationData.solarPanelsData);
            }

            await ProtectedSessionStore.SetAsync("currentReport", reports[selectedReport]);
        }
        reportManager.EditReportRequested += Edit;
        reportManager.DeleteReportRequested += ShowModal;
        _ = GetSatteliteImage();
        await applianceComponent!.updateAppliances();
    }

    private async Task GetSatteliteImage() {
        if(currentLocationData != null && currentLocationData.satteliteImageData == null) {
            currentLocationData = await locationDataClass.GetSatelliteImageData(currentLocationData.latitude, currentLocationData.longitude, currentLocationData, cancellationTokenSource.Token);
            StateHasChanged();
        }
    }

    public async Task SetSelectedSystem()
    {
        systems.Clear();
        for (int i = 0; i < allSystems.Count; i++)
        {
            if (i < 3 || allSystems[i].systemId == reports[selectedReport].systemId)
            {
                systems.Add(allSystems[i]);
            }
        }
        if (systems.Count > 0)
        {
            for (int i = 0; i < systems.Count; i++)
            {
                if (systems[i].systemId == reports[selectedReport].systemId)
                {
                    await ProtectedSessionStore.SetAsync("selectedSystem", i);
                    selectedSystem = i;
                }
            }
            await ProtectedSessionStore.SetAsync("systems", systems);
        }
    }

    public async Task SwitchReport()
    {
        if (reports.Count > 0) {
            tabs[0].active = true;
            tabs[1].active = false;
            applianceComponent!.SwitchReport();
            systems.Clear();
            currentLocationDataReceived = false;
            selectedAppliance = ""; 
            currentLocationData = new LocationDataModel();
            Console.WriteLine("-----------------------------------------------------------");
            Console.WriteLine("Switching Report");
            cancellationTokenSource.Cancel();
            cancellationTokenSource = new CancellationTokenSource();
            await ProtectedSessionStore.SetAsync("currentReport", reports[selectedReport]);
            await SetSelectedSystem();

            int numTries = 0;
            currentLocationData = null;
            while (currentLocationData == null && numTries < 10)
            {
                currentLocationData = await locationDataClass.GetInitialLocationData(reports[selectedReport].latitude, reports[selectedReport].longitude, null, cancellationTokenSource.Token);
                numTries++;
                await Task.Delay(1000);
            }
            currentLocationDataReceived = true;
            if (currentLocationData != null)
            {
                await ProtectedSessionStore.SetAsync("latitude", currentLocationData.latitude);
                await ProtectedSessionStore.SetAsync("longitude", currentLocationData.longitude);
                solarScore = solarCalculator.getSolarScore(currentLocationData.solarPanelsData);
            }
            _ = applianceComponent!.updateAppliances();
            _ = GetSatteliteImage();
            @* @if (fancyDataComponent != null)
            {
                fancyDataComponent!.init();
            } *@
        }
    }

    private void Dispose()
    {
        reportManager.EditReportRequested -= Edit;
        reportManager.DeleteReportRequested -= ShowModal;
    }

    private Task CreateReport()
    {
        NavigationManager.NavigateTo("/advanced");
        return Task.CompletedTask;
    }
    private void ShowModal()
    {
        modalPopup.Show();
        StateHasChanged();
        Console.WriteLine("Modal shown");
    }

    /// <summary>
    /// Edit the current report
    /// </summary>
    private async void Edit()
    {
        await ProtectedSessionStore.SetAsync("edit", true);
        NavigationManager.NavigateTo("/advanced");
        StateHasChanged();
    }

    /// <summary>
    /// Delete the current report
    /// </summary>
    private async Task Delete()
    {
        modalPopup.Dismiss();
        if (await reportClass.DeleteReport(reports[selectedReport].reportId))
        {
            toastService.ShowToast("Deleted Calculation", "Report successfuly deleted.", "success");
            Console.WriteLine("Report succesfully deleted");
            reports.RemoveAt(selectedReport);
            selectedReport = 0;
            await SwitchReport();
            StateHasChanged();
        }
    }
}
