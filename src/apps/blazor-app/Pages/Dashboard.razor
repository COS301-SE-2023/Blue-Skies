@page "/dashboard"
@layout MainLayout
@using BlazorApp.Components.Base
@using BlazorApp.Components.Dashboard
@using BlazorApp.Components
@using BlazorApp.FancyData
@using ChartJs.Blazor.PolarAreaChart
@using ApplianceEnergyConsumption
@inject BlazorApp.Data.ReportManager reportManager
@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject BlazorApp.Data.ToastService toastService

<PageTitle>Dashboard - Blue Skies</PageTitle>
        <div class="fade-in-active px-1 md:px-5">
        @if (reports.Count > 0 || !receivedReports)
        {
                <div class="flex flex-col justify-center items-center px-10">
                @{
                    if (reports.Count > selectedReport)
                    {
                        selectedDate = reports[selectedReport].dateCreated;
                    }
                }
                    <SelectCalculation @bind-selectedReport="selectedReport" userReports="reports" dateCreated="selectedDate" switchReport="SwitchReport" @bind-isGenerateReport="@isGenerateReport" displayNewData="@appliancesLoaded"/>
                @if (isGenerateReport == false)
                {
                        <LocationInfo css="mt-8" reports="reports" selectedReport="selectedReport" currentLocationData="@currentLocationData" systems="allSystems" solarScore="solarScore" displayNewData="@appliancesLoaded"/>
                        <div class="mt-10 w-full">
                            <Card>
                            @if (appliancesLoaded)
                            {
                                <Heading>
                                    <Header>
                                        <h1 class="text-xl">Appliances</h1>
                                    </Header>
                                    <Subscript>
                                        <p>What do you want to run in a power outage?</p>
                                    </Subscript>
                                </Heading>
                            }
                            else
                            {
                                <div role="status" class="max-w-sm animate-pulse w-60 my-auto">
                                    <div class="h-6 bg-gray-200 rounded-full w-36"></div>
                                    <div class="h-3 bg-gray-200 rounded-full w-96 mt-2"></div>
                                    <span class="sr-only">Loading...</span>
                                </div> 
                            }

                                <div class="p-10  justify-start flex flex-col rounded-3xl w-full">
                                    <div class="grid grid-cols-2 md:flex gap-4 justify-center">
                                    @{

                                        @* Loop over allAppliances *@
                                        if (appliancesLoaded)
                                        {
                                           foreach (KeyValuePair<String, List<ApplianceModel>> app in allAppliances)
                                            {
                                                string iconName = app.Key + ".svg";
                                                int count = 0;
                                                List<ApplianceModel> tempAppliances = app.Value;
                                                for (int i = 0; i < tempAppliances.Count; i++)
                                                {
                                                    count += tempAppliances[i].quantity;
                                                }
                                                <div  class='@(selectedAppliance == app.Key ? "bg-primary-100" : "") h-40 p-3 rounded-2xl rounded-b-none' @onclick='(() =>  SelectAppliance(app.Key))'>
                                                    <Appliance  css="hover:shadow transition-all duration-300 hover:-translate-y-1" ImageName="@iconName" Name="@app.Key" Count="@count" />
                                                </div>                            
                                            }
                                        } else if (allAppliances.Count == 0 && appliancesLoaded)
                                        {
                                            <p class="text-center">No appliances added</p>
                                        }
                                        else
                                        {
                                             <div class="justify-center">
                                                <div class="flex bg-gray-100 shadow-md rounded-3xl mx-auto p-3 w-[80px] h-[80px] animate-pulse mt-4">
                                                    <svg class="w-14 h-14 text-gray-200" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                                        <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                                                    </svg>
                                                </div>
                                                <div role="status" class="max-w-sm animate-pulse mt-3">
                                                    <div class="h-2 bg-gray-200 rounded-full w-[100px] mb-2.5"></div>
                                                    <span class="sr-only">Loading...</span>
                                                </div>
                                            </div>
                                            <div class="justify-center">
                                                <div class="flex bg-gray-100 shadow-md rounded-3xl mx-auto p-3 w-[80px] h-[80px] animate-pulse mt-4">
                                                    <svg class="w-14 h-14 text-gray-200" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                                        <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                                                    </svg>
                                                </div>
                                                <div role="status" class="max-w-sm animate-pulse mt-3">
                                                    <div class="h-2 bg-gray-200 rounded-full w-[100px] mb-2.5"></div>
                                                    <span class="sr-only">Loading...</span>
                                                </div>
                                            </div>
                                            <div class="justify-center">
                                                <div class="flex bg-gray-100 shadow-md rounded-3xl mx-auto p-3 w-[80px] h-[80px] animate-pulse mt-4">
                                                    <svg class="w-14 h-14 text-gray-200" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                                        <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                                                    </svg>
                                                </div>
                                                <div role="status" class="max-w-sm animate-pulse mt-3">
                                                    <div class="h-2 bg-gray-200 rounded-full w-[100px] mb-2.5"></div>
                                                    <span class="sr-only">Loading...</span>
                                                </div>
                                            </div>
                                            <div class="justify-center">
                                                <div class="flex bg-gray-100 shadow-md rounded-3xl mx-auto p-3 w-[80px] h-[80px] animate-pulse mt-4">
                                                    <svg class="w-14 h-14 text-gray-200" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                                        <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                                                    </svg>
                                                </div>
                                                <div role="status" class="max-w-sm animate-pulse mt-3">
                                                    <div class="h-2 bg-gray-200 rounded-full w-[100px] mb-2.5"></div>
                                                    <span class="sr-only">Loading...</span>
                                                </div>
                                            </div>
                                            <div class="justify-center">
                                                <div class="flex bg-gray-100 shadow-md rounded-3xl mx-auto p-3 w-[80px] h-[80px] animate-pulse mt-4">
                                                    <svg class="w-14 h-14 text-gray-200" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                                        <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                                                    </svg>
                                                </div>
                                                <div role="status" class="max-w-sm animate-pulse mt-3">
                                                    <div class="h-2 bg-gray-200 rounded-full w-[100px] mb-2.5"></div>
                                                    <span class="sr-only">Loading...</span>
                                                </div>
                                            </div>
                                        }
                                        
                                    }
                                    </div>
                                @{
                                    if (selectedAppliance != "" && appliancesLoaded)
                                    { 
                                        List<ApplianceModel>? tempAppliances = allAppliances[selectedAppliance];
                                        if (tempAppliances is not null)
                                        {
                                            double dU = Math.Round(tempAppliances[0].durationUsed, 3);
                                            <div class="relative overflow-x-auto shadow-md sm:rounded-lg bg-primary-100 p-2">
                                                <table class="w-full text-sm text-left text-gray-500 ">
                                                    <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                                                        <tr>
                                                            <th scope="col" class="px-6 py-3">
                                                                Model
                                                            </th>
                                                            <th scope="col" class="px-6 py-3">
                                                                Quantity
                                                            </th>
                                                            <th scope="col" class="px-6 py-3">
                                                                Duration Used
                                                            </th>
                                                            <th scope="col" class="px-6 py-3">
                                                                Power Usage
                                                            </th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var appliance in tempAppliances)
                                                        {
                                                            <tr class="bg-white border-b">
                                                                <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap">
                                                                    @appliance.name
                                                                </th>
                                                                <td class="px-6 py-4">
                                                                    @appliance.quantity
                                                                </td>
                                                                <td class="px-6 py-4">
                                                                    @dU h
                                                                </td>
                                                                <td class="px-6 py-4">
                                                                    @appliance.powerUsage kW/h
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        }
                                    } 
                                    else {
                                        <div role="status" class="animate-pulse justify-center w-full mx-auto mt-12">
                                            <div class="h-28 bg-gray-200 rounded-lg mt-4"></div>
                                            <span class="sr-only">Loading...</span>
                                        </div>
                                    }
                                    
                                }
                                </div>
                                <div class="flex flex-col md:flex-row w-full mt-0 md:mt-5">
                                    <div class="w-full flex flex-col gap-4 justify-start items-center">
                                        <h3 class="font-medium text-lg text-primary-900 text-left">Running Hours on Batteries</h3>
                                        <div class="flex relative flex-col justify-center w-full">
                                            @if (runningHoursPercentage != 0)
                                            {
                                                dlh = 0;
                                                if (currentLocationData != null)
                                                {
                                                    daylight = 12;
                                                    dlh = (float)Math.Round((24 - daylight) * (runningHoursPercentage / 100), 2);
                                                }
                                            } else {
                                                dlh = 0;
                                                daylight = 0;
                                            }
                                            @if (appliancesLoaded)
                                            {
                                                <DaylightChart hours="@dlh" daylightHours="@daylight" />
                                                <div class="flex w-full justify-center absolute top-1/2 left-0 items-center gap-1 mt-20">
                                                @{
                                                    if (dlh == (24 - daylight))
                                                    {
                                                        <p class="text-5xl text-primary-900 font-semibold">@dlh+</p>
                                                    }
                                                    else
                                                    {
                                                        <p class="text-5xl text-primary-900 font-semibold">@dlh</p>
                                                    }
                                                }
                                                <p class="text-5xl text-gray-400 font-bold">h</p>
                                            </div>
                                            } else {
                                                <DaylightChart hours="0" daylightHours="0" />
                                                <div class="flex w-full justify-center absolute top-1/2 left-0 items-center gap-1 mt-20">
                                                    <p class="text-5xl text-primary-900 font-semibold">0</p>
                                                    <p class="text-5xl text-gray-400 font-bold">h</p>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="hidden md:block w-full">
                                    @{
                                        if (reports.Count > selectedReport)
                                        {
                                            var sysId = reports[selectedReport].systemId;
                                            var sysSize = "Small";
                                            foreach (var sys in systems)
                                            {
                                                if (sys.systemId == sysId)
                                                {
                                                    sysSize = sys.systemSize;
                                                }
                                            }
                                            if (sysSize != null)
                                            {
                                                if (sysSize.Equals("Small"))
                                                {
                                                    imageName = reports[selectedReport].homeSize + "-Home1.svg";
                                                }
                                                else if (sysSize.Equals("Medium"))
                                                {
                                                    imageName = reports[selectedReport].homeSize + "-Home2.svg";
                                                }
                                                else
                                                {
                                                    imageName = reports[selectedReport].homeSize + "-Home3.svg";
                                                }
                                            }
                                        }
                                    }
                                    @if (!imageName.Equals(""))
                                    {
                                        <Image ImageName=@imageName alt="House" css="scale-90" />
                                    } else {
                                            <div class="z-10 flex items-center justify-center w-[388px] h-[330px] bg-gray-300 rounded mx-auto">
                                                <svg class="animate-pulse w-10 h-10 text-gray-200 dark:text-gray-600" aria-hidden="true"
                                                    xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                                    <path
                                                        d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z" />
                                                </svg>
                                            </div>
                                    }
                                    </div>
                                    @if (appliancesLoaded)
                                    {
                                       <div class="w-full mt-32 md:mt-0 flex flex-col gap-4 justify-start items-center">
                                            <h3 class="font-medium text-md text-primary-900 text-left">Appliance Energy Consumption</h3>
                                            <div class="flex relative flex-col justify-center w-full">
                                                <ApplianceEnergyConsumption reportAllAppliance="@reportAllAppliance"/>
                                            </div>
                                        </div> 
                                    } else {
                                        <div class="w-full mt-32 md:mt-0 flex flex-col gap-4 justify-start items-center">
                                            <h3 class="font-medium text-md text-primary-900 text-left">Appliance Energy Consumption</h3>
                                            <div class="flex relative flex-col justify-center w-full">
                                                <ApplianceEnergyConsumption/>
                                            </div>
                                        </div> 
                                    }
                                    </div>
                                </Card>
                            </div>
                            <div class="mt-10 w-full">
                        @{
                            int numSolarPanels = 0;
                            if (systems != null)
                            {
                                if (systems.Count > 0)
                                {
                                    for (int i = 0; i < systems.Count; i++)
                                    {
                                        if (systems[i].systemId == reports[selectedReport].systemId)
                                        {
                                            numSolarPanels = systems[i].numberOfPanels;
                                        }
                                    }
                                }
                            }
                            @if (appliancesLoaded)
                            {    
                                <Card css="w-full mb-5">
                                    <FancyData currentLocationData="currentLocationData"  numSolarPanels="@numSolarPanels" cancellationTokenSource="@cancellationTokenSource"/>
                                </Card>
                            }
                        }
                            </div>
                }
                </div>
        }
        else
        {
                <div class="flex flex-col justify-center items-center px-10 mt-10">
                    <div class="flex flex-col justify-center items-center">
                        <h1 class="text-4xl font-medium text-primary-900">No Reports</h1> <br />
                        <p class="text-center">You have no reports. Create a report to get started.</p>
                    </div>
                    <div class="mt-10 flex flex-col sm:flex-row items-center justify-center gap-6">
                        <div @onclick='() => CreateReport()'>
                            <Button style="pill" css="h-14">
                                <content>
                                    <p class="text-sm font-semibold hover:text-white">Create a Report </p>
                                </content>
                            </Button>
                        </div>
                    </div>
                </div>
        }
        </div>
            <ModalPopup @ref="modalPopup" Title="Delete Record?">
                <ChildContent>
                    <p>Are you sure that you want to delete this record?</p>
                    <div class="flex flex-row gap-4 justify-center">
                        <div @onclick="Delete">
                            <Button style="danger">
                                <content>
                                    delete
                                </content>
                            </Button>
                        </div>
                        <div @onclick="modalPopup.Dismiss">
                            <Button style="outline-danger">
                                <content>Cancel</content>
                            </Button>
                        </div>
                    </div>
                </ChildContent>
            </ModalPopup>


@code {
    private DataHandlers.SolarDataHandler solarCalculator = new DataHandlers.SolarDataHandler();
    private DataHandlers.SystemsDataHandler systemsDataHandler = new DataHandlers.SystemsDataHandler();
    private DataHandlers.CalculationDataHandler calculationDataHandler = new DataHandlers.CalculationDataHandler();
    private SharedUtils.reportAllApplianceClass reportAllApplianceClass = new SharedUtils.reportAllApplianceClass();
    private SharedUtils.systemClass systemClass = new SharedUtils.systemClass();
    private SharedUtils.reportClass reportClass = new SharedUtils.reportClass();
    private SharedUtils.locationDataClass locationDataClass = new SharedUtils.locationDataClass();
    private List<ReportModel> reports = new List<ReportModel>();
    private List<ReportAllApplianceModel> reportAllAppliance = new List<ReportAllApplianceModel>();
    private List<SystemModel> systems = new List<SystemModel>();
    private List<SystemModel> allSystems = new List<SystemModel>();
    private bool isLoaded = false;
    private bool logIn = false;
    private bool isAd = false;
    private int userId = -1;
    [Parameter]
    public int selectedReport { get; set; }
    public int selectedSystem { get; set; }
    public bool isGenerateReport = false;
    private DateTime selectedDate;
    private ModalPopup modalPopup { get; set; } = new ModalPopup();
    public LocationDataModel? currentLocationData = new LocationDataModel();
    public int solarScore = 0;
    private float dlh;
    private float daylight;
    float runningHoursPercentage = 0;
    private string selectedAppliance = "";
    private int selectedApplianceQuantity = 0;
    private string imageName = "";
    private bool receivedReports = false;
    private bool appliancesLoaded = false;
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
    Dictionary<String, List<ApplianceModel>> allAppliances = new Dictionary<String, List<ApplianceModel>>();


    /// <summary>
    /// Load the user's reports and all appliances
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Dashboard Initialized");
        cancellationTokenSource = new CancellationTokenSource();
        selectedReport = 0;

        var loggedIn = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
        var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");
        var usId = await ProtectedLocalStore.GetAsync<int>("userId");
        logIn = loggedIn.Value;
        isAd = isAdmin.Value;
        userId = usId.Value;

        if (!logIn)
        {
            await ProtectedLocalStore.SetAsync("redirect", "dashboard");
            NavigationManager.NavigateTo("/login");
        }
        else if (isAd)
        {
            NavigationManager.NavigateTo("/admin/keys");
        }

        var result = await reportClass.GetUserReports(userId);
        if (result != null) {
            reports = result;
            if(reports.Count > 0) {
                await ProtectedSessionStore.SetAsync("userReports", reports);
            }
        } else {
            toastService.ShowToast("Error getting your reports", "Please try again later", "error");
        }
        receivedReports = true;

        var cReport = await ProtectedSessionStore.GetAsync<int>("createdReport");
        int createdReport = cReport.Value;

        if (reports.Count > 0)
        {
            if (createdReport != 0)
            {
                for (int i = 0; i < reports.Count; i++)
                {
                    if (reports[i].reportId == createdReport)
                    {
                        selectedReport = i;
                    }
                }
            }
            await ProtectedSessionStore.DeleteAsync("createdReport");
            allSystems = await systemClass.GetAllSystems();
            await SetSelectedSystem();
            currentLocationData = await locationDataClass.GetInitialLocationData(reports[selectedReport].latitude, reports[selectedReport].longitude, null, cancellationTokenSource.Token);
            if (currentLocationData != null)
            {
                await ProtectedSessionStore.SetAsync("latitude", currentLocationData.latitude);
                await ProtectedSessionStore.SetAsync("longitude", currentLocationData.longitude);
                solarScore = solarCalculator.getSolarScore(currentLocationData.solarPanelsData);
            }

            await ProtectedSessionStore.SetAsync("currentReport", reports[selectedReport]);
            await updateAppliances();
        }
        reportManager.EditReportRequested += Edit;
        reportManager.DeleteReportRequested += ShowModal;
        isLoaded = true;

        _ = GetSatteliteImage();
    }

    private async Task GetSatteliteImage() {
        if(currentLocationData != null && currentLocationData.satteliteImageData == null) {
            currentLocationData = await locationDataClass.GetSatelliteImageData(currentLocationData.latitude, currentLocationData.longitude, currentLocationData, cancellationTokenSource.Token);
            StateHasChanged();
        }
    }

    public void SelectAppliance(string appliance)
    {
        if (appliance == selectedAppliance)
        {
            selectedAppliance = "";
            StateHasChanged();
        }
        else
        {
            selectedAppliance = appliance;
            StateHasChanged();
        }
    }

    public async Task SetSelectedSystem()
    {
        systems.Clear();
        for (int i = 0; i < allSystems.Count; i++)
        {
            if (i < 3 || allSystems[i].systemId == reports[selectedReport].systemId)
            {
                systems.Add(allSystems[i]);
            }
        }
        if (systems.Count > 0)
        {
            for (int i = 0; i < systems.Count; i++)
            {
                if (systems[i].systemId == reports[selectedReport].systemId)
                {
                    await ProtectedSessionStore.SetAsync("selectedSystem", i);
                    selectedSystem = i;
                }
            }
            await ProtectedSessionStore.SetAsync("systems", systems);
        }
        Console.WriteLine("Selected Report: " + reports[selectedReport].systemId + " - Selected System: " + systems[selectedSystem].systemId);

    }

    public async Task SwitchReport()
    {
        Console.WriteLine("-----------------------------------------------------------");
        Console.WriteLine("Switching Report");
        cancellationTokenSource.Cancel();
        cancellationTokenSource = new CancellationTokenSource();
        appliancesLoaded = false;
        imageName = "";
        selectedAppliance = "";
        await ProtectedSessionStore.SetAsync("currentReport", reports[selectedReport]);
        await SetSelectedSystem();
        int numTries = 0;

        currentLocationData = null;
        while(currentLocationData == null && numTries < 10) {
            currentLocationData = await locationDataClass.GetInitialLocationData(reports[selectedReport].latitude, reports[selectedReport].longitude, null, cancellationTokenSource.Token);
            numTries++;
            await Task.Delay(1000);
        }

        if (currentLocationData != null)
        {
            await ProtectedSessionStore.SetAsync("latitude", currentLocationData.latitude);
            await ProtectedSessionStore.SetAsync("longitude", currentLocationData.longitude);
            solarScore = solarCalculator.getSolarScore(currentLocationData.solarPanelsData);
        }
        await updateAppliances();
        _ = GetSatteliteImage();
    }

    private void Dispose()
    {
        reportManager.EditReportRequested -= Edit;
        reportManager.DeleteReportRequested -= ShowModal;
    }

    private async Task updateAppliances()
    {
        reportAllAppliance.Clear();
        reportAllAppliance = await reportAllApplianceClass.GetReportAllApplianceByReportId(reports[selectedReport].reportId);
        await ProtectedSessionStore.SetAsync("userReportAllAppliance", reportAllAppliance);
        allAppliances = await calculationDataHandler.GetAppliancesByTypeByReport(reports[selectedReport].reportId);
        if (allAppliances.Count > 0)
        {
            selectedAppliance = allAppliances.Keys.First();
            List<ApplianceModel> temp = allAppliances[selectedAppliance];
            selectedApplianceQuantity = 0;
            for (int i = 0; i < temp.Count; i++)
            {
                selectedApplianceQuantity += temp[i].quantity;
            }
        }
        SystemModel? system = await systemClass.GetSystem(reports[selectedReport].systemId);
        if (system != null && reportAllAppliance != null)
        {
            runningHoursPercentage = systemsDataHandler.CalculateRunningHours(system.numberOfBatteries, system.batterySize * 1000, reportAllAppliance);
        }
        else
        {
            runningHoursPercentage = 100;
            toastService.ShowToast("Error getting all the data for this report", "Please try again later", "error");
        }
        appliancesLoaded = true;
        StateHasChanged();
    }

    private Task CreateReport()
    {
        NavigationManager.NavigateTo("/advanced");
        return Task.CompletedTask;
    }
    private void ShowModal()
    {
        modalPopup.Show();
        StateHasChanged();
        Console.WriteLine("Modal shown");
    }

    /// <summary>
    /// Edit the current report
    /// </summary>
    private async void Edit()
    {
        await ProtectedSessionStore.SetAsync("edit", true);
        NavigationManager.NavigateTo("/advanced");
        StateHasChanged();
    }

    /// <summary>
    /// Delete the current report
    /// </summary>
    private async Task Delete()
    {
        modalPopup.Dismiss();
        if (await reportClass.DeleteReport(reports[selectedReport].reportId))
        {
            toastService.ShowToast("Deleted Calculation", "Report successfuly deleted.", "success");
            Console.WriteLine("Report succesfully deleted");
            reports.RemoveAt(selectedReport);
            selectedReport = 0;
            await SwitchReport();
            StateHasChanged();
        }
    }
}
