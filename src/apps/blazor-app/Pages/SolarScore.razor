@page "/solarscore"
@* @layout MainLayout *@
@inject ProtectedLocalStorage ProtectedLocalStore;
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject NavigationManager NavigationManager;
@inject BlazorApp.Data.LoadingService loadingService
@using System.Text.Json;
@using BlazorApp.Components.Home;
@using BlazorApp.Components.SolarScore;

<PageTitle>Solar Score</PageTitle>

@* Check for admin *@
@if (isAd)
{
    NavigationManager.NavigateTo("/admin/keys");
}
else
{
    <div class="fade-in-enter-active">
        <div class="w-full relative">
            <Image ImageName="01.png" css="absolute hidden md:block -top-2 -left-2" />
            @if (!locationIsReceivedAndNull)
            {
                <div class="mb-20 -mt-10">
                    <Results locationData="@locationData"/>
                </div>
                <div class="-mb-80">
                    <Image ImageName="shapes.svg" css="absolute -top-10 -translate-y-28 md:-translate-y-0  -z-10 -left-1/2  -translate-y-28  md:-translate-y-0 scale-[2] md:scale-100 w-2/3 h-2/3" alt="Shapes"/>
                    <Image ImageName="Robert_Sitting_On_Panel.png" css="-z-10 ml-20 mt-32 mb-60 xl:mt-60 robert-slide-up h-40 xl:h-72" alt="Rob"/>
                </div>
            }
            else
            {
                <EnterLocation />
            }
            <div class="relative -mb-20">
                <ScoreInfo />
                <Image ImageName="shapes.svg" css="absolute rotate-45 -bottom-3/4  mt-10 -right-[55%] scale-150 z-10  w-3/4 h-3/4" alt="Shapes"/>
            </div>
            <div class="relative mt-32 mb-10 ">
                <Image ImageName="shapes.svg" css="absolute rotate-45 bottom-20 lg:-top-80 -left-1/2 lg:-left-1/3 scale-150 -z-30  w-3/4 h-3/4" alt="Shapes"/>
                <Image ImageName="Robert_Standing2.png" css="-z-10 hidden lg:block ml-40 mt-80 -mb-96 robert-slide-up h-40 md:h-52 xl:h-72" alt="Rob"/>
                <NextSteps />
            </div>
        </div>
    </div>
}


@code {
    private SharedUtils.locationDataClass locationDataClass = new SharedUtils.locationDataClass();
    private bool isAd = false;
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private LocationDataModel? locationData = null;
    private bool locationIsReceivedAndNull = false;

    /// <summary>
    /// On page load, check if user is admin.
    /// Get current location data from session storage.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        loadingService.HideLoadingScreen();
        var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");
        var tempLatitude = await ProtectedSessionStore.GetAsync<double>("latitude");
        var tempLongitude = await ProtectedSessionStore.GetAsync<double>("longitude");
        double latitude = tempLatitude.Value;
        double longitude = tempLongitude.Value;

        if(latitude != 0 && longitude != 0)
        {
            locationData = await locationDataClass.GetLocationData(latitude, longitude);
            if(locationData == null)
            {
                locationIsReceivedAndNull = true;
            }
            await ProtectedSessionStore.SetAsync("parent", "solarScore");
            isAd = isAdmin.Value;
        } else {
            locationIsReceivedAndNull = true;
        }

    }

    
}