@page "/solarscore"
@* @layout MainLayout *@
@inject ProtectedLocalStorage ProtectedLocalStore;
@inject ProtectedSessionStorage ProtectedSessionStore;
@inject NavigationManager NavigationManager;
@inject BlazorApp.Data.LoadingService loadingService
@using System.Text.Json;
@using BlazorApp.Components.Home;
@using BlazorApp.Components.SolarScore;

<PageTitle>Solar Score</PageTitle>

@* Check for admin *@
@if (isAd)
{
    loadingService.ShowLoadingScreen();
    NavigationManager.NavigateTo("/admin/keys");
}
else
{
    <div class="fade-in-enter-active">
        <div class="w-full">
            @if (locationData != null)
            {
                <div class="mb-20">
                    <Results locationData="@locationData"/>
                </div>
            }
            else
            {
                <EnterLocation />
            }
            <div class="mt-40 mb-20">
                <ScoreInfo />
            </div>
            <div class="mt-32 mb-10">
                <NextSteps />
            </div>
        </div>
    </div>
}


@code {
    private SharedUtils.locationDataClass locationDataClass = new SharedUtils.locationDataClass();
    private bool isAd = false;
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private LocationDataModel? locationData = null;

    /// <summary>
    /// On page load, check if user is admin.
    /// Get current location data from session storage.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        loadingService.ShowLoadingScreen();
        var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");

        var tempLatitude = await ProtectedSessionStore.GetAsync<double>("latitude");
        var tempLongitude = await ProtectedSessionStore.GetAsync<double>("longitude");
        double latitude = tempLatitude.Value;
        double longitude = tempLongitude.Value;

        if(latitude != 0 && longitude != 0)
        {
            locationData = await locationDataClass.GetLocationData(latitude, longitude);
            Console.WriteLine("Gottem");
            await ProtectedSessionStore.SetAsync("parent", "solarScore");
            isAd = isAdmin.Value;
        }

        loadingService.HideLoadingScreen();
    }
}