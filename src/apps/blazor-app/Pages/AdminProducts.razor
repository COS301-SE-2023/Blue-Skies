@page "/admin/products"
@layout AdminLayout
@using BlazorApp.Components.Base
@using BlazorApp.Components.Admin
@using BlazorApp.Components
@using BlazorApp.Models
@using System.Text.Json;
@inject ProtectedLocalStorage ProtectedLocalStore;
@inject NavigationManager NavigationManager;
@inject BlazorApp.Data.ToastService toastService;

<PageTitle>Blue Skies - Solar Products</PageTitle>

<div class="slide-in-enter-active mt-2">
    <div class="flex w-full justify-around p-4">
        <div class="">
            <Heading>
                <Superscript>
                    <h2>Manage all</h2>
                </Superscript>
                <Header>
                    <h1>Solar Products</h1>
                </Header>
            </Heading>
        </div>
        <div class="flex  gap-10 items-center">
            <div @onclick="ModalPopup.Show">
                <Button style="outline">
                    <content>Delete</content>
                </Button>
            </div>
            <div @onclick="AddProduct">
                <Button style="pill">
                    <content>Add</content>
                </Button>
            </div>
        </div>
    </div>

    <Toast @ref="successToast" Title="Successful" Type="success">
        <ChildContent>
            <p></p>
        </ChildContent>
    </Toast>

    <Toast @ref="deleteToast" Title="Deleted" Type="error">
        <ChildContent>
            <p></p>
        </ChildContent>
    </Toast>

    <ModalPopup @ref="ModalPopup" Title="Delete Solar Product?">
        <ChildContent>
            <p>Are you sure that you want to delete this Solar Product?</p>
            <div class="flex flex-row gap-4 justify-center">
                <div @onclick="DeleteProducts">
                    <Button style="danger">
                        <content>
                            delete
                        </content>
                    </Button>
                </div>
                <div @onclick="ModalPopup.Dismiss">
                    <Button style="outline-danger">
                        <content>Cancel</content>
                    </Button>
                </div>
            </div>
        </ChildContent>
    </ModalPopup>

    <div class="relative overflow-x-auto  mt-2">
        <table class="w-full  text-sm text-center ">
            <thead class="text-xs bg-primary-50  uppercase ">
                <tr>
                    <th scope="col" class="px-6 py-3 text-center">
                        <input type="checkbox" class="form-checkbox h-5 w-5  " />
                    </th>
                    <th scope="col" class="px-6 py-3  ">
                        System Size
                    </th>
                    <th scope="col" class="px-6 py-3">
                        Number of Panels
                    </th>
                    <th scope="col" class="px-6 py-3">
                        Inverter Output
                    </th>
                    <th scope="col" class="px-6 py-3">
                        Solar Input
                    </th>
                    <th scope="col" class="px-6 py-3"></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <ProductEntry recordState="product.recordState != null ? true : false" product="product"
                        OnSelect="AddDeleteArr" OnSave="SaveProduct" />
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private Toast successToast { get; set; } = new Toast();
    private Toast deleteToast { get; set; } = new Toast();
    private ModalPopup ModalPopup { get; set; } = new ModalPopup();

    private List<ProductModel> products = new List<ProductModel>();
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private List<int> deleteArr = new List<int>();

    private async Task DeleteProducts()
    {
        foreach (int id in deleteArr)
        {
            await DeleteProduct(id);
        }
        deleteArr.Clear();
        await GetProducts();
    }
    private void AddDeleteArr(int id)
    {
        if (deleteArr.Contains(id))
        {
            deleteArr.Remove(id);
        }
        else
        {
            deleteArr.Add(id);
        }
        //Print deleteArr
        foreach (int i in deleteArr)
        {
            Console.WriteLine(i);
        }
    }

    //Delete Product
    private async Task DeleteProduct(int id)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Delete, API_PORT + "/system/delete");
        var content = new StringContent("{\r\n \"systemId\": " + id + "\r\n}", null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            await GetProducts();
            Console.WriteLine("Deleted Solar Product");
            @* deleteToast.Show("Deleted", "Successfully deleted product", "success"); *@
            toastService.ShowToast("Product Deleted", "Successfully deleted product", "success");
        }
        else
        {
            Console.WriteLine("Failed to delete");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await GetProducts();

    }

    private async Task GetProducts()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/System/all");
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            products = JsonSerializer.Deserialize<List<ProductModel>>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive
                = true
                })!;
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }

    private void AddProduct()
    {
        products.Add(new ProductModel
            {
                systemId = -1,
                systemSize = "",
                inverterOutput = 0,
                numberOfPanels = 0,
                batterySize = 0,
                numberOfBatteries = 0,
                solarInput = 0,
                recordState = true
            });
    }

    private async Task SaveProduct(ProductModel product)
    {
        if (product.systemId == -1)
        {
            Console.WriteLine("Add Solar Product");
            var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Post, API_PORT + "/System/create");
            var content = new StringContent("{\r\n \"systemSize\": \"" + product.systemSize + "\",\r\n \"inverterOutput\": " +
            product.inverterOutput + ",\r\n \"numberOfPanels\": " + product.numberOfPanels + ",\r\n \"batterySize\": " +
            product.batterySize + ",\r\n \"numberOfBatteries\": " + product.numberOfBatteries + ",\r\n \"solarInput\": " +
            product.solarInput + "\r\n}", null, "application/json");
            request.Content = content;
            var response = await client.SendAsync(request);
            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                await GetProducts();
                Console.WriteLine("Updated Solar Product");
                @* successToast.Show("Added", "Successfully added product", "success"); *@
                toastService.ShowToast("Product Added", "Successfully added product", "success");
            }
            else
            {
                Console.WriteLine("Failed to add");
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }

        }
        else
        {
            Console.WriteLine("Update Solar Product");
            var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Patch, API_PORT + "/System/update");
            var content = new StringContent("{\r\n \"systemId\": " + product.systemId + ",\r\n \"inverterOutput\": " +
            product.inverterOutput + ",\r\n \"numberOfPanels\": " + product.numberOfPanels + ",\r\n \"batterySize\": " +
            product.batterySize + ",\r\n \"numberOfBatteries\": " + product.numberOfBatteries + ",\r\n \"solarInput\": " +
            product.solarInput + "\r\n}", null, "application/json");
            request.Content = content;
            var response = await client.SendAsync(request);
            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                await GetProducts();
                Console.WriteLine("Updated Solar Product");
                @* successToast.Show("Updated", "Successfully updated product", "success"); *@
                toastService.ShowToast("Product Updated", "Successfully updated product", "success");
            }
            else
            {
                Console.WriteLine(await response.Content.ReadAsStringAsync());
                Console.WriteLine("Failed to Update");
            }

        }
    }
}