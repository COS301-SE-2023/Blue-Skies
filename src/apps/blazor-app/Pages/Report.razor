@page "/report/{UserId}/{ReportId}"
@using System.Text.Json
@using BlazorApp.FancyData
@using BlazorApp.Components.Dashboard
@layout AuthLayout
<div class="pageA4 mx-auto">
    @if (isLoaded)
    {
        <div id="report">
            <div class="mx-auto w-fit">
                <Image ImageName="Logo.svg" css="h-14 w-auto" alt="BlueSkies logo" />
            </div>
            <div class="w-full">
                <div class="">
                    <Heading>
                        <Header>
                            <h1 class="text-xl">Location</h1>
                        </Header>
                    </Heading>
                    <div class="flex-col">
                        <div class="h-[8cm] w-[8cm] mx-auto">
                            <Map imageName="@locationData.image" />
                        </div>
                        <div class="flex flex-col w-fit mx-auto space-y-2">
                            <LocationItem Title="Address" ImageName="Point On Map.svg" Text=@locationData.location />
                            <LocationItem Title="Solar Score" ImageName="Sale.svg" Text="123" />
                            <div class="translate-x-1">
                                <LocationItem Title="Avg Energy Production" ImageName="Accumulator.svg" Text="456" />
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <Heading>
                        <Header>
                            <h1 class="text-xl text-start">System Size</h1>
                        </Header>
                    </Heading>
                    <div class="w-fit mx-auto flex space-x-3">
                        <Appliance css="scale-75" ImageName="SolarPanels.svg" Name="Number of Panels"
                            Count="@system.numberOfPanels" />
                        <Appliance css="scale-75" ImageName="Batteries.svg" Name="Number of Batteries"
                            Count="@system.numberOfBatteries" />
                    </div>
                    <div class="flex w-full justify-center items-center gap-1 mt-4">
                        <p class="text-5xl text-primary-900 font-semibold">@system.inverterOutput</p>
                        <p class="text-5xl text-gray-400 font-bold">kw</p>
                    </div>
                </div>
            </div>
            @* Fancy Data *@
            <div class="w-full">
                <Heading>
                    <Header>
                        <h1 class="text-xl">Fancy Data</h1>
                    </Header>
                    <Subscript>
                        <p>More information about your area</p>
                    </Subscript>
                </Heading>
                <div class="flex w-full">
                    <div class="w-full">
                        <SolarIrradiationPerMonth solarIrradiation="@locationData.data" animated="false" />
                    </div>
                </div>
                <div class="w-full">
                    <ElevationGraph elevationValues="@locationData.elevationData" animated="false" />
                </div>
            </div>
        </div>
    }
</div>
@code {
    [Parameter] public string? UserId { get; set; }
    [Parameter]
    public string? ReportId { get; set; }

    private ReportModel? report = new ReportModel();
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private double latitude = 0;
    private double longitude = 0;
    private LocationDataModel locationData = new LocationDataModel();
    private SystemModel system = new SystemModel();
    private bool isLoaded = false;
    @* OnInitialized *@

    protected override async Task OnInitializedAsync()
    {

        await GetReport();
        if (report == null)
        {
            Console.WriteLine("Report not found");
            return;
        }
        Console.WriteLine("Current report: " + report.reportId);
        await GetLocationData();
        Console.WriteLine("Current location: " + locationData.location);
        await GetSystemAsync(report.systemId);
        StateHasChanged();
        isLoaded = true;
    }

    @* Get report *@
    private async Task GetReport()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/Report/get/" + ReportId);
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var responseStream = await response.Content.ReadAsStringAsync();
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

            if (responseStream is null)
            {
                Console.WriteLine("Report not found");
                return;
            }

            report = JsonSerializer.Deserialize<ReportModel>(responseStream, options);

            if (report == null)
            {
                Console.WriteLine("Report not found");
                return;
            }
            latitude = report.latitude;
            longitude = report.longitude;
        }
        else
        {
            Console.WriteLine("Report not found");
        }

    }

    @* Get location Data *@
    private async Task GetLocationData()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/locationData/GetLocationData/" + latitude + "/" +
        longitude);
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            string data = response.Content.ReadAsStringAsync().Result;
            locationData = JsonSerializer.Deserialize<LocationDataModel>(data)!;
            @* Current location *@

        }
        else
        {
            Console.WriteLine("Location data not found in Results");
        }
    }

    private async Task GetSystemAsync(int systemId)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/System/get/" + systemId);
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            system = JsonSerializer.Deserialize<SystemModel>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive =
                true
                })!;
        }
        else
        {
            Console.WriteLine("Failed to get systems");
        }
    }

}
