@page "/register"
@layout AuthLayout
@using BlazorApp.Components.Base
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject BlazorApp.Data.LoadingService loadingService

<PageTitle>Register</PageTitle>

@if (!isLoaded) {}
else if (logIn)
{
    loadingService.ShowLoadingScreen();
    NavigationManager.NavigateTo("/");
}  else  if (isAd)
{
    loadingService.ShowLoadingScreen();
    NavigationManager.NavigateTo("/admin/keys");
} else {
<div class="w-full h-screen overflow-hidden relative">
    <div class="flex fade-in-enter-active p-4 gap-10 md:gap-20 flex-col w-full justify-center z-10 mt-10  items-center">
        <Image ImageName="shapes.svg" css="absolute -top-1/2 -left-1/2 w-full h-full" alt="Shapes"/>
        <Image ImageName="shapes.svg" css="absolute -bottom-1/2 -right-1/2 w-full h-full" alt="Shapes"/>
        <div class="justfy-center sm:justify-end -pr-4 xl:pr-20 flex w-full">
                    <a href="/" @onclick="() => loadingService.ShowLoadingScreen()" class="relative z-20">
                        <Image ImageName="Logo.svg" css="h-16 md:h-20 xl:h-24" alt="Logo"/>
                    </a>
                </div>
        <Image ImageName="Sun.svg" css="absolute top-0 -left-10 lg:left-0 z-0 w-52 lg:w-fit" alt="Sun"/>
        <Image ImageName="Panels_Trees.svg" css="absolute bottom-0  right-0 transform -scale-x-100" alt="UI Elements"/>
        <Image ImageName="Robert_Sitting.png" css="absolute robert-slide-in-left bottom-14 md:bottom-0 -translate-x-full -left-32 sm:-left-44 md:-left-52 xl:-left-64 h-[300px] sm:h-[400px] md:h-[480px] xl:h-[580px] " alt="Rob"/>

        <div class="flex justify-center w-full">
            <div class="my-auto max-w-lg w-full text-left z-10">
                <Heading>
                    <Superscript>
                        <p>Create your account</p>
                    </Superscript>
                    <Header>
                        <h1>Register</h1>
                    </Header>
                </Heading>
                <div class="@showError">
                    <p class="text-red-600 ">@errorMessage</p>
                </div>
                <form @onsubmit="HandleSubmit">
                    <Input css="mt-8" label="Email" type="email" name="email" placeholder="Enter email address"
                        @bind-InputValue="email" />
                    <Input css="mt-8" label="Password" type="password" name="password" placeholder="Enter password"
                        @bind-InputValue="password" />
                    <Input css="mt-8" label="Re-Enter Password" type="password" name="repassword" placeholder="Password"
                        @bind-InputValue="repassword" />
                    <Button css="mt-10 flex max-w-xs mx-auto justify-center" style="pill">
                        <content>
                            <input type="submit" value="Register" />
                        </content>
                    </Button>
                    <p class="text-primary-900 text-center mt-8 text-sm">Already have an account? <a href="/login"
                            class="text-primary-500 ml-2">Login</a></p>
                </form>
            </div>
        </div>

    </div>
</div>
}

@code {
    private SharedUtils.userClass userClass = new SharedUtils.userClass();
    private string? email;

    private string? password;

    private string? repassword;
    public string? showError = "hidden";
    public string? errorMessage = "Could not register";

    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");

    private bool isAd = false;
    private bool logIn = false;
    private bool isLoaded = false;
    private string? redirect = "";

    protected override async Task OnInitializedAsync()
    {
        var loggedIn = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
        var isAdmin = await ProtectedLocalStore.GetAsync<bool>("isAdmin");
        var re = await ProtectedSessionStore.GetAsync<string>("redirect");
        redirect = re.Value;
        isAd = isAdmin.Value;
        logIn = loggedIn.Value;
        isLoaded = true;
    }

private async Task HandleValidSubmit()
{
    if(await userClass.Register(email!, password!, repassword!)) {
        showError = "hidden";
        Console.WriteLine("OK");
        await ProtectedLocalStore.SetAsync("loggedIn", true);
        if (email != null)
        {
            await ProtectedLocalStore.SetAsync("userEmail", email);
        } else
        {
            await ProtectedLocalStore.SetAsync("userEmail", "");
        }
        await ProtectedLocalStore.SetAsync("isAdmin", false);
        await ProtectedSessionStore.DeleteAsync("redirect");
        loadingService.ShowLoadingScreen();
        NavigationManager.NavigateTo("/" + redirect);
    }
    else
    {
        showError = "";
        Console.WriteLine("Not OK");
    }
}

private void HandleInvalidSubmit()
{
    Console.WriteLine("OnInvalidSubmit");
    // Throw an invalid error or perform any other necessary action
}


private async Task HandleSubmit()
{
    Console.WriteLine("OnSubmit");
    Console.WriteLine(email);
    Console.WriteLine(password);
    Console.WriteLine(repassword);

    var isValid = ValidateForm();

    if (isValid)
    {
        await HandleValidSubmit();
    }
    else
    {
        HandleInvalidSubmit();
    }
}

private void HandleEmailChanged(string value)
{
    email = value;
}

private void HandlePasswordChanged(string value)
{
    password = value;
}

private void HandleRepasswordChanged(string value)
{
    repassword = value;
}


private bool ValidateForm()
{
    @* check email using regex *@
    if (string.IsNullOrEmpty(email))
    {
        Console.WriteLine("email is empty");
        return false;
    }
    else if (!Regex.IsMatch(email, @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$"))
    {
        Console.WriteLine("email is not valid");
        return false;
    }

    @* check if password is empty *@
    if (string.IsNullOrEmpty(password))
    {
        Console.WriteLine("password is empty");
        return false;
    }

    @* check if password is empty *@
    if (string.IsNullOrEmpty(repassword))
    {
        Console.WriteLine("repassword is empty");
        return false;
    }

    @* check if password and repassword are same *@
    if (password != repassword)
    {
        Console.WriteLine("password and repassword are not same");
        return false;
    }

    return true;
}

}