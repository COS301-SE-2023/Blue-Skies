@inherits LayoutComponentBase
@inject BlazorApp.Data.ToastService toastService
@inject BlazorApp.Data.TutorialService tutorialService
@inject BlazorApp.Data.ChatBotService chatbotService
@using BlazorApp.Components
@using BlazorApp.Components.Tutorial
@using BlazorApp.Chatbot

<PageTitle>Blue Skies</PageTitle>

<div class="page"> 
    <main>
        @* Loading screen *@
        @if(isLoading) {
            <BlazorApp.Section.LoadingScreen/>
        }


        <NavMenu @bind-isScrollingDown="isScrollingDown"/>

    @* Toast implementation *@
        @if(isToastVisible) {
            string move = isScrollingDown ? "-translate-y-20" : "translate-y-0";
            <div class="@move @toastAnimation flex-col w-full gap-4 transition-all p-2 duration-300 delay-300 h-20 flex z-50 fixed top-28 left-9">
                <Toast Type="@type" Title="@title">
                    <p>@message</p>
                </Toast>
            </div>
        }

        @* Tutorial implementation *@
        @if(isTutorialVisible) {
            <div class="flex @tutorialAnimation justify-center items-center w-full h-full fixed top-0 left-0 z-50">
                <TutorialModal>
                    @switch (activeTutorial)
                    {
                        case "Intro":
                            <IntroTutorial />
                            break;
                        case "Home":
                            <HomeTutorial />
                            break;
                        case "SolarScore":
                            <SolarScoreTutorial />
                            break;
                        case "Advanced":
                            <AdvancedTutorial />
                            break;
                        case "Dashboard":
                            <DashboardTutorial />
                            break;
                        default:
                            break;
                    }
                </TutorialModal>
            </div>
        }

        <div class="mt-24 w-full overflow-hidden relative">
            @Body
        </div>

        <div>
            <Footer />
        </div>

        @if (showChatBot) {
            <div class="fixed bottom-0 z-50 right-0 flex justify-end p-3 @chatbotAnimation">
                <Chatbot />
            </div>
        }
    </main>
</div>

@code {
    private bool isLoading = false;
    private bool isToastVisible = false;
    private bool showChatBot = false;
    private string activeTutorial = "Intro";
    private bool isTutorialVisible = false;
    private bool isScrollingDown = false;
    private string toastAnimation = "toast-slide-in";
    private string tutorialAnimation = "fade-active";
    private string title = "";
    private string message = "";
    private string type = "";
    private string chatbotAnimation = "chatbot-slide-in";



     protected override void OnInitialized()
    {
        // Subscribe to events
        toastService.ShowToastRequested += ShowToast;
        toastService.HideToastRequested += HideToast;
        tutorialService.ShowTutorialModalRequested += ShowTutorial;
        tutorialService.HideTutorialModalRequested += HideTutorial;
        tutorialService.ToggleTutorialRequested += ToggleTutorial;
        chatbotService.ShowChatBotRequested += ShowChatBot;
        chatbotService.HideChatBotRequested += HideChatBot;
    }

    private void ShowChatBot() {
        chatbotAnimation = "chatbot-slide-in";
        StateHasChanged();
        showChatBot = true;
        StateHasChanged();
    }

    private async void HideChatBot() {
        chatbotAnimation = "chatbot-slide-out";
        StateHasChanged();
        await Task.Delay(300);
        showChatBot = false;
        StateHasChanged();
        
    }

@* Loading Service functions *@
    public void ShowLoadingScreen()
    {

        isLoading = true;
        StateHasChanged();
    }

    public void HideLoadingScreen()
    {
        isLoading = false;
        StateHasChanged();
    }

@* Tutorial Service Functions *@
    public void ShowTutorial()
    {
        tutorialAnimation = "fade-active";
        isTutorialVisible = true;
        StateHasChanged();
    }

    public async void HideTutorial()
    {
        tutorialAnimation = "fade-out-active";
        StateHasChanged();
        await Task.Delay(300);
        isTutorialVisible = false;
        StateHasChanged();
    }

    public void ToggleTutorial(string tutorial)
    {
        activeTutorial = tutorial;
        StateHasChanged();
    }


@* Toast Service functions *@
    public void ShowToast(string title, string message, string type) {
        this.title = title;
        this.message = message;
        this.type = type;

        toastAnimation = "toast-slide-in";
        isToastVisible = true;
        StateHasChanged();
    }

    public async void HideToast() {
        toastAnimation = "toast-slide-out";
        StateHasChanged();
        await Task.Delay(300);
        isToastVisible = false;
        StateHasChanged();
    }

    /// <summary>
    /// Dispose of the services functions in MainLayout.razor
    /// </summary>
    public void Dispose()
    {
        toastService.ShowToastRequested -= ShowToast;
        toastService.HideToastRequested -= HideToast;
    }
}