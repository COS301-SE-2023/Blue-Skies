@inherits LayoutComponentBase
@inject BlazorApp.Data.LoadingService loadingService
@inject BlazorApp.Data.ToastService toastService
@using BlazorApp.Components

<PageTitle>Blue Skies</PageTitle>

<div class="page"> 
    <main>
        @* Loading screen *@
        @if(isLoading) {
            <BlazorApp.Section.LoadingScreen/>
        }


        <NavMenu @bind-isScrollingDown="isScrollingDown"/>

    @* Toast implementation *@
        @if(isToastVisible) {
            string move = isScrollingDown ? "-translate-y-20" : "translate-y-0";
            <div class="@move @animation flex-col w-full gap-4 transition-all p-2 duration-300 delay-300 h-20 flex z-50 fixed top-28 left-9">
                <Toast Type="@type" Title="@title">
                    <p>@message</p>
                </Toast>
            </div>
        }

        <div class="mt-24 w-full overflow-hidden relative">
            @Body
        </div>

        <div class="mt-20">
            <Footer />
        </div>
    </main>
</div>

@code {
    private bool isLoading = false;
    private bool isToastVisible = false;
    private bool isScrollingDown = false;
    private string animation = "toast-slide-in";
    private string title = "";
    private string message = "";
    private string type = "";



     protected override void OnInitialized()
    {
        // Subscribe to events
        loadingService.ShowLoadingScreenRequested += ShowLoadingScreen;
        loadingService.HideLoadingScreenRequested += HideLoadingScreen;
        toastService.ShowToastRequested += ShowToast;
        toastService.HideToastRequested += HideToast;
    }

@* Loading Service functions *@
    public void ShowLoadingScreen()
    {

        isLoading = true;
        StateHasChanged();
    }

    public void HideLoadingScreen()
    {
        isLoading = false;
        StateHasChanged();
    }

@* Toast Service functions *@
    public void ShowToast(string title, string message, string type) {
        this.title = title;
        this.message = message;
        this.type = type;

        animation = "toast-slide-in";
        isToastVisible = true;
        StateHasChanged();
    }

    public async void HideToast() {
        animation = "toast-slide-out";
        StateHasChanged();
        await Task.Delay(300);
        isToastVisible = false;
        StateHasChanged();
    }

    /// <summary>
    /// Dispose of the services functions in MainLayout.razor
    /// </summary>
    public void Dispose()
    {
        loadingService.ShowLoadingScreenRequested -= ShowLoadingScreen;
        loadingService.HideLoadingScreenRequested -= HideLoadingScreen;
        toastService.ShowToastRequested -= ShowToast;
        toastService.HideToastRequested -= HideToast;
    }
}