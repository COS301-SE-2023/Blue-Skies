@using BlazorApp.Components.Base
@using BlazorApp.Components
@using System
@inject IJSRuntime JSRuntime
@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager navigationManager

@{
  Uri uri = new Uri(navigationManager.Uri);
  string[] segments = uri.Segments;
  currentPage = segments[segments.Length - 1];

  if (isScrollingDown) 
    width = loggedIn ? "shadow w-14 h-14 hover:w-60" : "shadow w-14 h-14 hover:w-36"; 
  else if(currentPage == "dashboard") 
    width =  "w-14 h-14 opacity-0 -translate-y-20";
  else 
    width = loggedIn ? "w-60 h-14 -translate-y-20" : "w-36 h-14 -translate-y-20";
}
<div class="fixed top-0 left-0 shadow-sm bg-white transition-all duration-300 delay-[250ms] w-full z-20 @(isScrollingDown ? "h-0" : "h-24") "></div>
<header class="fixed h-20 left-0 bg-transparent w-full z-20 transition-all duration-300 delay-[250ms] @(isScrollingDown ? "-top-20" : "top-0")">
  <nav class="mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8" aria-label="Global">
    <div class="flex lg:flex-1">
      <a href="/" class="-m-1.5 p-1.5">
        <span class="sr-only">BLueSkies</span>
        <BlazorApp.Components.Base.Image ImageName="Logo.svg" css="h-14 w-auto" alt="BlueSkies logo"/>
      </a>
    </div>
    <div class="flex lg:hidden">
      <button type="button" class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700" @onclick="ToggleNavMenu">
        <span class="sr-only">Open main menu</span>
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
        </svg>
      </button>
    </div>
    <div class="hidden lg:flex lg:gap-x-12">
      <a href="/" class="text-sm font-semibold leading-6 text-gray-900">Home</a>
      <a href="/solarscore" class="text-sm font-semibold leading-6 text-gray-900">Solar Score</a>
      <a href="/advanced" class="text-sm font-semibold leading-6 text-gray-900">Advanced</a>
    </div>
    <div class="hidden lg:flex lg:flex-1 lg:justify-end">
      <div class="fixed top-5 right-3 flex flex-col-reverse justify-end items-end gap-4 z-30">
        <a onclick="@(() => logout())" href="/">
          <div class="@(loggedIn ? "flex" : "hidden") shadow group w-14 h-14 hover:w-40 transition-all duration-300 overflow-hidden bg-white rounded-full gap-2 border delay-[250ms] hover:delay-0 border-primary-500 p-2 items-center  @(isScrollingDown ? "opacity-100" : "-translate-y-40") @(currentPage == "dashboard" && !isScrollingDown ? "opacity-100 w-40" : "opacity-0" ) ">
            <Image ImageName="Logout.svg" alt="User Circle" css="w-10 h-10 scale-75" />
            <p class="">Log</p>
            <p>Out</p>
          </div>
        </a>
        <a href="@(loggedIn ? "/dashboard" : "/login")">
          <div class="z-40 group transition-all duration-300 overflow-hidden  bg-white rounded-full flex gap-2 border delay-[250ms] hover:delay-0 border-primary-500 p-2 items-center @width">
            <Image ImageName="User Circle.svg" alt="User Circle" css="w-10 h-10" />
            
            @if(loggedIn == true){
            <p>@userEmail</p>
            }else{
                <p class="transition-all duration-300 group-hover:delay-200 delay-100 group-hover:translate-x-0 @(isScrollingDown ? "translate-x-20" : "")">Log In</p>
            }
          </div>
        </a>
        <a href="/">
          <div class="shadow w-14 h-14 hover:w-44 group transition-all duration-300 overflow-hidden  bg-white rounded-full flex gap-2 border delay-[250ms] hover:delay-0 border-primary-500 p-2 items-center  @(isScrollingDown ? "opacity-100" : "opacity-0") ">
            <Image ImageName="Logo-small.svg" alt="User Circle" css="w-10 h-10" />
            <p class="transition-all duration-300 group-hover:delay-200 delay-100 group-hover:translate-x-0 translate-x-20">Blue Skies</p>
          </div>
        </a>
      </div>
      @if(currentPage == "dashboard"){
        

        <div class="fixed toast-slide-in top-5 left-3 flex flex-col-reverse justify-start items-start gap-4 z-30 transition-all duration-300 delay-300 @(isScrollingDown? "translate-y-0" : "translate-y-24")">
          
            <div @onclick="ShowModal" class="flex shadow group w-14 h-14 hover:w-36 transition-all duration-300 overflow-hidden bg-white rounded-full gap-2 border delay-[250ms] hover:delay-0 border-primary-500 p-2 items-center ">
              <div class="scale-75">
                <svg width="40" height="40" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path class="group-hover:fill-red-accent-500 transition-colors duration-300" d="M3 6.38597C3 5.90152 3.34538 5.50879 3.77143 5.50879L6.43567 5.50832C6.96502 5.49306 7.43202 5.11033 7.61214 4.54412C7.61688 4.52923 7.62232 4.51087 7.64185 4.44424L7.75665 4.05256C7.8269 3.81241 7.8881 3.60318 7.97375 3.41617C8.31209 2.67736 8.93808 2.16432 9.66147 2.03297C9.84457 1.99972 10.0385 1.99986 10.2611 2.00002H13.7391C13.9617 1.99986 14.1556 1.99972 14.3387 2.03297C15.0621 2.16432 15.6881 2.67736 16.0264 3.41617C16.1121 3.60318 16.1733 3.81241 16.2435 4.05256L16.3583 4.44424C16.3778 4.51087 16.3833 4.52923 16.388 4.54412C16.5682 5.11033 17.1278 5.49353 17.6571 5.50879H20.2286C20.6546 5.50879 21 5.90152 21 6.38597C21 6.87043 20.6546 7.26316 20.2286 7.26316H3.77143C3.34538 7.26316 3 6.87043 3 6.38597Z" fill="#1C274C"/>
                  <path class="group-hover:fill-red-accent-500 transition-colors duration-300" fill-rule="evenodd" clip-rule="evenodd" d="M9.42543 11.4815C9.83759 11.4381 10.2051 11.7547 10.2463 12.1885L10.7463 17.4517C10.7875 17.8855 10.4868 18.2724 10.0747 18.3158C9.66253 18.3592 9.29499 18.0426 9.25378 17.6088L8.75378 12.3456C8.71256 11.9118 9.01327 11.5249 9.42543 11.4815Z" fill="#1C274C"/>
                  <path class="group-hover:fill-red-accent-500 transition-colors duration-300" fill-rule="evenodd" clip-rule="evenodd" d="M14.5747 11.4815C14.9868 11.5249 15.2875 11.9118 15.2463 12.3456L14.7463 17.6088C14.7051 18.0426 14.3376 18.3592 13.9254 18.3158C13.5133 18.2724 13.2126 17.8855 13.2538 17.4517L13.7538 12.1885C13.795 11.7547 14.1625 11.4381 14.5747 11.4815Z" fill="#1C274C"/>
                  <path class="group-hover:fill-red-accent-500 transition-colors duration-300" opacity="0.5" d="M11.5956 22.0001H12.4044C15.1871 22.0001 16.5785 22.0001 17.4831 21.1142C18.3878 20.2283 18.4803 18.7751 18.6654 15.8686L18.9321 11.6807C19.0326 10.1037 19.0828 9.31524 18.6289 8.81558C18.1751 8.31592 17.4087 8.31592 15.876 8.31592H8.12405C6.59127 8.31592 5.82488 8.31592 5.37105 8.81558C4.91722 9.31524 4.96744 10.1037 5.06788 11.6807L5.33459 15.8686C5.5197 18.7751 5.61225 20.2283 6.51689 21.1142C7.42153 22.0001 8.81289 22.0001 11.5956 22.0001Z" fill="#1C274C"/>
                </svg>
              </div>
              <p class="">Delete</p>
            </div>
          

          <a onclick="@(() => Edit())" href="/">
            <div class="shadow group w-14 h-14 hover:w-32 group transition-all duration-300 overflow-hidden bg-white rounded-full flex gap-2 border border-primary-500 p-2 items-center ">
                <div class="scale-75">
                  <svg  width="40" height="40" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path class="group-hover:fill-primary-500 transition-colors duration-300" opacity="0.5" d="M20.8487 8.71306C22.3844 7.17735 22.3844 4.68748 20.8487 3.15178C19.313 1.61607 16.8231 1.61607 15.2874 3.15178L14.4004 4.03882C14.4125 4.0755 14.4251 4.11268 14.4382 4.15035C14.7633 5.0875 15.3768 6.31601 16.5308 7.47002C17.6848 8.62403 18.9133 9.23749 19.8505 9.56262C19.888 9.57563 19.925 9.58817 19.9615 9.60026L20.8487 8.71306Z" fill="#1C274C"/>
                    <path class="group-hover:fill-primary-500 transition-colors duration-300" d="M14.4386 4L14.4004 4.03819C14.4125 4.07487 14.4251 4.11206 14.4382 4.14973C14.7633 5.08687 15.3768 6.31538 16.5308 7.4694C17.6848 8.62341 18.9133 9.23686 19.8505 9.56199C19.8876 9.57489 19.9243 9.58733 19.9606 9.59933L11.4001 18.1598C10.823 18.7369 10.5343 19.0255 10.2162 19.2737C9.84082 19.5665 9.43469 19.8175 9.00498 20.0223C8.6407 20.1959 8.25351 20.3249 7.47918 20.583L3.39584 21.9442C3.01478 22.0712 2.59466 21.972 2.31063 21.688C2.0266 21.4039 1.92743 20.9838 2.05445 20.6028L3.41556 16.5194C3.67368 15.7451 3.80273 15.3579 3.97634 14.9936C4.18114 14.5639 4.43213 14.1578 4.7249 13.7824C4.97307 13.4643 5.26165 13.1757 5.83874 12.5986L14.4386 4Z" fill="#1C274C"/>
                  </svg>
                </div>
              <p class="">Edit</p>
            </div>
          </a>
        </div>

      }
    </div>
  </nav>
  <!-- Mobile menu, show/hide based on menu open state. -->
  @if (collapseNavMenu){
  <div class="lg:hidden" role="dialog" aria-modal="true">
    <!-- Background backdrop, show/hide based on slide-over state. -->
    <div class="fixed inset-0 z-10"></div>
    <div class="fixed inset-y-0 right-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10">
      <div class="flex px-2 flex-col items-center justify-between w-full ">
        <div class="flex justify-between w-full ">
          <a href="/" class="-m-1.5 p-1.5">
            <span class="sr-only">BlueSkies</span>
            <Image ImageName="Logo.svg" css="h-14 w-auto" alt="BlueSkies logo"/>
          </a>
          <button type="button" class="-m-2.5 rounded-md p-2.5 text-gray-700" @onclick="ToggleNavMenu">
            <span class="sr-only">Close menu</span>
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="flex flex-col w-full mt-5">
          <a class="p-3 w-full text-left hover:bg-primary-100 rounded-xl transition-all duration-300" href="/">Home</a>
          <a class="p-3 w-full text-left hover:bg-primary-100 rounded-xl transition-all duration-300" href="/solarscore">Solar Score</a>
          <a class="p-3 w-full text-left hover:bg-primary-100 rounded-xl transition-all duration-300" href="/advanced">Advanced</a>
          @if(loggedIn == true){
            <p class="p-3 w-full text-left hover:bg-primary-100 rounded-xl transition-all duration-300">@userEmail</p>
            }else{
                <p class="transition-all duration-300 group-hover:delay-200 delay-100 group-hover:translate-x-0 @(isScrollingDown ? "translate-x-20" : "")">Log In</p>
          }
          <p class="p-3 w-full text-left hover:bg-primary-100 rounded-xl transition-all duration-300" onclick="@(() => logout())" >Logout</p>
        </div>
        
      </div>
    </div>
  </div>
  }
</header>



@code {
    [Parameter]
    public bool isDashboard { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsScrollingDownChanged { get; set; }
    private string width = "";
    private bool loggedIn = false;
    private string userEmail = "";
    private bool collapseNavMenu = false;
    private string currentPage = "";

    private ReportModel report = new ReportModel();

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private int currentScrollPosition;
    [Parameter]
    public bool isScrollingDown { get; set; } = false;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("scrollUtils.getCurrentScrollPosition", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void UpdateScrollPosition(int scrollY)
    {
        if (scrollY > currentScrollPosition) isScrollingDown = true; else if (scrollY == 0) isScrollingDown = false;

        currentScrollPosition = scrollY;
        IsScrollingDownChanged.InvokeAsync(isScrollingDown);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
      var result = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
     

      if (result.Success)
      {
          loggedIn = result.Value;
          var ans = await ProtectedLocalStore.GetAsync<string>("userEmail");
            if (ans.Value != null) 
              userEmail = ans.Value;
      }
      else
      {
          loggedIn = false;
      }

    }

    public async void logout()
    {
      await ProtectedLocalStore.DeleteAsync("reportAppliances");
      await ProtectedLocalStore.DeleteAsync("selectedReport");
      await ProtectedLocalStore.DeleteAsync("redirect");
      await ProtectedLocalStore.DeleteAsync("isAdmin");
      await ProtectedLocalStore.DeleteAsync("userEmail");
      await ProtectedLocalStore.DeleteAsync("userId");
      await ProtectedLocalStore.DeleteAsync("loggedIn");
      await ProtectedLocalStore.DeleteAsync("userReports");
      await ProtectedLocalStore.DeleteAsync("reportAll");
      await ProtectedLocalStore.DeleteAsync("userReportAllAppliance");
      
      //systems
      await ProtectedLocalStore.DeleteAsync("systems");
      //advancedCalculationAppliances
      await ProtectedLocalStore.DeleteAsync("advancedCalculationAppliances");
      //selectedSystem
      await ProtectedLocalStore.DeleteAsync("selectedSystem");
      //location
      await ProtectedSessionStore.DeleteAsync("location");
      //SelectedAddress
      await ProtectedLocalStore.DeleteAsync("selectedAddress");
      await ProtectedSessionStore.DeleteAsync("latitude");
      await ProtectedSessionStore.DeleteAsync("longitude");
      //solarScore
      await ProtectedSessionStore.DeleteAsync("solarScore");
      //basicCalculation
      await ProtectedSessionStore.DeleteAsync("basicCalculation");
      //selectedSystem
      await ProtectedSessionStore.DeleteAsync("selectedSystem");
      await ProtectedSessionStore.DeleteAsync("parent");

      loggedIn = false;
      userEmail = "";
      StateHasChanged();
    }

    private async Task Edit(){}

    private async Task Delete(){}
   
   private void ShowModal(){}

    @* private async Task GetReports(int userId){
      var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/Report/getUserReports/" + userId);
        var response = await client.SendAsync(request);
        if(response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            keys = JsonSerializer.Deserialize<List<APIKeyModel>>(data, new JsonSerializerOptions { PropertyNameCaseInsensitive = true })!;
        }
        else
        {
            Console.WriteLine("Failed to get reports");
        }
    } *@

} 