@using BlazorApp.Components.Base
@using System
@inject IJSRuntime JSRuntime
@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager navigationManager

@{
  if (isScrollingDown) width = loggedIn ? "shadow w-14 h-14 hover:w-60" : "shadow w-14 h-14 hover:w-36"; else width = loggedIn ? "w-60 h-14  -translate-y-20" : "w-36 h-14 -translate-y-20";
   Uri uri = new Uri(navigationManager.Uri);
   string[] segments = uri.Segments;
   currentPage = segments[segments.Length - 1];
}
<div class="fixed top-0 left-0 shadow-sm bg-white transition-all duration-300 delay-[250ms] w-full z-20 @(isScrollingDown ? "h-0" : "h-24") "></div>
<header class="fixed h-20 left-0 bg-transparent w-full z-20 transition-all duration-300 delay-[250ms] @(isScrollingDown ? "-top-20" : "top-0")">
  <nav class="mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8" aria-label="Global">
    <div class="flex lg:flex-1">
      <a href="/" class="-m-1.5 p-1.5">
        <span class="sr-only">BLueSkies</span>
        <BlazorApp.Components.Base.Image ImageName="Logo.svg" css="h-14 w-auto" alt="BlueSkies logo"/>
      </a>
    </div>
    <div class="flex lg:hidden">
      <button type="button" class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700" @onclick="ToggleNavMenu">
        <span class="sr-only">Open main menu</span>
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
        </svg>
      </button>
    </div>
    <div class="hidden lg:flex lg:gap-x-12">
      <a href="/" class="text-sm font-semibold leading-6 text-gray-900">Home</a>
      <a href="/solarscore" class="text-sm font-semibold leading-6 text-gray-900">Solar Score</a>
      <a href="/advanced" class="text-sm font-semibold leading-6 text-gray-900">Advanced</a>
    </div>
    <div class="hidden lg:flex lg:flex-1 lg:justify-end">
      <div class="fixed top-5 right-3 flex flex-col-reverse justify-end items-end gap-4 z-30">
        <a onclick="@(() => logout())" href="/">
          <div class="@(loggedIn ? "flex" : "hidden") shadow group w-14 h-14 hover:w-40 transition-all duration-300 overflow-hidden bg-white rounded-full gap-2 border delay-[250ms] hover:delay-0 border-primary-500 p-2 items-center  @(isScrollingDown ? "opacity-100" : "opacity-0 -translate-y-40") ">
            <Image ImageName="Logout.svg" alt="User Circle" css="w-10 h-10 scale-75" />
            <p class="transition-all duration-300 group-hover:delay-200 delay-100 group-hover:translate-x-0 translate-x-20">Log Out</p>
          </div>
        </a>
        <a href="@(loggedIn ? "/dashboard" : "/login")">
          <div class="z-40 group transition-all duration-300 overflow-hidden  bg-white rounded-full flex gap-2 border delay-[250ms] hover:delay-0 border-primary-500 p-2 items-center @width">
            <Image ImageName="User Circle.svg" alt="User Circle" css="w-10 h-10" />
            
            @if(loggedIn == true){
            <p>@userEmail</p>
            }else{
                <p class="transition-all duration-300 group-hover:delay-200 delay-100 group-hover:translate-x-0 @(isScrollingDown ? "translate-x-20" : "")">Log In</p>
            }
          </div>
        </a>
        <a href="/">
          <div class="shadow w-14 h-14 hover:w-44 group transition-all duration-300 overflow-hidden  bg-white rounded-full flex gap-2 border delay-[250ms] hover:delay-0 border-primary-500 p-2 items-center  @(isScrollingDown ? "opacity-100" : "opacity-0") ">
            <Image ImageName="Logo-small.svg" alt="User Circle" css="w-10 h-10" />
            <p class="transition-all duration-300 group-hover:delay-200 delay-100 group-hover:translate-x-0 translate-x-20">Blue Skies</p>
          </div>
        </a>
      </div>
      @if(currentPage == "dashboard"){
        <div class="fixed toast-slide-in top-5 left-3 flex flex-col-reverse justify-start items-start gap-4 z-30 transition-all duration-300 delay-300 @(isScrollingDown? "translate-y-0" : "translate-y-24")">
            <div class="flex shadow group w-14 h-14 hover:w-40 transition-all duration-300 overflow-hidden bg-white rounded-full gap-2 border delay-[250ms] hover:delay-0 border-primary-500 p-2 items-center ">
              <Image ImageName="Trash.svg" alt="Trash" css="w-10 h-10 scale-75" />
              <p class="transition-all duration-300 group-hover:delay-200 delay-100 group-hover:translate-x-0 translate-x-20">Delete</p>
            </div>

            <div class="shadow w-14 h-14 hover:w-36 group transition-all duration-300 overflow-hidden  bg-white rounded-full flex gap-2 border delay-[250ms] hover:delay-0 border-primary-500 p-2 items-center ">
              <Image ImageName="Pen.svg" alt="Pen" css="w-10 h-10 scale-75" />
              <p class="transition-all duration-300 group-hover:delay-200 delay-100 group-hover:translate-x-0 translate-x-20">Edit</p>
            </div>
        </div>
      }
    </div>
  </nav>
  <!-- Mobile menu, show/hide based on menu open state. -->
  @if (collapseNavMenu){
  <div class="lg:hidden" role="dialog" aria-modal="true">
    <!-- Background backdrop, show/hide based on slide-over state. -->
    <div class="fixed inset-0 z-10"></div>
    <div class="fixed inset-y-0 right-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10">
      <div class="flex px-2 flex-col items-center justify-between w-full ">
        <div class="flex justify-between w-full ">
          <a href="/" class="-m-1.5 p-1.5">
            <span class="sr-only">BlueSkies</span>
            <Image ImageName="Logo.svg" css="h-14 w-auto" alt="BlueSkies logo"/>
          </a>
          <button type="button" class="-m-2.5 rounded-md p-2.5 text-gray-700" @onclick="ToggleNavMenu">
            <span class="sr-only">Close menu</span>
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        <div class="flex flex-col w-full mt-5">
          <a class="p-3 w-full text-left hover:bg-primary-100 rounded-xl transition-all duration-300" href="/">Home</a>
          <a class="p-3 w-full text-left hover:bg-primary-100 rounded-xl transition-all duration-300" href="/solarscore">Solar Score</a>
          <a class="p-3 w-full text-left hover:bg-primary-100 rounded-xl transition-all duration-300" href="/advanced">Advanced</a>
          @if(loggedIn == true){
            <p class="p-3 w-full text-left hover:bg-primary-100 rounded-xl transition-all duration-300">@userEmail</p>
            }else{
                <p class="transition-all duration-300 group-hover:delay-200 delay-100 group-hover:translate-x-0 @(isScrollingDown ? "translate-x-20" : "")">Log In</p>
          }
          <p class="p-3 w-full text-left hover:bg-primary-100 rounded-xl transition-all duration-300" onclick="@(() => logout())" >Logout</p>
        </div>
        
      </div>
    </div>
  </div>
  }
</header>



@code {
    [Parameter]
    public bool isDashboard { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsScrollingDownChanged { get; set; }
    private string width = "";
    private bool loggedIn = false;
    private string userEmail = "";
    private bool collapseNavMenu = false;
    private string currentPage = "";

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private int currentScrollPosition;
    [Parameter]
    public bool isScrollingDown { get; set; } = false;

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("scrollUtils.getCurrentScrollPosition", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void UpdateScrollPosition(int scrollY)
    {
        if (scrollY > currentScrollPosition) isScrollingDown = true; else if (scrollY == 0) isScrollingDown = false;

        currentScrollPosition = scrollY;
        IsScrollingDownChanged.InvokeAsync(isScrollingDown);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
      var result = await ProtectedLocalStore.GetAsync<bool>("loggedIn");

      if (result.Success)
      {
          loggedIn = result.Value;
          var ans = await ProtectedLocalStore.GetAsync<string>("userEmail");
            if (ans.Value != null) 
              userEmail = ans.Value;
      }
      else
      {
          loggedIn = false;
      }

    }

    public async void logout()
    {
      await ProtectedLocalStore.DeleteAsync("reportAppliances");
      await ProtectedLocalStore.DeleteAsync("selectedReport");
      await ProtectedLocalStore.DeleteAsync("redirect");
      await ProtectedLocalStore.DeleteAsync("isAdmin");
      await ProtectedLocalStore.DeleteAsync("userEmail");
      await ProtectedLocalStore.DeleteAsync("userId");
      await ProtectedLocalStore.DeleteAsync("loggedIn");
      await ProtectedLocalStore.DeleteAsync("userReports");
      await ProtectedLocalStore.DeleteAsync("reportAll");
      await ProtectedLocalStore.DeleteAsync("userReportAllAppliance");
      
      //systems
      await ProtectedLocalStore.DeleteAsync("systems");
      //advancedCalculationAppliances
      await ProtectedLocalStore.DeleteAsync("advancedCalculationAppliances");
      //selectedSystem
      await ProtectedLocalStore.DeleteAsync("selectedSystem");
      //location
      await ProtectedSessionStore.DeleteAsync("location");
      //SelectedAddress
      await ProtectedLocalStore.DeleteAsync("selectedAddress");
      await ProtectedSessionStore.DeleteAsync("latitude");
      await ProtectedSessionStore.DeleteAsync("longitude");
      //solarScore
      await ProtectedSessionStore.DeleteAsync("solarScore");
      //basicCalculation
      await ProtectedSessionStore.DeleteAsync("basicCalculation");
      //selectedSystem
      await ProtectedSessionStore.DeleteAsync("selectedSystem");
      await ProtectedSessionStore.DeleteAsync("parent");

      loggedIn = false;
      userEmail = "";
      StateHasChanged();
    }

} 