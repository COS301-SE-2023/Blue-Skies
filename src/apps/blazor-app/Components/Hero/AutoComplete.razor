@using System.Net.Http
@using System.Net.Http.Json


<div class="mt-20 relative">
    <div class="relative mt-2 z-30 rounded-full shadow-sm border border-primary-500">
        <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
            <span class="text-gray-500 translate-x-5 sm:text-sm">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                        d="M10.889 19.4174C15.7982 19.4174 19.7778 15.4377 19.7778 10.5285C19.7778 5.61934 15.7982 1.63965 10.889 1.63965C5.97975 1.63965 2.00006 5.61934 2.00006 10.5285C2.00006 15.4377 5.97975 19.4174 10.889 19.4174Z"
                        stroke="#000F52" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M22.0004 21.6395L17.1671 16.8062" stroke="#000F52" stroke-width="2" stroke-linecap="round"
                        stroke-linejoin="round" />
                </svg>
            </span>
        </div>
        <input
            class="pl-20 w-full rounded-full h-16 py-1.5 text-gray-900 placeholder:text-gray-400  sm:text-sm sm:leading-6 focus:border-none focus:ring-0 focus:outline-none focus:bg-primary-50"
            type="text" @bind="searchQuery" @oninput="OnSearchInput" placeholder="Enter you address" name="address"
            id="address" />
    </div>
    <div class="absolute z-20 transition-all duration-200  @(suggestions.Count == 0 ? "opacity-0 h-0 -translate-y-10" : "opacity-100") w-full bg-white top-full left-0">
        <ul class="flex flex-col mx-auto gap-2 mt-4 shadow p-2 rounded-xl w-full z-10">
            @{int i = 100;}
            @foreach (var suggestion in suggestions)
            {
                if (suggestion.Place_Name == "No results found")
                {
                    <li class="p-3 text-left rounded-xl">
                        <p class="">
                            @suggestion.Place_Name
                        </p>
                    </li>
                    <hr class="h-px bg-gray-200 border-0 " />
                    break;
                } else {
                    if (suggestion.Place_Name.Contains(",")) {
                        var address = suggestion.Place_Name.Substring(0, suggestion.Place_Name.IndexOf(","));
                        var rest = suggestion.Place_Name.Substring(suggestion.Place_Name.IndexOf(",") + 1);
                        <li class="p-3 text-left hover:bg-primary-100 rounded-xl transition-all duration-300  @(suggestions.Count == 0 ? "opacity -translate-y-20" : "opacity-100")">
                            <p class="font-bold">
                                @address
                            </p>
                            <p class="text-gray-500">
                                @rest
                            </p>
                        </li>
                    } else {
                        <li class="p-3 text-left hover:bg-primary-100 rounded-xl transition-all duration-300  @(suggestions.Count == 0 ? "opacity -translate-y-20" : "opacity-100")">
                            <p class="font-bold">
                                @suggestion.Place_Name
                            </p>
                        </li>
                    }
                    <hr class="h-px bg-gray-200 border-0 " />
                }
                i += 100;
            }
        </ul>
    </div>
</div>

@code {
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private HttpClient httpClient;
    private string searchQuery = "";
    private List<LocationSuggestion> suggestions = new List<LocationSuggestion>();
    private string mapboxAccessToken = "";

    
    protected async override void OnInitialized()
    {
        httpClient = new HttpClient();

        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/SolarScore/mapboxkey");
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK){
            mapboxAccessToken = await response.Content.ReadAsStringAsync();
        }
        mapboxAccessToken = mapboxAccessToken.Trim('"');
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        if(e.Value != null && e.Value.ToString() != "")
        {
            searchQuery = e.Value.ToString();
            await GetLocationSuggestions();
        } else {
            suggestions = new List<LocationSuggestion>();
        }
    }

    private async Task GetLocationSuggestions()
    {        
        string baseUrl = "https://api.mapbox.com/geocoding/v5/mapbox.places/";

        string requestUrl = $"{baseUrl}{System.Net.WebUtility.UrlEncode(searchQuery)}.json?country=za&limit=5&proximity=ip&access_token={mapboxAccessToken}";

        try
        {
            var mapResponse = await httpClient.GetFromJsonAsync<GeocodingResponse>(requestUrl);
            suggestions = mapResponse?.Features ?? new List<LocationSuggestion>();
            if (suggestions.Count == 0)
            {
                suggestions.Add(new LocationSuggestion { Place_Name = "No results found" });
            }
        }
        catch (Exception ex)
        {
            // Handle any errors or exceptions
            Console.WriteLine(ex.Message);
        }
    }

    public class GeocodingResponse
    {
        public List<LocationSuggestion> Features { get; set; }
    }

    public class LocationSuggestion
    {
        public string Place_Name { get; set; } = "";
        public Geometry? Geometry { get; set; }
    }

    public class Geometry
    {
        public string? Type { get; set; }
        public List<double>? Coordinates { get; set; }
    }

   
}
