@using BlazorApp.Components.Base
@using BlazorApp.Components.Hero
@using BlazorApp.Models
@using System.Text.Json;
@using System.Net;
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject BlazorApp.Data.LoadingService loadingService

<div class="mx-auto max-w-2xl px-10 py-32 sm:py-20 lg:py-28">
    <div class="text-center">
        <Heading>
            <Header>
                <h1 class="text-4xl font-bold tracking-tight text-primary-950 sm:text-6xl">Discover Your Solar Score
                </h1>
            </Header>
            <Subscript>
                <p class="mt-6 text-lg leading-8 text-gray-600 mb-5">Uncover Your Solar Potential. Calculate Your Solar
                    Score Today.</p>
            </Subscript>
        </Heading>
        <div>
            <AutoComplete />
        </div>
        <div class="mt-10 flex flex-col sm:flex-row items-center justify-center gap-6">
            <div @onclick="saveBasicCalculation">
                <Button style="pill" css="h-14">
                    <content>
                        <p class="text-sm font-semibold hover:text-white">Get Solar Score</p>
                    </content>
                </Button>
            </div>
            <a href="/dashboard" class="text-sm font-normal leading-6 text-orange-accent-500">Dashboard<span
                    aria-hidden="true"></span></a>
        </div>
    </div>
</div>


@code {
    public double perfectSolarIrradiation = 200;
    public string parent = "index";
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private double latitude = 0;
    private double longitude = 0;
    private readonly int zoom = 19;
    private readonly int width = 600;
    private readonly int height = 500;
    private byte[] imageBytes = new byte[0];
    private BasicCalculationModel basicCalc = new BasicCalculationModel();
    int systemId = 2;
    int batteryLife = 10;
    string location = "";
    float dayLightHours = 5f;


    protected override async Task OnInitializedAsync()
    {
        var par = await ProtectedSessionStore.GetAsync<string>("parent");
        parent = par.Value!;
        @* var inputDataTest = "2020-01-26;280.1694770627461,2020-01-19;217.30314973375084,2020-02-10;205.91909223964183,2020-02-26;268.00598571835434,2020-03-05;251.34854705757772,2020-02-03;294.9944500948353,2020-02-18;196.01405880970142,2020-03-13;133.53092077208365,2020-01-11;140.77526099971732,2020-01-03;274.16255800576283,2020-03-20;213.53833892173307,2020-03-28;86.07377726211375,2020-04-05;189.09294641287556,2020-05-20;162.87208815338192,2020-04-12;195.23017430989947,2020-04-20;181.47114097639542,2020-04-27;88.91080436815847,2020-05-05;163.53556279961504,2020-05-13;172.76760953310188,2020-05-28;161.27009713034812,2020-06-04;153.4142368948342,2020-07-20;163.50309039660021,2020-06-12;153.07966146225053,2020-06-20;146.8205620993942,2020-06-27;148.20036329646194,2020-07-05;155.411978056839,2020-07-12;158.85137768056063,2020-07-28;115.05743370512185,2020-08-04;180.9006818075712,2020-08-12;183.39486048480677,2020-08-19;205.34650213318824,2020-08-27;198.04015662852072,2020-09-04;212.82960657890175,2020-09-11;228.9090800968413,2020-09-19;230.14647456306068,2020-09-26;251.81201694446585,2020-10-04;229.87589738319446,2020-10-12;116.84046857709606,2020-10-19;263.68581343620787,2020-10-27;262.955763367215,2020-11-03;216.35346829408576,2020-11-11;205.2613873521969,2020-11-19;281.7251537100004,2020-11-26;216.51450456508687,2021-01-11;150.09843014368386,2020-12-04;245.48033573643508,2020-12-11;291.3641545708764,2020-12-19;244.72848791240295,2020-12-27;274.917128026488,2021-01-03;231.13664582200602,2021-01-19;296.81594410087916,2021-01-26;105.55191093889802,2021-02-03;178.03597364327274,2021-02-10;234.33706567005186,2021-02-18;256.1127280293346,2021-02-26;197.39925233208493,2021-03-05;246.32916558717005,2021-03-13;225.79422609128662,2021-03-20;197.70647629402453,2021-03-28;194.6330573279631,2021-04-05;221.94648117264137,2021-04-12;216.3858132765853,2021-05-13;176.53271283244078,2021-04-20;198.02019926896023,2021-04-27;195.8330878055448,2021-05-05;180.58592596023732,2021-05-20;160.29422167084792,2021-05-28;158.50954090004134,2021-06-04;130.68798804033543,2021-06-12;144.30617905189476,2021-07-05;152.6108003681095,2021-06-20;136.85930242994988,2021-06-27;152.0557340712021,2021-07-12;154.90129136260524,2021-07-20;162.55281662819462,2021-07-28;170.57336970910353,2021-08-04;173.2771406302564,2021-08-12;180.66230887501376,2021-08-19;198.00325177795128,2021-08-27;195.77367322583473,2021-09-11;231.38674558057062,2021-09-04;209.75399106538626,2021-09-19;237.26566619450273,2021-10-12;280.5729572157699,2021-09-26;245.21068464690086,2021-10-04;181.24646086163983,2021-11-11;274.5986974943059,2021-10-19;161.13239452447993,2021-10-27;121.45315121467316,2021-11-03;301.1775613748445,2021-11-19;240.35901423425628,2021-12-04;257.83958270746996,2021-11-26;156.17095991082383,2021-12-11;272.7696507667412,2022-01-19;208.4452590810408,2021-12-19;111.82553456634899,2021-12-27;69.17082977570259,2022-01-03;287.82408185209454,2022-01-11;241.4991482392405,2022-01-26;259.93710689056775,2022-02-03;262.56510703091715,2022-02-10;260.83304525447403,2022-02-18;182.43371225066645,2022-03-05;142.3163018975237,2022-02-26;241.1974664677219,2022-03-13;210.30037033875263,2022-03-20;229.59254616478117,2022-03-28;149.20011384876645,2022-04-05;179.76505220491742,2022-04-12;165.18238965037534,2022-04-20;198.15506466995748,2022-04-27;168.58451171747774,2022-05-05;176.13394051693035,2022-05-13;159.39479152209003,2022-05-20;122.4061326026564,2022-06-20;143.66564478475897,2022-05-28;153.58533044709236,2022-06-04;153.64850504220271,2022-06-12;150.76467544654267,2022-06-27;143.10125909642824,2022-07-05;147.39752282949277,2022-07-12;155.10210433025793,2022-09-04;220.94934961531587,2022-07-20;62.777957564123724,2022-07-28;161.3335990658318,2022-08-04;152.69301889524195,2022-08-12;185.48004456624233,2022-08-19;194.87162277203282,2022-08-27;204.9761589640666,2022-09-11;230.34214069090314,2022-09-19;221.24219409203442,2022-10-12;261.88656580159466,2022-09-26;249.47190760901447,2022-10-04;253.36817196704766,2022-10-19;203.1028121027021,2022-11-19;254.24452887501675,2022-10-27;179.184612003408,2022-11-03;133.63582332200298,2022-11-11;155.66919426334587,2022-11-26;250.69124953475207,2022-12-04;278.46982085033363,2022-12-11;226.6021160832231,2022-12-19;185.232925222178,2022-12-27;258.8083935576991,";
        Console.WriteLine("Testing solar score:");
        Console.WriteLine("Solar Score: " + calculateSolarScore(inputDataTest)); *@
    }

    public async void saveBasicCalculation()
    {

        ShowLoadingScreen();
        var locationTemp = await ProtectedSessionStore.GetAsync<LocationSuggestion>("location");
        LocationSuggestion locationSuggestion = locationTemp.Value!;

        List<double> cord = new List<double>();
        if (locationSuggestion.Geometry != null)
        {
            cord = locationSuggestion.Geometry.Coordinates!;
        }
        longitude = cord[0];
        latitude = cord[1];


        dayLightHours = await getDayLightHours(latitude, longitude);
        await CreateSolarIrradiation(latitude, longitude);

        if (locationSuggestion != null)
        {
            location = locationSuggestion.Place_Name;
        }
        //Convert float to int
        int solarScore = 50;
        await ProtectedSessionStore.SetAsync("solarScore", solarScore);
        await ProtectedSessionStore.SetAsync("latitude", latitude);
        await ProtectedSessionStore.SetAsync("longitude", longitude);
        await ProtectedSessionStore.SetAsync("parent", "");
        await ProtectedSessionStore.SetAsync("edit", false);

        await DownloadImage();
        Console.WriteLine("Finished downloading image");

        if (parent.Equals("index"))
        {
            Console.WriteLine("Parent is index");
            await ProtectedSessionStore.DeleteAsync("parent");
            NavigationManager.NavigateTo("/solarScore");
        }
        else
        {
            await ProtectedSessionStore.DeleteAsync("parent");
            StateHasChanged();
        }
        HideLoadingScreen();
    }

    public async Task<float> getDayLightHours(double latitude, double longitude)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/SolarScore/getsuntimes");
        var content = new StringContent("{\r\n \"latitude\": " + latitude + ",\r\n \"longitude\": " + longitude + "\r\n}", null,
        "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            string data = response.Content.ReadAsStringAsync().Result;
            //convert data to double
            float ans = float.Parse(data);
            return ans;
        }
        else
        {
            return 0f;
        }
    }

    public async Task CreateSolarIrradiation(double latitude, double longitude) 
    {
        var numYears = 3;
        var numDaysPerYear = 48;
        //Try to get the solar Radiation if it exsists
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/SolarScore/getSolarIrradiation/" + latitude + "/" + longitude);
        var response = await client.SendAsync(request);
        //if not found
        if (response.StatusCode == HttpStatusCode.NotFound)
        {

            Console.WriteLine("Solar Irradiation Data not found");
            Console.WriteLine("latitude: " + latitude + " longitude: " + longitude);
            client = new HttpClient();
            request = new HttpRequestMessage(HttpMethod.Post, API_PORT + "/SolarScore/createSolarIrradiation");
            var content = new StringContent("{\r\n    \"latitude\": "+ latitude + ",\r\n    \"longitude\": " + longitude + "\r\n}", null, "application/json");
            request.Content = content;
            response = await client.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Created new row in database for solarIrradiation data");
            } else {
                Console.WriteLine("Failed to create row table in database for solarIrradiation data");
            }
        } else if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Solar Irradiation Data found");
        } else {
            Console.WriteLine("Failed to create new table in database for solarScore data");

        }
    }

    private double calculateSolarScore(string data) {
        string input = data;
        double total = 0;
        int i = 0;
        while(input.Length > 0) {
            int newDataPointIndex = input.IndexOf(",");
            if(newDataPointIndex == -1) {
                newDataPointIndex = input.Length;
            }
            string newDataPoint = input.Substring(0, newDataPointIndex);
            input = input.Substring(newDataPointIndex + 1);
            newDataPoint = newDataPoint.Trim();
            int solarScoreIndex = newDataPoint.IndexOf(";");
            total += Double.Parse(newDataPoint.Substring(solarScoreIndex + 1));
            i++;
        }
        double averageSolarIrradiation = total /i;
        double solarScore = averageSolarIrradiation/perfectSolarIrradiation * 100;
        if(solarScore > 100) {
            solarScore = 100;
        }
        return solarScore;
    }

    public async Task CreateBasicCaculation(int systemId, float dayLightHours, string location, int batteryLife, string image)
    {
        Console.WriteLine("Creating Basic Calculation");
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, API_PORT + "/BasicCalculation/create");
        var content = new StringContent(
        "{\r\n \"systemId\": "
        + systemId
        + ",\r\n \"daylightHours\": \""
        + dayLightHours
        + "\",\r\n \"location\": \""
        + location
        + "\",\r\n \"batteryLife\": "
        + batteryLife
        + ",\r\n \"image\": \""
        + image
        + "\"\r\n}",
        null,
        "application/json"
        );
        request.Content = content;
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Created Basic Calculation");
            await getCreatedBasicCalculationId(systemId, dayLightHours + "", location);
        }
        else
        {
            Console.WriteLine("Failed to create basic calculation");
        }
        return;
    }

    private async Task getCreatedBasicCalculationId(int systemId, string dayLightHours, string location)
    {
        Console.WriteLine("Getting created basic calculation id");
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/BasicCalculation/getCreated");
        var content = new StringContent(
        "{\r\n \"systemId\": "
        + systemId
        + ",\r\n \"daylightHours\": \""
        + dayLightHours
        + "\",\r\n \"location\": \""
        + location
        + "\"\r\n}",
        null,
        "application/json"
        );
        request.Content = content;
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            basicCalc = JsonSerializer.Deserialize<BasicCalculationModel>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                })!;
            Console.WriteLine("Got basic calculation");
        }
        else
        {
            Console.WriteLine("Failed to get basic calculation");
        }
        return;
    }

    private async Task DownloadImage()
    {
        var googleMapsService = new GoogleMapsService(new HttpClient());
        imageBytes = await googleMapsService.DownloadStaticMapImageAsync(latitude, longitude, zoom, width, height);

        string img = Convert.ToBase64String(imageBytes);
        await CreateBasicCaculation(systemId, dayLightHours, location, batteryLife, img);
        await ProtectedSessionStore.SetAsync("basicCalculationId", basicCalc.basicCalculationId!);
        return;
    }

    private void ShowLoadingScreen()
    {
        Console.WriteLine("Showing loading screen - EnterLocation.razor");
        loadingService.ShowLoadingScreen();
    }

    private void HideLoadingScreen()
    {
        loadingService.HideLoadingScreen();
    }
}