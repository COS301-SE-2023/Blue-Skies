@using BlazorApp.Components.Base
@using BlazorApp.Components.Hero
@using BlazorApp.Models
@using System.Text.Json;
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager


<div class="mx-auto max-w-2xl px-10 py-32 sm:py-20 lg:py-28">
    <div class="text-center">
        <Heading>
            <Header>
                <h1 class="text-4xl font-bold tracking-tight text-primary-950 sm:text-6xl">Discover Your Solar Score
                </h1>
            </Header>
            <Subscript>
                <p class="mt-6 text-lg leading-8 text-gray-600 mb-5">Uncover Your Solar Potential. Calculate Your Solar
                    Score Today.</p>
            </Subscript>
        </Heading>
        <div>
            <AutoComplete />
        </div>
        <div class="mt-10 flex flex-col sm:flex-row items-center justify-center gap-6">
            <Button style="pill" css="h-14">
                <content>
                    <p @onclick="saveBasicCalculation" class="text-sm font-semibold hover:text-white">Get Solar Score</p>
                </content>
            </Button>
            <a href="/advanced" class="text-sm font-normal leading-6 text-orange-accent-500">Advanced Calculations <span
                    aria-hidden="true"></span></a>
        </div>
    </div>
</div>

@code {
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private double latitude = 0; 
    private double longitude = 0; 
    private readonly int zoom = 19; 
    private readonly int width = 600;
    private readonly int height = 500; 


    public async void saveBasicCalculation()
    {
        var locationTemp = await ProtectedSessionStore.GetAsync<LocationSuggestion>("location");
        LocationSuggestion locationSuggestion = locationTemp.Value!;

        List<double> cord = new List<double>();
        if (locationSuggestion.Geometry != null)
        {
            cord = locationSuggestion.Geometry.Coordinates!;    
        }
        latitude = cord[0];
        longitude = cord[1];
        @* latitude = 28.356459;
        longitude = -25.772081; *@
        Console.WriteLine("Latitude: " + latitude.ToString());
        Console.WriteLine("Longitude: " + longitude.ToString());

        //await GetSolarScore(latitude, longitude);
        int systemId = 2;
        Console.WriteLine("Getting daylight hours");
        float dayLightHours = await getDayLightHours(latitude, longitude);
        Console.WriteLine("Got daylight hours: "+ dayLightHours);
        string location = "";
        if (locationSuggestion != null)
        {
            location = locationSuggestion.Place_Name;
        }
        int batteryLife = 10;
        string result = await CreateBasicCaculation(systemId, dayLightHours, location, batteryLife);
        Console.WriteLine(result);
        BasicCalculationModel basicCalculation = new BasicCalculationModel();
        basicCalculation.basicCalculationId = -1;
        basicCalculation.systemId = systemId;
        //Convert float to int
        int temp = (int)dayLightHours;
        basicCalculation.daylightHours = temp;
        basicCalculation.location = location;
        basicCalculation.batteryLife = batteryLife;
        basicCalculation.dateCreated = DateTime.Now;
        int solarScore = 85;
        await ProtectedSessionStore.SetAsync("basicCalculation", basicCalculation);
        await ProtectedSessionStore.SetAsync("solarScore",solarScore );
        await ProtectedSessionStore.SetAsync("latitude", latitude);
        await ProtectedSessionStore.SetAsync("longitude", longitude);
        await DownloadImage();
        NavigationManager.NavigateTo("/solarScore");
    }
    

    public async Task<string> GetSolarScore(double latitude, double longitude)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(
            HttpMethod.Get,
            API_PORT + "/SolarScore/getSolarScore"
        );
        var content = new StringContent(
            "{\r\n    \"latitude\": " + latitude + ",\r\n    \"longitude\": " + longitude + "\r\n}",
            null,
            "application/json"
        );
        request.Content = content;
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            return "Got solar Score";
        }
        else
        {
            throw new Exception("Error getting solar score");
        }
    }

    public async Task<float> getDayLightHours(double latitude, double longitude)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/SolarScore/getsuntimes");
        var content = new StringContent("{\r\n    \"latitude\": " + latitude + ",\r\n    \"longitude\": " + longitude + "\r\n}", null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            string data = response.Content.ReadAsStringAsync().Result;
            //convert data to double 
            float ans = float.Parse(data);
            return ans;
        }
        else
        {
            return 0f;
        }
    }

    public async Task<string> CreateBasicCaculation(int systemId, float dayLightHours, string location, int batteryLife)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, API_PORT + "/BasicCalculation/create");
        Console.WriteLine("{\r\n    \"systemId\": "
                + systemId
                + ",\r\n  \"daylightHours\": \""
                + dayLightHours
                + "\",\r\n  \"location\": \""
                + location
                + "\",\r\n  \"batteryLife\": "
                + batteryLife
                + "\r\n}");
        var content = new StringContent(
            "{\r\n    \"systemId\": "
                + systemId
                + ",\r\n  \"daylightHours\": \""
                + dayLightHours
                + "\",\r\n  \"location\": \""
                + location
                + "\",\r\n  \"batteryLife\": "
                + batteryLife
                + "\r\n}",
            null,
            "application/json"
        );
        request.Content = content;
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            return "Created Basic Calculation";
        }
        else
        {
            return "Failed to create Basic Calculation";
        }
    }

    private byte[] imageBytes = new byte[0];

    private async Task DownloadImage()
    {
        var googleMapsService = new GoogleMapsService(new HttpClient());
        imageBytes = await googleMapsService.GetStaticMapImageAsync(latitude, longitude, zoom, width, height);

        var imagePath = Path.Combine("wwwroot", "assets", "map_image.png");
        if (File.Exists(imagePath))
        {
            File.Delete(imagePath);
        }

        await File.WriteAllBytesAsync(imagePath, imageBytes);

    }
}