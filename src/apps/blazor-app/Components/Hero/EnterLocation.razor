@using BlazorApp.Components.Base
@using BlazorApp.Components.Hero
@using BlazorApp.Models
@using System.Text.Json;
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject BlazorApp.Data.LoadingService loadingService

<div class="mx-auto max-w-2xl px-10 py-32 sm:py-20 lg:py-28">
    <div class="text-center">
        <Heading>
            <Header>
                <h1 class="text-4xl font-bold tracking-tight text-primary-950 sm:text-6xl">Discover Your Solar Score
                </h1>
            </Header>
            <Subscript>
                <p class="mt-6 text-lg leading-8 text-gray-600 mb-5">Uncover Your Solar Potential. Calculate Your Solar
                    Score Today.</p>
            </Subscript>
        </Heading>
        <div>
            <AutoComplete />
        </div>
        <div class="mt-10 flex flex-col sm:flex-row items-center justify-center gap-6">
            <div @onclick="saveBasicCalculation">
                <Button style="pill" css="h-14">
                    <content>
                        <p class="text-sm font-semibold hover:text-white">Get Solar Score</p>
                    </content>
                </Button>
            </div>
            <a href="/dashboard" class="text-sm font-normal leading-6 text-orange-accent-500">Dashboard<span
                    aria-hidden="true"></span></a>
        </div>
    </div>
</div>


@code {
    public string parent = "index";
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private double latitude = 0;
    private double longitude = 0;
    private readonly int zoom = 19;
    private readonly int width = 600;
    private readonly int height = 500;
    private byte[] imageBytes = new byte[0];
    private BasicCalculationModel basicCalc = new BasicCalculationModel();
    int systemId = 2;
    int batteryLife = 10;
    string location = "";
    float dayLightHours = 5f;


    protected override async Task OnInitializedAsync()
    {
        var par = await ProtectedSessionStore.GetAsync<string>("parent");
        parent = par.Value!;
    }

    public async void saveBasicCalculation()
    {

        ShowLoadingScreen();
        var locationTemp = await ProtectedSessionStore.GetAsync<LocationSuggestion>("location");
        LocationSuggestion locationSuggestion = locationTemp.Value!;

        List<double> cord = new List<double>();
        if (locationSuggestion.Geometry != null)
        {
            cord = locationSuggestion.Geometry.Coordinates!;
        }
        latitude = cord[0];
        longitude = cord[1];


        dayLightHours = await getDayLightHours(latitude, longitude);
        await GetSolarData(latitude, longitude);

        if (locationSuggestion != null)
        {
            location = locationSuggestion.Place_Name;
        }
        //Convert float to int
        int solarScore = 50;
        await ProtectedSessionStore.SetAsync("solarScore", solarScore);
        await ProtectedSessionStore.SetAsync("latitude", latitude);
        await ProtectedSessionStore.SetAsync("longitude", longitude);
        await ProtectedSessionStore.SetAsync("parent", "");
        await ProtectedSessionStore.SetAsync("edit", false);

        await DownloadImage();
        Console.WriteLine("Finished downloading image");

        if (parent.Equals("index"))
        {
            await ProtectedSessionStore.DeleteAsync("parent");
            NavigationManager.NavigateTo("/solarScore");
        }
        else
        {
            await ProtectedSessionStore.DeleteAsync("parent");
            StateHasChanged();
        }
        HideLoadingScreen();
    }

    public async Task<float> getDayLightHours(double latitude, double longitude)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/SolarScore/getsuntimes");
        var content = new StringContent("{\r\n \"latitude\": " + latitude + ",\r\n \"longitude\": " + longitude + "\r\n}", null,
        "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            string data = response.Content.ReadAsStringAsync().Result;
            //convert data to double
            float ans = float.Parse(data);
            return ans;
        }
        else
        {
            return 0f;
        }
    }

    public async Task<int> GetSolarData(double latitude, double longitude) 
    {
        var numYears = 3;
        var numDaysPerYear = 48;

        @* Create the new table in database *@
        var uniqueId = Guid.NewGuid().ToString("N").Substring(0, 8);
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, API_PORT + "/SolarScore/create");
        var content = new StringContent("{\r\n    \"solarScoreId\" : \"" + uniqueId + "\",\r\n    \"data\" : \"\",\r\n    \"remainingCalls\": 48\r\n}", null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();

        if (response.IsSuccessStatusCode)
        {
            @* Call the python script *@
            var newClient = new HttpClient();
            var newRequest = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/SolarScore/getsolardata");
            var newContent = new StringContent("{\r\n" + " \"latitude\": " + latitude + ",\r\n" + " \"longitude\": " + longitude + ",\r\n" + " \"numYears\": " + numYears + ",\r\n" + " \"numDaysPerYear\": " + numDaysPerYear + ",\r\n" + " \"uniqueID\": \"" + uniqueId + "\"\r\n" + "}", null, "application/json");
            newRequest.Content = newContent;
            var newResponse = await newClient.SendAsync(newRequest);
            if (newResponse.IsSuccessStatusCode)
            {
                Console.WriteLine("The script for SolarScore Data was run successfully");
                @* Wait for results to come in*@
                @* var canExit = false;
                while(canExit) 
                {

                    await Task.Delay(50);
                } *@
                return 1;
            } else {
                Console.WriteLine("Failed to get solar data");
                return 0;
            }
        } else {
            Console.WriteLine("Failed to create new table in database for solarScore data");
            return 0;
        }
        return 0;
    } 
    public async Task CreateBasicCaculation(int systemId, float dayLightHours, string location, int batteryLife, string image)
    {
        Console.WriteLine("Creating Basic Calculation");
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, API_PORT + "/BasicCalculation/create");
        var content = new StringContent(
        "{\r\n \"systemId\": "
        + systemId
        + ",\r\n \"daylightHours\": \""
        + dayLightHours
        + "\",\r\n \"location\": \""
        + location
        + "\",\r\n \"batteryLife\": "
        + batteryLife
        + ",\r\n \"image\": \""
        + image
        + "\"\r\n}",
        null,
        "application/json"
        );
        request.Content = content;
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Created Basic Calculation");
            await getCreatedBasicCalculationId(systemId, dayLightHours + "", location);
        }
        else
        {
            Console.WriteLine("Failed to create basic calculation");
        }
        return;
    }

    private async Task getCreatedBasicCalculationId(int systemId, string dayLightHours, string location)
    {
        Console.WriteLine("Getting created basic calculation id");
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/BasicCalculation/getCreated");
        var content = new StringContent(
        "{\r\n \"systemId\": "
        + systemId
        + ",\r\n \"daylightHours\": \""
        + dayLightHours
        + "\",\r\n \"location\": \""
        + location
        + "\"\r\n}",
        null,
        "application/json"
        );
        request.Content = content;
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            basicCalc = JsonSerializer.Deserialize<BasicCalculationModel>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                })!;
            Console.WriteLine("Got basic calculation");
        }
        else
        {
            Console.WriteLine("Failed to get basic calculation");
        }
        return;
    }

    private async Task DownloadImage()
    {
        var googleMapsService = new GoogleMapsService(new HttpClient());
        imageBytes = await googleMapsService.DownloadStaticMapImageAsync(latitude, longitude, zoom, width, height);

        string img = Convert.ToBase64String(imageBytes);
        //await CreateBasicCaculation(systemId, dayLightHours, location, batteryLife, img);
        await ProtectedSessionStore.SetAsync("basicCalculationId", basicCalc.basicCalculationId!);
        return;
    }

    private void ShowLoadingScreen()
    {
        Console.WriteLine("Showing loading screen - EnterLocation.razor");
        loadingService.ShowLoadingScreen();
    }

    private void HideLoadingScreen()
    {
        loadingService.HideLoadingScreen();
    }
}