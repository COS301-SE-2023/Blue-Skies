@using BlazorApp.Models
@using System.Text.Json
@using Newtonsoft.Json
@using BlazorApp.Components.Base
@inject IJSRuntime JSRuntime
@inject BlazorApp.Data.ChatBotService chatBotService

@namespace BlazorApp.Chatbot
<div class="bg-primary-50 w-1/3 h-full p-2 rounded-3xl border-2 border-primary-500 shadow fade-active relative">
    <button type="button" class="close absolute z-20 scale-110 hover:scale-125 transition-all duration-300 top-5 right-5" data-dismiss="alert" aria-label="Close" @onclick="Dismiss">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path opacity="0.5"
                d="M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z"
                fill="#1C274C" />
            <path
                d="M8.96967 8.96967C9.26256 8.67678 9.73744 8.67678 10.0303 8.96967L12 10.9394L13.9697 8.96969C14.2626 8.6768 14.7374 8.6768 15.0303 8.96969C15.3232 9.26258 15.3232 9.73746 15.0303 10.0304L13.0607 12L15.0303 13.9696C15.3232 14.2625 15.3232 14.7374 15.0303 15.0303C14.7374 15.3232 14.2625 15.3232 13.9696 15.0303L12 13.0607L10.0304 15.0303C9.73746 15.3232 9.26258 15.3232 8.96969 15.0303C8.6768 14.7374 8.6768 14.2626 8.96969 13.9697L10.9394 12L8.96967 10.0303C8.67678 9.73744 8.67678 9.26256 8.96967 8.96967Z"
                fill="#1C274C" />
        </svg>
    </button>
    <div class="mx-auto flex flex-col p-3 rounded-lg h-full w-full">
        <div class="relative h-full w-full">
            <div class="w-fit mx-auto flex space-x-4">
                <div class="flex items-center">
                    <Image ImageName="Logo-small.svg" css="h-12 w-12" alt="Logo" />
                    <h1 class="text-2xl text-blue-500">Ask me Anything!</h1>
                </div>
                <Image ImageName="Robert_Sitting_Panel.png" css="h-20 w-20" alt="Robert sitting on panel" />
            </div>
            <div id="chatContainer" class="w-full h-[77.2%] py-2 absolute top-16 z-10 overflow-scroll  space-y-3 my-3">
                @foreach (Message mess in _conversationHistory)
                {
                    <div>
                        @if (mess.role == "user")
                        {
                            <div class="ml-auto text-white w-fit rounded-t-lg rounded-l-lg bg-primary-500 p-3">
                                @mess.content
                            </div>
                        }
                        else if (mess.role != "system")
                        {
                            <div class="mr-auto text-black w-fit rounded-t-lg rounded-r-lg bg-primary-200 p-3">
                                @mess.content
                            </div>
                        }
                    </div>
                }
                @if (typing) {
                    <div class="mr-auto text-black w-fit rounded-t-lg rounded-r-lg bg-primary-200 p-3">
                        <Image ImageName="typing.gif" css="w-10" alt="typing" />
                    </div>
                }
            </div>
        </div>
        <div class="mt-3 flex w-full px-4 pt-4 pb-4  rounded-b-3xl absolute bottom-0 left-0 bg-white space-x-2 items-center">
            <input type="text" id="message" rows="1"
                class="block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                placeholder="Do you have any questions for us?" @bind-value="_userQuestion" @bind-value:event="oninput"
                @onkeypress="HandleKeyPress" />
            <div @onclick="SendMessage">
                <Button style="pill">
                    <content>
                        <p class="text-sm font-semibold hover:text-white">Send</p>
                    </content>
                </Button>
            </div>

        </div>
    </div>
</div>

@code {
    private bool typing = false;
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private string _userQuestion = string.Empty;
    private readonly List<Message> _conversationHistory = new();
    private readonly string _chatBotKnowledgeScope = "" +
    "Your name is Robert, You are an assistant that help users navigate and use a website called Blue Skies" +
    "When user's question is not related to solar or BlueSkies, reply repond with \"Do you have questions on Blue Skies?\"" + 
    "When a user then replies with \"No\", reply with \"Sorry, I can only answer questions related to solar.\"" +
    "A solar score measures your property's solar potential based on sunlight availability, shading, and local weather patterns. It estimates of solar panels in generating electricity for your location. "+
    "The appliances you can run on solar depend on system size. Small setups may power lights, fans, laptops, and smartphones. Larger ones can run refrigerators, air conditioners, washers, and EVs."+
    "Solar panels offer renewable energy, reduced bills, eco-friendliness, energy independence, incentives, and low maintenance." +
    "Will solar panels work during cloudy or rainy days? Yes, they work but with reduced efficiency. They generate power from sunlight, even on overcast days, though less than under direct sunlight."+
    "How much money can I save by using solar energy? Savings vary by location, panel size, electricity rates, and incentives. Long-term, solar can substantially lower bills and may lead to surplus energy sales."+
    "Hiring a professional installer is strongly recommended as they ensure safety, handle permits, and maintain warranties, providing peace of mind for your solar panel installation.";
    private string? chatbotApiKey = "";
    private SharedUtils.locationDataClass locationDataClass = new SharedUtils.locationDataClass();
    protected override void OnInitialized()
    {
    chatbotApiKey = Environment.GetEnvironmentVariable("CHATBOT_API_KEY");
    if(chatbotApiKey == null) {
        return;
    }
    _conversationHistory.Add(new Message { role = "system", content = _chatBotKnowledgeScope });
    _conversationHistory.Add(new Message { role = "assistant", content = "Hi! I'm Robert. Ask me Anything!" });
    @* return base.OnInitializedAsync(); *@
    }

    [JSInvokable]
    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatContainer");

    }

    private void Dismiss()
    {
        Console.WriteLine("Dismiss chatbot");
        _userQuestion = string.Empty;
        chatBotService.HideChatBot();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key is not "Enter") return;
        await SendMessage();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_userQuestion)) return;
        AddUserQuestionToConversation();
        StateHasChanged();
        await ScrollToBottom();
        ClearInput();
        await CreateCompletion();
        StateHasChanged();
        await ScrollToBottom();
    }

    private void AddUserQuestionToConversation() {
        _conversationHistory.Add(new Message { role = "user", content = _userQuestion });
    } 
      
    private async Task CreateCompletion()
    {
        await Task.Delay(500);
        typing = true;
        StateHasChanged();
        await ScrollToBottom();
        var postData = new
        {
        model = "gpt-3.5-turbo",
        messages = _conversationHistory.ToArray(),
        };

        string jsonContent = JsonConvert.SerializeObject(postData);

        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "https://api.openai.com/v1/chat/completions");
        request.Headers.Add("Authorization", "Bearer " + chatbotApiKey);
        var content = new StringContent(jsonContent, null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
        var chatCompletionResponse = await response.Content.ReadFromJsonAsync<ChatbotResponse>();
        Message? temp = chatCompletionResponse!.choices!.First().message;
        _conversationHistory.Add(temp!);
        }
        else
        {
        _conversationHistory.Add(new Message { role = "assitant", content = "Sorry, I don't know the answer that." });
        }
        typing = false;
        StateHasChanged();
    }

    private void ClearInput()
    {
        _userQuestion = string.Empty;

    }
}
