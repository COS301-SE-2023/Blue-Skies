@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@using BlazorApp.EnviromentImpact
@namespace BlazorApp.FancyData


<Card>
    <Heading>
        <Header>
            <h1 class="text-xl">Fancy Data</h1>
        </Header>
        <Subscript>
            <p>More information about your location</p>
        </Subscript>
    </Heading>
    <div class="w-full space-y-3">
        <div class="relative md:flex w-fit mx-auto md:space-x-5 items-center">
            <Image ImageName="Robert_Sitting.png" css="absolute left-96 top-20 z-0 h-20 rotate-[60deg]" alt="Rob" /> 
            <div class="z-10">
                <h1 class="text-primary-950 font-semibold text-center text-xl">Annual Flux Map</h1>
                <Image ImageName="@satteliteImageSrc" alt="sattelite Image" />
            </div>
            <div>

                <h1 class="text-center text-primary-950 font-semibold text-xl">Monthly Flux Map</h1>
                @if(monthlyFluxMap is not null){
                <div class="w-fit mx-auto">
                    <div class="w-fit mx-auto">
                        <div class="flex space-x-3 mt-10">
                            <div class="my-auto h-fit hover:cursor-pointer" @onclick="DecrementMonthImage">
                                <Image ImageName="Arrow-Left.svg" alt="Left Arrow"
                                    css="h-12 w-12 rounded-full p-2 hover:bg-slate-200 hover:cursor-pointer" />
                            </div>
                            <div class="flex-col">
                                <Image ImageName="@monthlyFluxMap[@currentImageIndex]" alt="sattelite Image"
                                    css="h-[300px]" />
                                <p class="text-center">@monthNames[@currentImageIndex]</p>
                            </div>

                            <div class="my-auto h-fit hover:cursor-pointer" @onclick="IncreamentMonthImage">
                                <Image ImageName="Arrow-Right.svg" alt="Right Arrow"
                                    css="h-12 w-12 rounded-full p-2 hover:bg-slate-200 hover:cursor-pointer" />
                            </div>
                        </div>
                    </div>
                </div>
                }
                else{
                <p>Monthly Flux Map is not available</p>
                }
            </div>
        </div>
        <div>
           
        </div>
        <div class="w-full flex">
            <div class="md:w-1/2">
                <SolarIrradiationPerMonth monthlySolarRadiation="@solarRadiationPerMonth" animated="false"/>
            </div>
             @* solarPanelsData *@
            @if(solarPanelsData is not null){

                <div class="w-1/2 h-fit my-auto">
                    <h1 class="text-primary-950 font-semibold text-center text-xl">Rooftop Stats</h1>
                    <div class="mx-auto space-y-4 w-fit">
                        @{
                        double squaredArea = Math.Round(wholeroofstats!.areaMeters2);
                        double maxArraArea = Math.Round(solarPanelsData!.solarPotential!.maxArrayAreaMeters2);
                        double maxHoursSunlightPerDay = Math.Round(solarPanelsData!.solarPotential!.maxSunshineHoursPerYear / 365, 2);
                        }
                        <IconToolTip imageName="Home.svg" tooltipMessage="The size of your roof">
                            <content>
                                <p>@squaredArea m&sup2;</p>
                            </content>
                        </IconToolTip>
                        <IconToolTip imageName="SolarPanels.svg" tooltipMessage="The maximum number of panels you can have">
                            <content>
                                <p>@solarPanelsData!.solarPotential!.maxArrayPanelsCount</p>
                            </content>
                        </IconToolTip>
                        <IconToolTip imageName="Area.svg" tooltipMessage="The maximum area that you can put solar panels">
                            <content>
                                <p>@maxArraArea m&sup2;</p>
                            </content>
                        </IconToolTip>
                        <IconToolTip imageName="Sun-outline.svg" tooltipMessage="The maximum number of hours of sunlight per day">
                            <content>
                                <p>@maxHoursSunlightPerDay h</p>
                            </content>
                        </IconToolTip>
                    </div>
                </div>
            }
            else{
            <p>Solar Panels Data is not available</p>
            }
        </div>
        <div>
            <ElevationGraph elevationValues="@horisonElevationData" />
        </div>
        <div>
            <EnviromentImpact annualKWGenerated="@annualKWGenerated" />
        </div>
    </div>

</Card>

@code {
    [Parameter]
    public byte[]? monthlyFluxData { get; set; }

    [Parameter]
    public byte[]? maskData { get; set; }

    [Parameter]
    public string? horisonElevationData { get; set; }

    [Parameter]
    public byte[]? satteliteImageData { get; set; }

    [Parameter]
    public byte[]? annualFluxData { get; set; }

    [Parameter]
    public RooftopInformationModel? solarPanelsData { get; set; }

    private DataHandlers.RooftopDataHandler rooftopDataHandler = new DataHandlers.RooftopDataHandler();
    private DataHandlers.SolarDataHandler solarDataHandler = new DataHandlers.SolarDataHandler();
    private string? satteliteImageSrc = "";
    private string?[]? monthlyFluxMap = new string[12];
    private string[] monthNames = new string[12]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

    private int currentImageIndex = 0;

    private double[] solarRadiationPerMonth = new double[12];
    private double annualKWGenerated = 0;

    private Wholeroofstats? wholeroofstats = null;

    protected override void OnInitialized()
    {   
        if(annualFluxData is not null && satteliteImageData is not null && maskData is not null && monthlyFluxData is not null) {
            satteliteImageSrc = rooftopDataHandler.GetAnnualFluxMap(annualFluxData, satteliteImageData, maskData);
            monthlyFluxMap = rooftopDataHandler.GetMonthlyFluxMap(monthlyFluxData, satteliteImageData, maskData);
            solarRadiationPerMonth = solarDataHandler.getMontlySolarRadiation(monthlyFluxData, maskData, true);
        }
        if(solarPanelsData is not null){
            wholeroofstats = solarPanelsData!.solarPotential!.wholeRoofStats;
            annualKWGenerated = solarDataHandler.getAnnualKwGenerated(12, solarPanelsData);
            Console.WriteLine("Annual solar panel data:" + annualKWGenerated);
        }

    }

    private void IncreamentMonthImage(){
        if(currentImageIndex < monthlyFluxMap!.Length - 1){
            currentImageIndex++;
        }
    }
    private void DecrementMonthImage(){
        if(currentImageIndex > 0){
            currentImageIndex--;
        }   
    }
} 
