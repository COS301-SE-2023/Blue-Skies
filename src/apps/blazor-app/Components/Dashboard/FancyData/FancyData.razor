@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore


@namespace BlazorApp.FancyData


<Card>
    <Heading>
        <Header>
            <h1 class="text-xl">Fancy Data</h1>
        </Header>
        <Subscript>
            <p>More information about your location</p>
        </Subscript>
    </Heading>
    <div class="w-full space-y-3">
        <div class="md:flex w-fit mx-auto md:space-x-5 items-center">
            <div>
                <h1 class="text-primary-950 font-semibold text-center text-xl">Annual Flux Map</h1>
                <Image ImageName="@satteliteImageSrc" alt="sattelite Image" />
            </div>
            <div>
                
                <h1 class="text-center text-primary-950 font-semibold text-xl">Monthly Flux Map</h1>
                @if(monthlyFluxMap is not null){
                <div class="w-fit mx-auto">
                    <div class="w-fit mx-auto">
                        <div class="flex space-x-3 mt-10">
                            <div class="my-auto h-fit hover:cursor-pointer" @onclick="DecrementMonthImage">
                                <Image ImageName="Arrow-Left.svg" alt="Left Arrow"
                                    css="h-12 w-12 rounded-full p-2 hover:bg-slate-200 hover:cursor-pointer" />
                            </div>
                            <div class="flex-col">
                                <Image ImageName="@monthlyFluxMap[@currentImageIndex]" alt="sattelite Image"
                                    css="h-[300px]" />
                                <p class="text-center">@monthNames[@currentImageIndex]</p>
                            </div>

                            <div class="my-auto h-fit hover:cursor-pointer" @onclick="IncreamentMonthImage">
                                <Image ImageName="Arrow-Right.svg" alt="Right Arrow"
                                    css="h-12 w-12 rounded-full p-2 hover:bg-slate-200 hover:cursor-pointer" />
                            </div>
                        </div>
                    </div>
                </div>
                }
                else{
                <p>Monthly Flux Map is not available</p>
                }
            </div>
        </div>
        <div>
            @* solarPanelsData *@
            @if(solarPanelsData is not null){
            <div class="w-full">
                <div class="w-1/2 border">
                    <h1 class="text-primary-950 font-semibold text-center text-xl">Rooftop Stats</h1>
                    <div class="mx-auto">
                        <div class="flex gap-3 w-full relative justify-center items-center">
                            <div class="group">
                                <Image ImageName="Home.svg" alt="Info"
                                    css="w-7 hover:-translate-y-1 transition-all duration-300" />
                                <div
                                    class="absolute hidden fade-in-active w-fit -top-10 translate-x-10 max-w-md  group-hover:block transition-all duration-300 ease-in-out text-sm  bg-primary-200 shadow rounded-t-2xl rounded-r-2xl p-4 group-hover:-translate-y-10 ">
                                    <p class="text-gray-900">The size of your roof
                                    </p>
                                </div>
                            </div>
                            @{double squaredArea = Math.Round(@wholeroofstats!.areaMeters2);}
                            <p>@squaredArea m&sup2;</p>
                        </div>
                    </div>
                </div>
            </div>
            }
            else{
            <p>Solar Panels Data is not available</p>
            }
        </div>
        <div class="w-full">
            <div class="md:w-1/2">
                <SolarIrradiationPerMonth monthlySolarRadiation="@solarRadiationPerMonth" />
            </div>
        </div>

        <div>
            <ElevationGraph elevationValues="@horisonElevationData" />
        </div>
    </div>

</Card>

@code {
    [Parameter]
    public byte[]? monthlyFluxData { get; set; }

    [Parameter]
    public byte[]? maskData { get; set; }

    [Parameter]
    public string? horisonElevationData { get; set; }

    [Parameter]
    public byte[]? satteliteImageData { get; set; }

    [Parameter]
    public byte[]? annualFluxData { get; set; }

    [Parameter]
    public RooftopInformationModel? solarPanelsData { get; set; }

    private DataHandlers.RooftopDataHandler rooftopDataHandler = new DataHandlers.RooftopDataHandler();
    private DataHandlers.SolarDataHandler solarDataHandler = new DataHandlers.SolarDataHandler();
    private string? satteliteImageSrc = "";
    private string?[]? monthlyFluxMap = new string[12];
    private string[] monthNames = new string[12]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

    private int currentImageIndex = 0;

    private double[] solarRadiationPerMonth = new double[12];

    private Wholeroofstats? wholeroofstats = null;

    @* OnInitialized *@
    protected override void OnInitialized()
    {   
        if(annualFluxData is not null && satteliteImageData is not null && maskData is not null && monthlyFluxData is not null) {
            satteliteImageSrc = rooftopDataHandler.GetAnnualFluxMap(annualFluxData, satteliteImageData, maskData);
            monthlyFluxMap = rooftopDataHandler.GetMonthlyFluxMap(monthlyFluxData, satteliteImageData, maskData);
            solarRadiationPerMonth = solarDataHandler.getMontlySolarRadiation(monthlyFluxData, maskData, true);
        }
        if(solarPanelsData is not null){
            wholeroofstats = solarPanelsData!.solarPotential!.wholeRoofStats;
        }

    }

    private void IncreamentMonthImage(){
        if(currentImageIndex < monthlyFluxMap!.Length - 1){
            currentImageIndex++;
            StateHasChanged();
        }
       
    }
    private void DecrementMonthImage(){
        if(currentImageIndex > 0){
            currentImageIndex--;
            StateHasChanged();
        }
        
    }
} 
