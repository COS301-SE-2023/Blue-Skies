@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager navigationManager
@inject BlazorApp.Data.TooltipService tooltipService
@using BlazorApp.EnviromentImpact
@using BlazorApp.BestSolarPanels
@namespace BlazorApp.FancyData

@{
    Uri uri = new Uri(navigationManager.Uri);
    string[] segments = uri.Segments;
    currentPage = segments[segments.Length - 1];
}

    <div class="w-full">
        @if (currentPage == "dashboard") {
            <Heading>
                <Header>
                    <h1 class="text-xl">Advanced Calculations</h1>
                </Header>
                <Subscript>
                    <p>More information about your location. The flux map shows the your roof's sunlight exposure.</p>
                </Subscript>
            </Heading>
        } else {
            <Heading css="mb-8 mt-16 max-w-3xl mx-auto">
                <Superscript><h1 class="text-center">Fancy Data and</h1></Superscript >
                <Header><h1 class="text-center">Advanced Calculations</h1></Header>
                <Subscript><p class="text-center">More information about your location. The flux map shows the your roof's sunlight exposure."</p></Subscript>
            </Heading>
        }

        <div class="w-full flex justify-center items-center gap-4">
            <div class="flex w-full flex-col gap-4 p-20">
                    <h1 class="text-primary-800 font-semibold text-center text-xl">Annual Flux Map</h1>
                    <p class="text-lg text-center text-gray-500">Visual representation of the annual sunlight exposure on your rooftop.</p>
                    <Image ImageName="@satteliteImageSrc" css="2/3" alt="sattelite Image" />
                    <div class="flex justify-between w-full">
                        <div class="flex gap-2">
                            <div class="w-5 h-5 my-auto border border-primary-200 rounded-lg bg-red-accent-500"></div>
                            <p class="text-primary-800 my-auto">High sunlight exposure</p>
                        </div>
                        <div class="flex gap-2">
                            <div class="w-5 h-5 my-auto border border-primary-200 rounded-lg bg-yellow-accent-500"></div>
                            <p class="text-primary-800 my-auto">Low sunlight exposure</p>
                        </div>
                    </div>
            </div>

            <div class="flex flex-col gap-4 justify-center w-full">
                <EnviromentImpact annualKWGenerated="@annualKWGenerated" />

                @if(solarPanelsData is not null){
                    <Card css="w-full flex flex-col gap-10">
                        <h1 class="text-primary-950 font-semibold text-start text-xl">Rooftop Stats</h1>
                        <div class="grid grid-cols-2 justify-center items-center gap-2">
                            @{
                                double squaredArea = Math.Round(wholeroofstats!.areaMeters2);
                                double maxArraArea = Math.Round(solarPanelsData!.solarPotential!.maxArrayAreaMeters2);
                                double maxHoursSunlightPerDay =
                                Math.Round(solarPanelsData!.solarPotential!.maxSunshineHoursPerYear / 365, 2);
                            }

                                <div class="flex w-full gap-4 has-tooltip">
                                    <Tooltip>
                                        <p>@tooltipService.SetCustomTooltip("Rooftop area")</p>
                                    </Tooltip>
                                    <Image ImageName="Home.svg" alt="Home Icon" css="w-8 h-8" />
                                    <p class="my-auto">@squaredArea m&sup2;</p>
                                </div>

                                <div class="flex w-full gap-4 has-tooltip">
                                    <Tooltip>
                                        <p>@tooltipService.SetCustomTooltip("Max solar panels that will fit")</p>
                                    </Tooltip>
                                    <Image ImageName="SolarPanels.svg" alt="Solar Panels Icon" css="w-8 h-8" />
                                    <p class="my-auto">@solarPanelsData!.solarPotential!.maxArrayPanelsCount</p>
                                </div>

                                <div class="flex w-full gap-4 has-tooltip">
                                    <Tooltip>
                                        <p>@tooltipService.SetCustomTooltip("Area of the roof, suitable for solar panels")</p>
                                    </Tooltip>
                                    <Image ImageName="Area.svg" alt="Area Icon" css="w-8 h-8" />
                                    <p class="my-auto">@maxArraArea m&sup2;</p>
                                </div>

                                <div class="flex w-full gap-4 has-tooltip">
                                     <Tooltip>
                                        <p>@tooltipService.SetCustomTooltip("Total usable sunlight times per day")</p>
                                    </Tooltip>
                                    <Image ImageName="Sun-outline.svg" alt="Sun Icon" css="w-8 h-8" />
                                    <p class="my-auto">@maxHoursSunlightPerDay h</p>
                                </div>
                        </div>
                    </Card>
                }
                else{
                <p>Solar Panels Data is not available</p>
                }
            </div>
        </div>

        <div class="w-full flex justify-center items-center gap-4 mt-5">
            <div class="flex w-2/3 flex-col justify-center items-center gap-3">
                <h1 class="text-center text-primary-800 font-semibold text-xl">Monthly Flux Map</h1>
                @if(monthlyFluxMap is not null) {
                    <p class="text-center text-lg">@monthNames[@currentImageIndex]</p>
                    
                    <div class="flex justify-center gap-1 items-center w-full">
                        <div class="my-auto" @onclick="DecrementMonthImage">
                            <Image ImageName="Arrow-Left.svg" alt="Left Arrow" css="h-12 w-12 transition-all duration-300 rounded-lg p-2 hover:bg-primary-200 hover:cursor-pointer" />
                        </div>
                            <Image ImageName="@monthlyFluxMap[@currentImageIndex]" alt="sattelite Image" css="w-3/4" />
                        <div class="my-auto" @onclick="IncreamentMonthImage">
                            <Image ImageName="Arrow-Right.svg" alt="Right Arrow" css="h-12 w-12 transition-all duration-300 rounded-lg p-2 hover:bg-primary-200 hover:cursor-pointer" />
                        </div>
                    </div>
                }
                else{
                    <p>Monthly Flux Map is not available</p>
                } 
            </div>
            <div class="w-full">
                    <h1 class="text-center text-primary-800 font-semibold text-xl">Solar Irradiance Per Month</h1>
                    <SolarIrradiationPerMonth currentMonth="@currentImageIndex" monthlySolarRadiation="@solarRadiationPerMonth" animated="false" />
            </div>
        </div>

        <div class="flex w-full justify-center gap-5 items-center mt-32">
            <div class="w-2/3">
                <h1 class="text-center text-primary-800 font-semibold text-xl">Sun path over the horizon</h1>
                <p class="text-gray-500 mt-3 mb-4 text-center">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Asperiores cupiditate impedit ipsam temporibus, dignissimos nostrum.</p>
                <ElevationGraph elevationValues="@horisonElevationData" />
            </div>
            <Card css="w-1/3 flex flex-col gap-10">
                <div class="flex gap-3">
                    <div class="w-5 h-5 border border-primary-200 rounded-lg bg-red-accent-500 my-auto"></div>
                    <p class="text-base text-primary-800 my-auto">Your location</p>
                </div>
                <div class="flex gap-3">
                    <div class="w-5 h-5 border border-primary-200 rounded-lg bg-primary-900 my-auto"></div>
                    <p class="text-base text-primary-800 my-auto">Horizon</p>
                </div>
                <div class="flex gap-3">
                    <div class="w-5 h-5 border border-primary-200 rounded-lg bg-orange-accent-200 my-auto"></div>
                    <p class="text-base text-primary-800 my-auto">Sun - Winter Solstice</p>
                </div>
                <div class="flex gap-3">
                    <div class="w-5 h-5 border border-primary-200 rounded-lg bg-orange-accent-500 my-auto"></div>
                    <p class="text-base text-primary-800 my-auto">Sun - Spring Equinox</p>
                </div>
                <div class="flex gap-3">
                    <div class="w-5 h-5 border border-primary-200 rounded-lg bg-orange-accent-600 my-auto"></div>
                    <p class="text-base text-primary-800 my-auto">Sun - Summer Solstice</p>
                </div>

            </Card>
        </div>
    </div>


@code {
    [Parameter]
    public byte[]? monthlyFluxData { get; set; }

    [Parameter]
    public byte[]? maskData { get; set; }

    [Parameter]
    public string? horisonElevationData { get; set; }

    [Parameter]
    public byte[]? satteliteImageData { get; set; }

    [Parameter]
    public byte[]? annualFluxData { get; set; }
    [Parameter]
    public int numSolarPanels { get; set; }

    [Parameter]
    public RooftopInformationModel? solarPanelsData { get; set; }
    public string? currentPage { get; set; }

    private DataHandlers.RooftopDataHandler rooftopDataHandler = new DataHandlers.RooftopDataHandler();
    private DataHandlers.SolarDataHandler solarDataHandler = new DataHandlers.SolarDataHandler();
    private string? satteliteImageSrc = "";
    private string?[]? monthlyFluxMap = new string[12];
    private string[] monthNames = new string[12]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

    private int currentImageIndex = 0;

    private double[] solarRadiationPerMonth = new double[12];
    private double annualKWGenerated = 0;

    private Wholeroofstats? wholeroofstats = null;
    private List<Solarpanel?> solarPanels = new List<Solarpanel?>();

    protected override void OnParametersSet()
    {   
        if(annualFluxData is not null && satteliteImageData is not null && maskData is not null && monthlyFluxData is not null) {
            satteliteImageSrc = rooftopDataHandler.GetAnnualFluxMap(annualFluxData, satteliteImageData, maskData);
            monthlyFluxMap = rooftopDataHandler.GetMonthlyFluxMap(monthlyFluxData, satteliteImageData, maskData);
            solarRadiationPerMonth = solarDataHandler.getMontlySolarRadiation(monthlyFluxData, maskData, true);
            solarPanels = solarDataHandler.getBestSolarPanels(numSolarPanels, solarPanelsData);
        }
        if(solarPanelsData is not null){
            wholeroofstats = solarPanelsData!.solarPotential!.wholeRoofStats;
            annualKWGenerated = solarDataHandler.getAnnualKwGenerated(numSolarPanels, solarPanelsData);
        }
    }

    private void IncreamentMonthImage(){
        if(currentImageIndex < monthlyFluxMap!.Length - 1){
            currentImageIndex++;
        } else if (currentImageIndex == monthlyFluxMap!.Length - 1)
        {
            currentImageIndex = 0;
        }
    }
    private void DecrementMonthImage(){
        if(currentImageIndex > 0){
            currentImageIndex--;
        } else if (currentImageIndex == 0)
        {
            currentImageIndex = monthlyFluxMap!.Length - 1;
        }
    }
} 
