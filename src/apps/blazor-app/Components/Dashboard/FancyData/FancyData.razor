@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager navigationManager
@inject BlazorApp.Data.TooltipService tooltipService
@using BlazorApp.EnviromentImpact
@using BlazorApp.BestSolarPanels
@using BlazorApp.Components.Dashboard.FancyData.Skeletons
@namespace BlazorApp.FancyData

@{
    Uri uri = new Uri(navigationManager.Uri);
    string[] segments = uri.Segments;
    currentPage = segments[segments.Length - 1];
}

    <div class="w-full">
        
            <Heading css="mb-8 mt-16 max-w-3xl mx-auto hidden md:block">
                <Superscript><h1 class="text-center">Fancy Data and</h1></Superscript >
                <Header><h1 class="text-center">Advanced Calculations</h1></Header>
                <Subscript><p class="text-center">More information about your location. The flux map shows the your roof's sunlight exposure.</p></Subscript>
            </Heading>

            <Heading css="md:hidden mb-8 text-center md:text-left">
                <Header>
                    <h1 class="text-3xl md:2xl">Appliances</h1>
                </Header>
                <Subscript>
                    <p>What appliances do you want to run on solar power?</p>
                </Subscript>
            </Heading>

        <div class="w-full md:flex justify-center items-center md:px-4 md:gap-2">
            @if (annualFluxDataReceived)
            {
            <div class="flex md:w-1/2 flex-col gap-4 md:p-20">
                    <h1 class="text-primary-800 font-semibold text-center text-xl">Annual Flux Map</h1>
                    <p class="text-lg text-center text-gray-500">Visual representation of the annual sunlight exposure on your rooftop.</p>
                    <Image ImageName="@satteliteImageSrc" css="w-full sm:w-3/4 mx-auto md:w-full" alt="sattelite Image" />
                    <div class="flex justify-between w-full">
                        <div class="flex gap-2">
                            <div class="w-5 h-5 my-auto border border-primary-200 rounded-lg bg-red-accent-500"></div>
                            <p class="text-primary-800 my-auto">High sunlight exposure</p>
                        </div>
                        <div class="flex gap-2">
                            <div class="w-5 h-5 my-auto border border-primary-200 rounded-lg bg-yellow-accent-500"></div>
                            <p class="text-primary-800 my-auto">Low sunlight exposure</p>
                        </div>
                    </div>
            </div>
            } else {
                <AnnualFluxSkeleton />
            }

            <div class="flex mt-8 md:mt-0 flex-col gap-4 justify-center md:w-1/2 text-sm md:text-xl">
            @if (solarPanelsDataReceived)
            {
                <EnviromentImpact annualKWGenerated="@annualKWGenerated" />
                @if(solarPanelsData != null){
                    <Card css="w-full flex flex-col gap-10">
                        <h1 class="text-primary-950 font-semibold text-start">Rooftop Stats</h1>
                        <div class="grid grid-cols-2 justify-center items-center gap-2">
                            @{
                                double squaredArea = Math.Round(wholeroofstats!.areaMeters2);
                                double maxArraArea = Math.Round(solarPanelsData!.solarPotential!.maxArrayAreaMeters2);
                                double maxHoursSunlightPerDay =
                                Math.Round(solarPanelsData!.solarPotential!.maxSunshineHoursPerYear / 365, 2);
                            }

                            <div class="flex w-full gap-4 has-tooltip">
                                <Tooltip>
                                    <p>@tooltipService.SetCustomTooltip("Rooftop area")</p>
                                </Tooltip>
                                <Image ImageName="Home.svg" alt="Home Icon" css="w-5 h-5 md:w-8 md:h-8" />
                                <p class="my-auto">@squaredArea m&sup2;</p>
                            </div>

                            <div class="flex w-full gap-4 has-tooltip">
                                <Tooltip>
                                    <p>@tooltipService.SetCustomTooltip("Max solar panels that will fit")</p>
                                </Tooltip>
                                <Image ImageName="SolarPanels.svg" alt="Solar Panels Icon" css="w-5 h-5 md:w-8 md:h-8" />
                                <p class="my-auto">@solarPanelsData!.solarPotential!.maxArrayPanelsCount</p>
                            </div>

                            <div class="flex w-full gap-4 has-tooltip">
                                <Tooltip>
                                    <p>@tooltipService.SetCustomTooltip("Area of the roof, suitable for solar panels")</p>
                                </Tooltip>
                                <Image ImageName="Area.svg" alt="Area Icon" css="w-5 h-5 md:w-8 md:h-8" />
                                <p class="my-auto">@maxArraArea m&sup2;</p>
                            </div>

                            <div class="flex w-full gap-4 has-tooltip">
                                <Tooltip>
                                    <p>@tooltipService.SetCustomTooltip("Total usable sunlight times per day")</p>
                                </Tooltip>
                                <Image ImageName="Sun-outline.svg" alt="Sun Icon" css="w-5 h-5 md:w-8 md:h-8" />
                                <p class="my-auto">@maxHoursSunlightPerDay h</p>
                            </div>
                        </div>
                    </Card>
                }
                else
                {
                    <p>Solar Panels Data != available</p>
                }
            }
            else
            {
                <EnviromentImpactSkeleton />
            }
        </div>
    </div>
        <div class="w-full lg:flex justify-center items-center md:px-4 gap-4 mt-5">
            @if (monthlyFluxDataReceived)
            {
                <div class="flex md:w-1/2 md:mx-auto lg:w-1/3 flex-col justify-center items-center gap-3">
                    <h1 class="text-center text-primary-800 font-semibold text-xl">Monthly Flux Map</h1>
                    @if (monthlyFluxMap != null)
                    {
                        <p class="text-center text-lg">@monthNames[@currentImageIndex]</p>

                        <div class="flex justify-center gap-1 items-center w-full">
                            <div class="my-auto" @onclick="DecrementMonthImage">
                                <Image ImageName="Arrow-Left.svg" alt="Left Arrow"
                                    css="h-12 w-12 transition-all duration-300 rounded-lg p-2 hover:bg-primary-200 hover:cursor-pointer" />
                            </div>
                            @if(changingMonthlyImage == false)
                            {
                                <Image ImageName="@monthlyFluxMap[@currentImageIndex]" alt="sattelite Image" css="w-3/4 mx-auto md:w-full" />
                            }else
                            {
                                <div role="status" class="animate-pulse md:space-y-0 md:space-x-8 md:flex md:items-center w-3/4 aspect-square items-center justify-center bg-gray-300">
                                    <svg class="w-20 h-20 text-gray-200 aria-hidden=" true" xmlns="http://www.w3.org/2000/svg" fill="currentColor"
                                        viewBox="0 0 20 18">
                                        <path
                                            d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z" />
                                    </svg>
                                </div>
                            }
                            <div class="my-auto" @onclick="IncreamentMonthImage">
                                <Image ImageName="Arrow-Right.svg" alt="Right Arrow"
                                    css="h-12 w-12 transition-all duration-300 rounded-lg p-2 hover:bg-primary-200 hover:cursor-pointer" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <p>Monthly Flux Map != available</p>
                    } 
                </div>
            } else {
                <MonthlyFluxSkeleton />
            }
            <div class="w-full mt-8 md:mt-0 sm:w-auto lg:w-2/3">
                    <h1 class="text-center text-primary-800 font-semibold text-xl">Solar Irradiance Per Month</h1>
                    <SolarIrradiationPerMonth currentMonth="@currentImageIndex" monthlySolarRadiation="@solarRadiationPerMonth" animated="false" />
            </div>
    </div>

        <div class="md:flex w-full justify-center gap-5 px-4 items-center mt-32">
            <div class="md:w-2/3">
                <h1 class="text-center text-primary-800 font-semibold text-xl">Sun path over the horizon</h1>
                    <p class="text-gray-500 mt-3 mb-4 text-center">This is a graph showing the path of the sun as it travels
                     over the address during different times of the year.
                     The red dot in the center represents the address you typed in.</p>
                     <ElevationGraph elevationValues="@horisonElevationData" />
            </div>
            <Card css="md:w-1/3 mt-8 md:mt-0 mb-8 flex flex-col gap-10">
                <div class="flex gap-3">
                    <div class="w-5 h-5 border border-primary-200 rounded-lg bg-red-accent-500 my-auto"></div>
                    <p class="text-base text-primary-800 my-auto">Your location</p>
                </div>
                <div class="flex gap-3">
                    <div class="w-5 h-5 border border-primary-200 rounded-lg bg-primary-900 my-auto"></div>
                    <p class="text-base text-primary-800 my-auto">Horizon</p>
                </div>
                <div class="flex gap-3">
                    <div class="w-5 h-5 border border-primary-200 rounded-lg bg-orange-accent-200 my-auto"></div>
                    <p class="text-base text-primary-800 my-auto">Sun - Winter Solstice</p>
                </div>
                <div class="flex gap-3">
                    <div class="w-5 h-5 border border-primary-200 rounded-lg bg-orange-accent-500 my-auto"></div>
                    <p class="text-base text-primary-800 my-auto">Sun - Spring Equinox</p>
                </div>
                <div class="flex gap-3">
                    <div class="w-5 h-5 border border-primary-200 rounded-lg bg-orange-accent-600 my-auto"></div>
                    <p class="text-base text-primary-800 my-auto">Sun - Summer Solstice</p>
                </div>

        </Card>
    </div>
</div>


@code {
    private SharedUtils.locationDataClass locationDataClass = new SharedUtils.locationDataClass();

    [Parameter]
    public LocationDataModel currentLocationData { get; set; } = new LocationDataModel();
    [Parameter]
    public int numSolarPanels { get; set; }
    [Parameter]
    public CancellationTokenSource? cancellationTokenSource { get; set; }
    public byte[]? monthlyFluxData = null;
    public byte[]? maskData = null;
    public string? horisonElevationData = null;
    public byte[]? satteliteImageData = null;
    public byte[]? annualFluxData = null;
    public RooftopInformationModel? solarPanelsData = null;
    public string? currentPage { get; set; }

    private DataHandlers.RooftopDataHandler rooftopDataHandler = new DataHandlers.RooftopDataHandler();
    private DataHandlers.SolarDataHandler solarDataHandler = new DataHandlers.SolarDataHandler();
    private string? satteliteImageSrc = "";
    private string?[]? monthlyFluxMap = new string[12];
    private string[] monthNames = new string[12]{"January", "February", "March", "April", "May", "June", "July", "August",
"September", "October", "November", "December"};

    private int currentImageIndex = 0;

    private double[] solarRadiationPerMonth = new double[12];
    private double annualKWGenerated = 0;

    private Wholeroofstats? wholeroofstats = null;
    private List<Solarpanel?> solarPanels = new List<Solarpanel?>();

    private bool solarPanelsDataReceived = false;
    private bool monthlyFluxDataReceived = false;
    private bool annualFluxDataReceived = false;

    private bool changingMonthlyImage = false;


    protected override void OnParametersSet()
    {
        init();
    }

    public void init(){
        satteliteImageSrc = "";
        monthlyFluxMap = new string[12];
        annualFluxData = null;
        monthlyFluxData = null;
        annualFluxDataReceived = false;
        monthlyFluxDataReceived = false;
        if (currentLocationData != null)
        {
            if (currentLocationData.horisonElevationData != null)
            {
                horisonElevationData = currentLocationData.horisonElevationData;
            }
            if (currentLocationData.solarPanelsData != null)
            {
                solarPanelsData = currentLocationData.solarPanelsData;
            }
            SetAllVariables();
            _ = GetSatteliteImageData();
        }
    }

    private async Task GetSatteliteImageData()
    {
        if (currentLocationData != null && (cancellationTokenSource == null ||
        cancellationTokenSource.Token.IsCancellationRequested == false))
        {
            if (currentLocationData.satteliteImageData != null)
            {
                satteliteImageData = currentLocationData.satteliteImageData;
                SetAllVariables();
                _ = GetMaskData();
            } else {
                LocationDataModel? result;
                if (cancellationTokenSource == null)
                {
                    result = await locationDataClass.GetSatelliteImageData(currentLocationData.latitude, currentLocationData.longitude, currentLocationData);
                }
                else
                {
                    result = await locationDataClass.GetSatelliteImageData(currentLocationData.latitude, currentLocationData.longitude, currentLocationData, cancellationTokenSource.Token);
                }
                if (result != null)
                {
                    currentLocationData = result;
                }
                Console.WriteLine("Done retrieving Satellite Image Data");
                satteliteImageData = currentLocationData.satteliteImageData;
                SetAllVariables();
                _ = GetMaskData();
            }
        }
    }

    private async Task GetMaskData()
    {
        if (currentLocationData != null && (cancellationTokenSource == null ||
        cancellationTokenSource.Token.IsCancellationRequested == false))
        {
            if (currentLocationData.maskData == null)
            {
                LocationDataModel? result;
                if (cancellationTokenSource == null)
                {
                    result = await locationDataClass.GetMaskData(currentLocationData.latitude, currentLocationData.longitude,
                    currentLocationData);
                }
                else
                {
                    result = await locationDataClass.GetMaskData(currentLocationData.latitude, currentLocationData.longitude,
                    currentLocationData, cancellationTokenSource.Token);
                }
                if (result != null)
                {
                    currentLocationData = result;
                }
                Console.WriteLine("Done retrieving mask data");
            }
            maskData = currentLocationData.maskData;
            SetAllVariables();
            _ = GetAnnualFluxData();
        }
    }

    private async Task GetAnnualFluxData()
    {
        if (currentLocationData != null && (cancellationTokenSource == null ||
        cancellationTokenSource.Token.IsCancellationRequested == false))
        {
            if (currentLocationData.annualFluxData == null)
            {
                LocationDataModel? result;
                if (cancellationTokenSource == null)
                {
                    result = await locationDataClass.GetAnnualFluxData(currentLocationData.latitude, currentLocationData.longitude,
                    currentLocationData);
                }
                else
                {
                    result = await locationDataClass.GetAnnualFluxData(currentLocationData.latitude, currentLocationData.longitude,
                    currentLocationData, cancellationTokenSource.Token);
                }
                if (result != null)
                {
                    currentLocationData = result;
                }
                Console.WriteLine("Done retrieving annual flux data");
            }
            annualFluxData = currentLocationData.annualFluxData;
            SetAllVariables();
            _ = GetMontlyFluxData();
        }
    }

    private async Task GetMontlyFluxData()
    {
        if (currentLocationData != null && (cancellationTokenSource == null ||
        cancellationTokenSource.Token.IsCancellationRequested == false))
        {
            if (currentLocationData.monthlyFluxData == null)
            {
                LocationDataModel? result = null;
                if (cancellationTokenSource == null)
                {
                    result = await locationDataClass.GetMonthlyFluxData(currentLocationData.latitude, currentLocationData.longitude,
                    currentLocationData);
                }
                else
                {
                    result = await locationDataClass.GetMonthlyFluxData(currentLocationData.latitude, currentLocationData.longitude,
                    currentLocationData, cancellationTokenSource.Token);
                }
                if (result != null)
                {
                    currentLocationData = result;
                }
                Console.WriteLine("Done retrieving monthly flux data");
            }
            monthlyFluxData = currentLocationData.monthlyFluxData;
            SetAllVariables();
        }
    }

    private void SetAllVariables()
    {
        if (cancellationTokenSource != null && cancellationTokenSource.Token.IsCancellationRequested == true)
        {
            return;
        }
        if (satteliteImageData != null && maskData != null)
        {
            if (annualFluxData != null && satteliteImageSrc == "")
            {
                satteliteImageSrc = rooftopDataHandler.GetAnnualFluxMap(annualFluxData, satteliteImageData, maskData);
                annualFluxDataReceived = true;
            }
            if (monthlyFluxData != null && monthlyFluxMap![0] == null)
            {
                monthlyFluxMap = rooftopDataHandler.GetMonthlyFluxMap(monthlyFluxData, satteliteImageData, maskData);
                solarRadiationPerMonth = solarDataHandler.getMontlySolarRadiation(monthlyFluxData, maskData, true);
                monthlyFluxDataReceived = true;
            }
        }

        if (solarPanelsData != null && solarPanels.Count == 0)
        {
            solarPanels = solarDataHandler.getBestSolarPanels(numSolarPanels, solarPanelsData);
            wholeroofstats = solarPanelsData!.solarPotential!.wholeRoofStats;
            annualKWGenerated = solarDataHandler.getAnnualKwGenerated(numSolarPanels, solarPanelsData);
            solarPanelsDataReceived = true;
        }
        StateHasChanged();
    }

    private void IncreamentMonthImage()
    {
        changingMonthlyImage = true;
        if (currentImageIndex < monthlyFluxMap!.Length - 1)
        {
            currentImageIndex++;
        }
        else if (currentImageIndex == monthlyFluxMap!.Length - 1)
        {
            currentImageIndex = 0;
        }
        changingMonthlyImage = false;
    }
    private void DecrementMonthImage()
    {
        changingMonthlyImage = true;
        if (currentImageIndex > 0)
        {
            currentImageIndex--;
        }
        else if (currentImageIndex == 0)
        {
            currentImageIndex = monthlyFluxMap!.Length - 1;
        }
        changingMonthlyImage = false;
    }
}
