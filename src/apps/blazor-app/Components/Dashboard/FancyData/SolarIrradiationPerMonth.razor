@using ChartJs.Blazor.BarChart

@namespace BlazorApp.FancyData

<div>
    <Chart Config="barConfig"></Chart>
</div>

@code {
    [Parameter]
    public string? solarIrradiation { get; set; }
    private BarConfig? barConfig;
    private Dictionary<string, Dictionary<string, float>> data = new Dictionary<string, Dictionary<string, float>>();
    @*The data is structured as: year, month, solarIrradiation  *@
    protected override void OnParametersSet()
    {
        if (solarIrradiation != null)
        {
            AddDataToChart();
        }
    }

    /// <summary>
    /// Initializes the chart
    /// </summary>
    protected override void OnInitialized()
    {
        barConfig = new BarConfig
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Legend = new Legend
                    {
                        Position = Position.Top
                    },
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Solar Irradiance Per Month",
                        FontSize = 20,
                    },
                    Scales = new BarScales
                    {
                        YAxes = new List<CartesianAxis>
                        {
                            new LinearCartesianAxis
                            {
                                Ticks = new LinearCartesianTicks
                                {
                                    BeginAtZero = true
                                },
                                ScaleLabel = new ScaleLabel
                                {
                                    LabelString = "Solar Irradiance (W/m2)",
                                    Display = true
                                },
                            }
                        }
                    }

                }
            };

        @* Add all the months in the year *@
        barConfig.Data.Labels.Add("Jan");
        barConfig.Data.Labels.Add("Feb");
        barConfig.Data.Labels.Add("March");
        barConfig.Data.Labels.Add("April");
        barConfig.Data.Labels.Add("May");
        barConfig.Data.Labels.Add("June");
        barConfig.Data.Labels.Add("July");
        barConfig.Data.Labels.Add("Aug");
        barConfig.Data.Labels.Add("Sept");
        barConfig.Data.Labels.Add("Oct");
        barConfig.Data.Labels.Add("Nov");
        barConfig.Data.Labels.Add("Dec");
        AddDataToChart();
    }


    /// <summary>
    /// Adds the data to the chart
    /// </summary>
    private void AddDataToChart()
    {
        @* The solarIrradiation: 2020-01-26;279.1339814814815,2020-02-26;266.1259259259259,2020-02-18;197.14282407407407 *@
        if(solarIrradiation == null || barConfig == null) {
            return;
        }
        data = new Dictionary<string, Dictionary<string, float>>();
        @* Remove the last character in solarIrradiation *@
        solarIrradiation = solarIrradiation.Remove(solarIrradiation.Length - 1);
        @* Split the data *@
        string[] splitData = solarIrradiation.Split(',');
        foreach (var item in splitData)
        {
            string[] splitItem = item.Split(';');
            string[] splitDate = splitItem[0].Split('-');
            @* Check if it is in data first *@
            if (data.ContainsKey(splitDate[0]))
            {
                if(data[splitDate[0]].ContainsKey(splitDate[1])) {
                    data[splitDate[0]][splitDate[1]] = (data[splitDate[0]][splitDate[1]] + float.Parse(splitItem[1])) / 2;
                } else {
                    data[splitDate[0]].Add(splitDate[1], float.Parse(splitItem[1]));
                }
            }
            else
            {
                data.Add(splitDate[0], new Dictionary<string, float>());
                data[splitDate[0]].Add(splitDate[1], float.Parse(splitItem[1]));
            }
        }
        @* Clear the data *@
        @* /barConfig.Data.Labels.Clear(); *@
        barConfig.Data.Datasets.Clear();
        float[][] dataValuesForAllYears = new float[data.Count][];

        int i = 0;
        foreach (var item in data)
        {
            float[] dataValues = new float[12];
            foreach (var month in item.Value)
            {
                dataValues[int.Parse(month.Key) - 1] = month.Value;
            }
            dataValuesForAllYears[i++] = dataValues;

        }
        string[] backgroundColors = new string[] { "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)",  "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)",  "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)",  "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)"};
        string[] borderColors = new string[] { "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)", "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)",  "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)",  "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)" };

        for (int j = 0; j < data.Count; j++)
        {
            barConfig.Data.Datasets.Add(new BarDataset<float>
            (dataValuesForAllYears[j]){
                Label = data.Keys.ElementAt(j),
                BackgroundColor = backgroundColors[j],
                BorderColor = borderColors[j],
                BorderWidth = 1
            });
        }
    }
} 
