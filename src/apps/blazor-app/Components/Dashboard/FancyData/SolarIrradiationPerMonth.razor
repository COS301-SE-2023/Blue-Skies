@using ChartJs.Blazor.BarChart

@namespace BlazorApp.FancyData

<div>
    <Chart Config="barConfig"></Chart>
</div>

@code {
    [Parameter]
    public double[]? monthlySolarRadiation { get; set; }
    
    [Parameter]
    public bool animated { get; set; } = true;

    private BarConfig? barConfig;
    private Dictionary<string, Dictionary<string, float>> data = new Dictionary<string, Dictionary<string, float>>();
    protected override void OnParametersSet()
    {
        if (monthlySolarRadiation != null)
        {
            AddDataToChart();
        }
    }

    /// <summary>
    /// Initializes the chart
    /// </summary>
    protected override void OnInitialized()
    {
        barConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Position = Position.Top
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Solar Irradiance Per Month",
                    FontSize = 20,
                },
                Scales = new BarScales
                {
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Solar Irradiance (W/m2)",
                                Display = true
                            },
                        }
                    }
                }
            }
        };

        if (!animated)
        {
            barConfig.Options.Animation = new Animation
            {
                Duration = 0
            };
        }
        
        @* Add all the months in the year *@
        barConfig.Data.Labels.Add("Jan");
        barConfig.Data.Labels.Add("Feb");
        barConfig.Data.Labels.Add("March");
        barConfig.Data.Labels.Add("April");
        barConfig.Data.Labels.Add("May");
        barConfig.Data.Labels.Add("June");
        barConfig.Data.Labels.Add("July");
        barConfig.Data.Labels.Add("Aug");
        barConfig.Data.Labels.Add("Sept");
        barConfig.Data.Labels.Add("Oct");
        barConfig.Data.Labels.Add("Nov");
        barConfig.Data.Labels.Add("Dec");
        AddDataToChart();
    }


    /// <summary>
    /// Adds the data to the chart
    /// </summary>
    private void AddDataToChart()
    {

        if(barConfig == null || monthlySolarRadiation == null)
        {
            return;
        }

        barConfig.Data.Datasets.Clear();

        string[] backgroundColors = new string[] { "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)",  "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)",  "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)",  "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)"};
        string[] borderColors = new string[] { "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)", "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)",  "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)",  "rgba(255,193,8, 1)", "rgba(246,135,18, 1)", "rgba(0,15,82, 1)" };

        barConfig.Data.Datasets.Add(new BarDataset<double>
        (monthlySolarRadiation){
            Label = "Solar Irradiance Per Month",
            BackgroundColor = backgroundColors[0],
            BorderColor = borderColors[0],
            BorderWidth = 1
        });
    }
} 
