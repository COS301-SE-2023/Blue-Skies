@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.RadarChart

@namespace BlazorApp.FancyData

<div>
    <Chart Config="barConfig"></Chart>
</div>

@code {
    [Parameter]
    public string? solarIrradiation { get; set; }
    private BarConfig? barConfig;
    private Dictionary<string, float> data = new Dictionary<string, float>();
        @* OnParameterSet *@
    protected override void OnParametersSet()
    {
        if (solarIrradiation != null)
        {
            AddDataToChart();
        }
    }
    @* OnInitializedAsync *@
    protected override async Task OnInitializedAsync()
    {
        barConfig = new BarConfig
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Legend = new Legend
                    {
                        Position = Position.Top
                    },
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Solar Irradiance Per Month",
                        FontSize = 20,
                    },
                    Scales = new BarScales
                    {
                        YAxes = new List<CartesianAxis>
                        {
                            new LinearCartesianAxis
                            {
                                Ticks = new LinearCartesianTicks
                                {
                                    BeginAtZero = true
                                },
                                ScaleLabel = new ScaleLabel
                                {
                                    LabelString = "Solar Irradiance (W/m2)",
                                    Display = true
                                },
                            }
                        }
                    }

                }
            };

        @* Add all the months in the year *@
        barConfig.Data.Labels.Add("Jan");
        barConfig.Data.Labels.Add("Feb");
        barConfig.Data.Labels.Add("March");
        barConfig.Data.Labels.Add("April");
        barConfig.Data.Labels.Add("May");
        barConfig.Data.Labels.Add("June");
        barConfig.Data.Labels.Add("July");
        barConfig.Data.Labels.Add("Aug");
        barConfig.Data.Labels.Add("Sept");
        barConfig.Data.Labels.Add("Oct");
        barConfig.Data.Labels.Add("Nov");
        barConfig.Data.Labels.Add("Dec");
        AddDataToChart();
    }


    @* AddDataToChart *@
    private void AddDataToChart()
    {
        @* The solarIrradiation: 2020-01-26;279.1339814814815,2020-02-26;266.1259259259259,2020-02-18;197.14282407407407 *@
        @* Remove the last character in solarIrradiation *@
        solarIrradiation = solarIrradiation.Remove(solarIrradiation.Length - 1);
        @* Split the data *@
        string[] splitData = solarIrradiation.Split(',');
        foreach (var item in splitData)
        {
            string[] splitItem = item.Split(';');
            string dateByYearMonth = splitItem[0].Substring(0, 7);
            @* Check if it is in data first *@
            if (data.ContainsKey(dateByYearMonth))
            {
                data[dateByYearMonth] = (data[dateByYearMonth] + float.Parse(splitItem[1])) / 2;
            }
            else
            {
                data.Add(dateByYearMonth, float.Parse(splitItem[1]));
            }
        }
        @* Clear the data *@
        @* /barConfig.Data.Labels.Clear(); *@
        barConfig.Data.Datasets.Clear();
        float[] dataValues2021 = new float[12];
        float[] dataValues2022 = new float[12];
        float[] dataValues2020 = new float[12];
        int count2022 = 0;
        int count2021 = 0;
        int count2020 = 0;
        foreach (var item in data)
        {
            if(item.Key.Contains("2022")){
                dataValues2022[count2022] = item.Value;
                count2022++; 
            }else if(item.Key.Contains("2021")){
                dataValues2021[count2021] = item.Value;
                count2021++; 
            } else if (item.Key.Contains("2020"))
            {
                dataValues2020[count2020] = item.Value;
                count2020++;
            }
            @* Console.WriteLine(item.Value); *@
        }
        IDataset<float> year2020 = new BarDataset<float>(dataValues2020)
        {
            Label = "2020",
            BackgroundColor = "rgba(255,193,8, 1)",
            BorderColor = "rgba(255,193,8, 1)",
            BorderWidth = 1
        };
        IDataset<float> year2021 = new BarDataset<float>(dataValues2021)
        {
            Label = "2021",
            BackgroundColor = "rgba(246,135,18, 1)",
            BorderColor = "rgba(246,135,18, 1)",
            BorderWidth = 1
        };
        IDataset<float> year2022 = new BarDataset<float>(dataValues2022)
        {
            Label = "2022",
            BackgroundColor = "rgba(0,15,82, 1)",
            BorderColor = "rgba(0,15,82, 1)",
            BorderWidth = 1
        }; 
        barConfig.Data.Datasets.Add(year2020);
        barConfig.Data.Datasets.Add(year2021);
        barConfig.Data.Datasets.Add(year2022);
    }
} 
