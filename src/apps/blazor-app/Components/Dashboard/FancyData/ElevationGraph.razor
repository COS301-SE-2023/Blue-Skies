@using ChartJs.Blazor.LineChart

@namespace BlazorApp.FancyData

<div>
    <Chart Config="lineConfig" />
</div>

@code {

    [Parameter] public string? elevationValues { get; set; }
    private LineConfig? lineConfig;

    [Parameter]
    public bool animated { get; set; } = true;

    @* OnParametersSet *@
    protected override void OnParametersSet()
    {
        if (elevationValues != null)
        {
            CalculateData();
        }
    }
    protected override void OnInitialized()
    {

        @* Create the chart *@
        if (animated)
        {
            lineConfig = new LineConfig
                {
                    Options = new LineOptions
                    {
                        Responsive = true,
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "Elevation Data"
                        },
                        Scales = new Scales
                        {
                            YAxes = new List<CartesianAxis>
{
new LinearCartesianAxis
{
ScaleLabel = new ScaleLabel
{
LabelString = "Height",
Display = true,
}
}
}
                        },

                    }
                };
        }
        else
        {
            lineConfig = new LineConfig
                {
                    Options = new LineOptions
                    {
                        Responsive = true,
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "Elevation Data"
                        },
                        Scales = new Scales
                        {
                            YAxes = new List<CartesianAxis>
{
new LinearCartesianAxis
{
ScaleLabel = new ScaleLabel
{
LabelString = "Height",
Display = true,
}
}
}
                        },
                        Animation = new Animation
                        {
                            Duration = 0
                        }
                    }
                };

        }

    }

    @* Calculate Data *@
    private void CalculateData()
    {

        lineConfig!.Data.Labels.Clear();
        lineConfig.Data.Datasets.Clear();

        @* Remove the last character *@
        elevationValues = elevationValues!.Remove(elevationValues.Length - 1);

        @* Split the string into an array of integers *@
        string[] elevationArray = elevationValues.Split(',');
        int[] elevationInts = Array.ConvertAll(elevationArray, int.Parse);
        @* Find max and min *@
        int max = elevationInts.Max();
        int min = elevationInts.Min();
        int count = -1 * elevationInts.Length / 2 * 100;
        for (int i = 0; i < elevationInts.Length; i++)
        {
            lineConfig.Data.Labels.Add(count.ToString());
            count += 100;
        }

        @* Add the data to the chart *@
        IDataset<int> dataset1 = new LineDataset<int>(elevationInts)
            {
                Label = "Elevation",
                BackgroundColor = "rgba(0,15,82, 1)",
                BorderColor = "rgba(0,15,82, 1)",
                BorderWidth = 1,
                Fill = FillingMode.Disabled
            };
        lineConfig.Data.Datasets.Add(dataset1);
    }
}
