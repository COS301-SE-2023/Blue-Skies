@using ChartJs.Blazor.LineChart

@namespace BlazorApp.FancyData

<div>
    <Chart Config="lineConfig" />
</div>

@code {

    [Parameter] public string? elevationValues { get; set; }
    private LineConfig? lineConfig;

    [Parameter]
    public bool animated { get; set; } = true;

    @* OnParametersSet *@
    protected override void OnParametersSet()
    {
        if (elevationValues != null)
        {
            CalculateData();
        }
    }
    protected override void OnInitialized()
    {

        @* Create the chart *@
        if (animated)
        {
            lineConfig = new LineConfig
                {
                    Options = new LineOptions
                    {
                        Responsive = true,
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "Elevation Data"
                        },
                        Scales = new Scales
                        {
                            YAxes = new List<CartesianAxis>
                            {
                                new LinearCartesianAxis
                                {
                                    ScaleLabel = new ScaleLabel
                                    {
                                        LabelString = "Height",
                                        Display = true,
                                    }
                                }
                            }
                        },

                    }
                };
        }
        else
        {
            lineConfig = new LineConfig
                {
                    Options = new LineOptions
                    {
                        Responsive = true,
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "Elevation Data"
                        },
                        Scales = new Scales
                        {
                            YAxes = new List<CartesianAxis>
                            {
                                new LinearCartesianAxis
                                {
                                    ScaleLabel = new ScaleLabel
                                    {
                                        LabelString = "Height",
                                        Display = true,
                                    }
                                }
                            }
                        },
                        Animation = new Animation
                        {
                            Duration = 0
                        }
                    }
                };

        }

    }

    @* Calculate Data *@
    private void CalculateData()
    {
        lineConfig!.Data.Labels.Clear();
        lineConfig.Data.Datasets.Clear();

        Console.WriteLine(elevationValues);

        elevationValues = elevationValues.Replace("[", "");
        elevationValues = elevationValues.Replace("]", "");
        double[] dataArr = elevationValues.Split(',').Select(double.Parse).ToArray();
        double[] xValues = new double[dataArr.Length / 2 + 1];
        double[] yValues = new double[dataArr.Length / 2 + 1];
        for (int i = 0; i < dataArr.Length; i++)
        {
            if(i % 2 == 0)
            {
                xValues[i / 2] = dataArr[i];
                if(dataArr[i] > 180) {
                    xValues[i / 2] = dataArr[i] - 360;
                    Console.WriteLine(xValues[i / 2]);
                }
            }
            else
            {
                yValues[i / 2] = Math.Round(dataArr[i], 2);   

            }
        }
        xValues[xValues.Length - 1] = xValues[0];
        yValues[yValues.Length - 1] = yValues[0];

        @* Put the first half of the array to the back of the array *@
        double[] tempX = new double[xValues.Length];
        double[] tempY= new double[yValues.Length];
        for (int i = 0; i < xValues.Length; i++)
        {
            tempX[i] = xValues[i];
            tempY[i] = yValues[i];
        }
        for (int i = 0; i < xValues.Length; i++)
        {
            if (i < xValues.Length / 2)
            {
                xValues[i] = tempX[i + xValues.Length / 2];
                yValues[i] = tempY[i + xValues.Length / 2];
            }
            else
            {
                xValues[i] = tempX[i - xValues.Length / 2];
                yValues[i] = tempY[i - xValues.Length / 2];
            }
        }

        for (int i = 0; i < xValues.Length; i++)
        {
            lineConfig.Data.Labels.Add(xValues[i].ToString());
        }

        @* Add the data to the chart *@
        IDataset<double> dataset1 = new LineDataset<double>(yValues)
        {
            Label = "Elevation",
            BackgroundColor = "rgba(0,15,82, 1)",
            BorderColor = "rgba(0,15,82, 1)",
            BorderWidth = 1,
            Fill = FillingMode.Disabled
        };
        lineConfig.Data.Datasets.Add(dataset1);
    }
}
