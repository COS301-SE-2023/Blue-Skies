@using BlazorApp.Components.Base
@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@using System.Text.Json
@using BlazorApp.Models
@inject IJSRuntime JSRuntime

<Card css="flex w-full flex-col md:flex-row justify-center items-center gap-8  md:justify-evenly">
    @if (userReports == null)
    {
        <div role="status" class="max-w-sm animate-pulse w-60 my-auto">
            <div class="h-3 bg-gray-200 rounded-full dark:bg-gray-700 w-40"></div>
            <div class="h-8 bg-gray-200 rounded-full dark:bg-gray-700 w-64 mt-2"></div>
            <span class="sr-only">Loading...</span>
        </div>
        <div role="status" class="max-w-sm animate-pulse w-60 my-auto">
            <div class="h-6 bg-gray-200 rounded-full dark:bg-gray-700 w-32"></div>
            <div class="h-8 bg-gray-200 rounded-full dark:bg-gray-700 w-60 mt-2"></div>
            <span class="sr-only">Loading...</span>
        </div>
        <div role="status" class="max-w-sm animate-pulse w-60 my-auto">
            <div class="h-12 bg-gray-200 rounded-full dark:bg-gray-700 w-52 mt-2"></div>
            <span class="sr-only">Loading...</span>
        </div>
        
    } else {
        <div class="flex flex-col justify-center items-center ">
            <div class="w-60 my-auto">
                <h2 class="text-sm mb-2 font-medium text-gray-900">Selected Calculation</h2>
                <select @onchange="OnSelectedReportChanged" id="selectReport"
                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 w-full p-2.5">
                    @for (int i = 0; i < userReports!.Count; i++)
                    {
                        <option value="@i">@userReports[i].reportName</option>
                    }
                    @if (userReports.Count == 0)
                    {
                        <option value="0">No reports to select</option>
                    }
                </select> 
            </div>
        </div>
    <Heading>
        
        <Superscript>Date Saved</Superscript>
        <Header>
            @{
                var date = dateCreated!.Value.ToString("dd MMMM yyyy");
            }
            <h1 class="text-lg">@date</h1>
        </Header>
    </Heading>
    <div @onclick="GenerateReport">
        <Button style="pill" css="h-14 max-w-sm">
            <content>
                <a class="text-sm font-semibold hover:text-white">Generate Report</a>
            </content>
        </Button>
    </div>
    }
</Card>

@if (isReportGenerated)
{
    <iframe src="@pdfUrl" width="800" height="500">
    </iframe>
}

@code {

    private SharedUtils.reportClass reportClass = new SharedUtils.reportClass();
    [Parameter]
    public int selectedReport { get; set; }
    [Parameter]
    public EventCallback<int> selectedReportChanged { get; set; }
    [Parameter]
    public List<ReportModel>? userReports { get; set; }
    [Parameter]
    public DateTime? dateCreated { get; set; }
    [Parameter]
    public EventCallback updateLocation { get; set; }
    [Parameter]
    public EventCallback systemChanged { get; set; }
    private bool isReportGenerated = false;
    private  string pdfUrl = "";
    private int userId = 0;
    public async Task OnSelectedReportChanged(ChangeEventArgs e)
    {
        selectedReport = Convert.ToInt32(e.Value);
        await selectedReportChanged.InvokeAsync(selectedReport);
        await updateLocation.InvokeAsync();
        return;
    }

    /// <summary>
    /// Get the current report from the session storage
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var cReport = await ProtectedSessionStore.GetAsync<int>("createdReport");
        int createdReport = cReport.Value;

        if (userReports!.Count > 0)
        {
            if (createdReport != 0)
            {
                setSelectedReport(createdReport);
            }
        }

         var userIdTemp = await ProtectedLocalStore.GetAsync<int>("userId");
        userId = userIdTemp.Value;
    }

    private async void setSelectedReport(int reportId)
    {
        for (int i = 0; i < userReports!.Count; i++)
        {
            if (userReports[i].reportId == reportId)
            {
                selectedReport = i;
                await ProtectedSessionStore.SetAsync("currentReport", userReports![selectedReport]);
                await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('selectReport').value = " + selectedReport + ";");
                await selectedReportChanged.InvokeAsync(selectedReport);
            }
        }
        await ProtectedSessionStore.DeleteAsync("createdReport");
    }

    private async void GenerateReport()
    {
        //await JSRuntime.InvokeVoidAsync("GenerateReport");
        Console.WriteLine("Generating report");
        var data = Convert.ToBase64String(await reportClass.GenerateReport(userId, userReports![selectedReport].reportId));
        pdfUrl = $"data:application/pdf;base64,{data}";
        isReportGenerated = true;
        StateHasChanged();
    }
}