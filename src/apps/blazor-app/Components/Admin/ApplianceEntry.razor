@using BlazorApp.Components.Base
@using BlazorApp.Models

<tr class="border-b border-gray-200 ">
    <td class="px-6  py-4">
        <input @onchange="HandleSelection" type="checkbox" class="form-checkbox h-5 w-5  " />
    </td>   
    
    @if (recordState)
        {
        <td  class="px-6 py-4 ">
            @if(appliance != null) {<Input css="w-1/2"  type="text" placeholder="@appliance.type" @bind-InputValue="type"/>}
        </td>
        <td  class="px-6 py-4  whitespace-nowrap   ">
            @if(appliance != null) {<Input css="w-1/2" type="text" placeholder="@appliance.powerUsage.ToString()" @bind-InputValue="powerUsage"/>}
        </td>
        <td  class="px-6 py-4  whitespace-nowrap   ">
            @if(appliance != null) {<Input css="w-1/2" type="text" placeholder="@appliance.durationUsed.ToString()" @bind-InputValue="durationUsed"/>}
        </td>
        <td class="px-6 py-4 flex gap-3">
        <div onclick="@(() => toggleRecordState("save"))">
            <Button style="pill">
                <p>Save</p>
            </Button>
        </div>
        <div onclick="@(() => toggleRecordState())">
            <Button style="pill-danger">
                <p>Cancel</p>
            </Button>
        </div>
    </td>
        }
        else {
        <td  class="px-6 py-4 whitespace-nowrap   ">
            <p>@if(appliance != null) {@appliance.type}</p>
        </td>
        <td  class="px-6 py-4   whitespace-nowrap   ">
            <p>@if(appliance != null) {@appliance.powerUsage } W/h</p>
        </td>
        <td  class="px-6 py-4   whitespace-nowrap   ">
            <p>@if(appliance != null) {@appliance.durationUsed } h</p>
        </td>
        <td onclick="@(() => toggleRecordState())" class="px-6 py-4 flex gap-3">
            <Button style="pill">
                <p>Edit</p>
            </Button>
        </td>
        }
</tr>

@code {
    public string? type { get; set; } 
    public string? powerUsage { get; set; }

    public string? durationUsed { get; set; }

    [Parameter]
    public bool recordState { get; set; } = false;

    [Parameter]
    public ApplianceModel? appliance { get; set; }

    [Parameter]
    public EventCallback<int> OnSelect { get; set; }
    [Parameter]
    public EventCallback<ApplianceModel> OnSave { get; set; }

    protected override void OnInitialized()
    {
        if (appliance != null)
        {
            type = appliance.type;
            powerUsage = appliance.powerUsage.ToString();
        }
    }

    public async void toggleRecordState(string action = "")
    {
        if (action == "save")
        {
           await HandleSave();
        }
        recordState = !recordState;
    }

    private async Task HandleSelection(ChangeEventArgs e)
    {
        @if (e.Value != null && appliance != null)
        {
            await OnSelect.InvokeAsync(appliance.applianceId);
        }
    }

    private async Task HandleSave()
    {
        if (appliance != null)
        {
            var returnAppliance = new ApplianceModel
            {
                applianceId = appliance.applianceId,
                type = type,
                powerUsage = Convert.ToInt32(powerUsage),
                durationUsed = float.Parse(durationUsed is null ? "0" : durationUsed)
            };
            await OnSave.InvokeAsync(returnAppliance);
        }
    }
}