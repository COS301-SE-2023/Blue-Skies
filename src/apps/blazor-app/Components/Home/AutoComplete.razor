@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.JSInterop
@using System.Timers
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject ProtectedSessionStorage ProtectedSessionStorage


<div class="mt-20 relative">
    <div class="relative mt-2 z-30 rounded-full shadow-sm border border-primary-500">
        <div class="pointer-events-none absolute top-1/2 -translate-y-1/2 md:-translate-y-[80%] flex justify-center mt-2 md:mt-0 items-center pl-3">
            <span class="text-gray-500 md:translate-x-5 sm:text-sm w-10 h-10 md:w-fit md:h-fit">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                        d="M10.889 19.4174C15.7982 19.4174 19.7778 15.4377 19.7778 10.5285C19.7778 5.61934 15.7982 1.63965 10.889 1.63965C5.97975 1.63965 2.00006 5.61934 2.00006 10.5285C2.00006 15.4377 5.97975 19.4174 10.889 19.4174Z"
                        stroke="#000F52" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M22.0004 21.6395L17.1671 16.8062" stroke="#000F52" stroke-width="2" stroke-linecap="round"
                        stroke-linejoin="round" />
                </svg>
            </span>
        </div>
        <input
            class="pl-10 md:pl-20 w-full rounded-full h-16 py-1.5 text-gray-900 placeholder:text-gray-400  sm:text-sm sm:leading-6 focus:border-none focus:ring-0 focus:outline-none focus:bg-primary-50"
            type="text" @bind="searchQuery" @onfocus="ShowSuggestions" @onkeyup="ResetTimer" @onblur="HideSuggestions" placeholder="Enter your address" />
    </div>
    <div class="absolute z-50 transition-all duration-200  @(suggestions.Count == 0 ? "opacity-0 h-0 -translate-y-10" : "opacity-100") w-full bg-white top-full left-0">
        <ul id="suggestionList" class="flex flex-col mx-auto gap-2 mt-4 shadow p-2 rounded-xl w-full z-40">
            @{int i = 100;}
            @foreach (var suggestion in suggestions)
            {
                if (suggestion.Place_Name == "No results found")
                {
                    <li class="p-3 text-left rounded-xl">
                        <p class="">
                            @suggestion.Place_Name
                        </p>
                    </li>
                    <hr class="h-px bg-gray-200 border-0 " />
                    break;
                } else {
                    if (suggestion.Place_Name.Contains(",")) {
                        var address = suggestion.Place_Name.Substring(0, suggestion.Place_Name.IndexOf(","));
                        var rest = suggestion.Place_Name.Substring(suggestion.Place_Name.IndexOf(",") + 1);
                        <li onclick="@(() => OnSuggestionClick(suggestion))" class="p-3 text-left hover:bg-primary-100 rounded-xl transition-all duration-300  @(suggestions.Count == 0 ? "opacity -translate-y-20" : "opacity-100")">
                            <p class="font-bold">
                                @address
                            </p>
                            <p class="text-gray-500">
                                @rest
                            </p>
                        </li>
                    } else {
                        <li class="p-3 text-left hover:bg-primary-100 rounded-xl transition-all duration-300  @(suggestions.Count == 0 ? "opacity -translate-y-20" : "opacity-100")">
                            <p class="font-bold">
                                @suggestion.Place_Name
                            </p>
                        </li>
                    }
                    <hr class="h-px bg-gray-200 border-0 " />
                }
                i += 100;
            }
        </ul>
    </div>
</div>

@code {
    private SharedUtils.otherDataClass otherDataClass = new SharedUtils.otherDataClass();
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    [Parameter]
    public string searchQuery { get; set; } = "";
    [Parameter]
    public EventCallback<string> SearchQueryChanged { get; set; }
    private List<LocationSuggestion> suggestions = new List<LocationSuggestion>();
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
    private Timer aTimer = default!;

    protected override void OnInitialized(){
        aTimer = new Timer(100);
        aTimer.Elapsed += Search;
        aTimer.AutoReset = false;
        aTimer.Enabled = true;
    }

    private async void OnSuggestionClick(LocationSuggestion suggestion)
    {
        searchQuery = suggestion.Place_Name;
        await SearchQueryChanged.InvokeAsync(searchQuery);
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('suggestionList').style.display = 'none';");
        await ProtectedSessionStorage.SetAsync("location", suggestion);
    }

    private async Task HideSuggestions()
    {
        await Task.Delay(200); // Adding a slight delay to ensure the click event on a suggestion happens before hiding the list
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('suggestionList').style.display = 'none';");
    }

    private async Task ShowSuggestions()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('suggestionList').style.display = 'block';");
    }

    private async void Search(Object? source, ElapsedEventArgs e)
    {
        cancellationTokenSource.Cancel();
        
        cancellationTokenSource = new CancellationTokenSource();

        if (!searchQuery.Equals(""))
        {
            try
            {
                suggestions = await otherDataClass.GetLocationSuggestions(System.Net.WebUtility.UrlEncode(searchQuery), cancellationTokenSource.Token);
            }
            catch (OperationCanceledException)
            {
                // Handle cancellation if needed
            }
        }
        else
        {
            suggestions = new List<LocationSuggestion>();
        }
        await InvokeAsync( StateHasChanged );
    }

    void IDisposable.Dispose() => aTimer.Dispose();

    private void ResetTimer(KeyboardEventArgs e){
        SearchQueryChanged.InvokeAsync(searchQuery);
        aTimer.Stop();
        aTimer.Start();
    }
}
