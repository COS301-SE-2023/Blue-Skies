@using BlazorApp.Components.Base
@using BlazorApp.Components.Home
@using BlazorApp.Models
@using System.Text.Json;
@using System.Net;
@using System.Collections.Generic;
@using System.Net.Http;
@using System.Threading.Tasks;
@using System.Threading.Tasks.Dataflow;
@using System.Collections.Concurrent;
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject BlazorApp.Data.LoadingService loadingService

<div class="mx-auto max-w-2xl px-10  py-32 sm:py-20 lg:py-28">
    <div class="text-center">
        <Heading>
            <Header>
                <h1 class="text-4xl font-bold tracking-tight text-primary-950 sm:text-6xl">Discover Your Solar Score
                </h1>
            </Header>
            <Subscript>
                <p class="mt-6 text-lg leading-8 text-gray-600 mb-5">Uncover Your Solar Potential. Calculate Your Solar
                    Score Today.</p>
            </Subscript>
        </Heading>
        <div>
            <AutoComplete />
        </div>
        <div class="mt-10 flex flex-col sm:flex-row items-center justify-center gap-6">
            <div @onclick="generateLocationData">
                <Button style="pill" css="h-14">
                    <content>
                        <p class="text-sm font-semibold hover:text-white">Get Solar Score</p>
                    </content>
                </Button>
            </div>
            <a href="/dashboard" @onclick="() => loadingService.ShowLoadingScreen()" class="text-sm font-normal leading-6 text-orange-accent-500">Dashboard<span
                    aria-hidden="true"></span></a>
        </div>
    </div>
</div>


@code {
    private SharedUtils.locationDataClass locationDataClass = new SharedUtils.locationDataClass();
    private LocationDataModel? currentLocationData = new LocationDataModel();
    public string parent = "index";
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private double latitude = 0;
    private double longitude = 0;
    /// <summary>
    /// Gets the parent page from the session storage.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var par = await ProtectedSessionStore.GetAsync<string>("parent");
        parent = par.Value!;
    }

    /// <summary>
    /// <list type="number">
    ///     <item>Gets the longitude and latitude from the location suggestion.</item>
    ///     <item>Gets the location name from the location suggestion.</item>
    ///     <item>Checks if the location data exists in the database.</item>
    ///     <item>If the location data does not exist:</item>
    ///     <list type="bullet">
    ///         <item>Gets the daylight hours for the location.</item>
    ///         <item>Downloads the image from the Google Maps Static API.</item>
    ///         <item>Saves the image to the local storage.</item>
    ///         <item>Creates a new row in the database for the location data.</item>
    ///     </list>
    ///     <item>Saves the location data to the currentLocationData variable.</item>
    ///     <item>Saves the currentLocationData variable to the session storage.</item>
    ///     <item>Navigates to the solarScore page.</item>
    /// </list>
    /// </summary>

    public async void generateLocationData()
    {
        ShowLoadingScreen();
        System.Globalization.CultureInfo customCulture = (System.Globalization.CultureInfo)System.Threading.Thread.CurrentThread.CurrentCulture.Clone();
        customCulture.NumberFormat.NumberDecimalSeparator = ".";
        System.Threading.Thread.CurrentThread.CurrentCulture = customCulture;
        var locationTemp = await ProtectedSessionStore.GetAsync<LocationSuggestion>("location");
        LocationSuggestion locationSuggestion = locationTemp.Value!;

        List<double> cord = new List<double>();
        if (locationSuggestion.Geometry != null)
        {
            cord = locationSuggestion.Geometry.Coordinates!;
        }
        longitude = cord[0];
        latitude = cord[1];
        var location = "";
        if (locationSuggestion != null)
        {
            location = locationSuggestion.Place_Name;
        }

        currentLocationData!.location = location;
        currentLocationData.latitude = latitude;
        currentLocationData.longitude = longitude;

        await ProtectedSessionStore.SetAsync("latitude", latitude);
        await ProtectedSessionStore.SetAsync("longitude", longitude);


        byte[] imageBytes = new byte[0];
        currentLocationData = await locationDataClass.GetLocationData(latitude, longitude);
        if (currentLocationData.data == null)
        {
            float[] data = await locationDataClass.getInitialData(latitude, longitude);
            currentLocationData.daylightHours = data[0];
            await ProtectedSessionStore.SetAsync("tempSolarIrradiation", double.Parse(data[1].ToString()));

            imageBytes = await locationDataClass.DownloadImageFromGoogleMapsService(latitude, longitude);
            await locationDataClass.CreateLocationData(latitude, longitude, (float)currentLocationData.daylightHours, Convert.ToBase64String(imageBytes), location);
        }

        await ProtectedSessionStore.SetAsync("parent", "");
        parent = "";
        await ProtectedSessionStore.SetAsync("edit", false);

        if (parent.Equals("index"))
        {
            loadingService.ShowLoadingScreen();
            NavigationManager.NavigateTo("/solarScore");
        }
        else
        {
            NavigationManager.NavigateTo("/solarScore", true);
            ShowLoadingScreen();
        }
    }

    /// <summary>
    /// Saves the image as a bytes array to the local storage.
    /// <paramref name="imageBytes"/> The image as a byte array.
    /// </summary>
    private async Task SaveImageToLocalStorage(byte[] imageBytes)
    {
        if(imageBytes.Length == 0) {
            Console.WriteLine("Image bytes is empty");
            return;
        }
        var imagePath = Path.Combine("wwwroot", "assets", "map_image.png");
        if (File.Exists(imagePath))
        {
            File.Delete(imagePath);
        }
        await File.WriteAllBytesAsync(imagePath, imageBytes);
    }
    
    private void ShowLoadingScreen()
    {
        loadingService.ShowLoadingScreen();
    }

    private void HideLoadingScreen()
    {
        loadingService.HideLoadingScreen();
    }
}