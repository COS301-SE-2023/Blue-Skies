@using BlazorApp.Components.Base
@using BlazorApp.Components.Home
@using BlazorApp.Models
@using System.Text.Json;
@using System.Net;
@using System.Collections.Generic;
@using System.Net.Http;
@using System.Threading.Tasks;
@using System.Threading.Tasks.Dataflow;
@using System.Collections.Concurrent;
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject BlazorApp.Data.LoadingService loadingService
@inject BlazorApp.Data.ToastService toastService

<div class="mx-auto max-w-2xl px-10  py-32 sm:py-20 lg:py-28 relative">
    <div class="text-center">
        <Heading>
            <Header>
                <h1 class="text-4xl font-bold tracking-tight text-primary-950 sm:text-6xl">Discover Your Solar Score
                </h1>
            </Header>
            <Subscript>
                <p class="mt-6 text-lg leading-8 text-gray-600 mb-5">Uncover Your Solar Potential. Calculate Your Solar
                    Score Today.</p>
            </Subscript>
        </Heading>
        <div class="relative">
            <AutoComplete @bind-searchQuery="@searchQuery" />
        </div>
        <div class="mt-10 flex flex-col sm:flex-row items-center justify-center gap-6">
            <div @onclick="generateLocationData">
                <Button style="pill" css="h-14">
                    <content>
                        <p class="text-sm font-semibold hover:text-white">Get Solar Score</p>
                    </content>
                </Button>
            </div>
            <a href="/dashboard" class="text-sm font-normal leading-6 text-orange-accent-500">Dashboard<span
                    aria-hidden="true"></span></a>
        </div>
    </div>
</div>


@code {
    private SharedUtils.locationDataClass locationDataClass = new SharedUtils.locationDataClass();
    private LocationDataModel? currentLocationData;
    public string searchQuery = "";
    public string parent = "index";
    /// <summary>
    /// Gets the parent page from the session storage.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var par = await ProtectedSessionStore.GetAsync<string>("parent");
        parent = par.Value!;
    }

    /// <summary>
    /// <list type="bullet">
    /// <item>Gets the daylight hours for the location.</item>
    /// <item>Downloads the image from the Google Maps Static API.</item>
    /// <item>Saves the image to the local storage.</item>
    /// <item>Creates a new row in the database for the location data.</item>
    /// <item>Saves the location data to the currentLocationData variable.</item>
    /// <item>Saves the currentLocationData variable to the session storage.</item>
    /// <item>Navigates to the solarScore page.</item>
    /// </list>
    /// </summary>

    public async void generateLocationData()
    {
        currentLocationData = new LocationDataModel();
        var locationTemp = await ProtectedSessionStore.GetAsync<LocationSuggestion>("location");
        LocationSuggestion locationSuggestion = locationTemp.Value!;
        await ProtectedSessionStore.DeleteAsync("location");
        if (locationSuggestion == null || !searchQuery.Equals(locationSuggestion.Place_Name))
        {
            toastService.ShowToast("Please select a location", "Please select a location from the drop down list", "error");
        }
        else
        {
            List<double> cord = new List<double>();
            if (locationSuggestion.Geometry != null)
            {
                cord = locationSuggestion.Geometry.Coordinates!;
            }
            double longitude = cord[0];
            double latitude = cord[1];
            var location = "";
            if (locationSuggestion != null)
            {
                location = locationSuggestion.Place_Name;
            }

            currentLocationData!.locationName = location;
            currentLocationData.latitude = latitude;
            currentLocationData.longitude = longitude;

            byte[] imageBytes = new byte[0];
            bool checkIfLocationDataExists = false;
            try
            {
                checkIfLocationDataExists = await locationDataClass.CheckIfLocationDataExists(latitude, longitude);
                if (checkIfLocationDataExists == false)
                {
                    loadingService.ShowLoadingScreen();
                    Console.WriteLine("Location data does not exist, creating the necessary data");
                    currentLocationData = await locationDataClass.CreateLocationData(latitude, longitude, location);
                }
                else
                {
                    Console.WriteLine("Location data exists, fetching it");
                }

                if (currentLocationData == null)
                {
                    toastService.ShowToast("Could not find data for this location", "Try another location", "error");
                    NavigationManager.NavigateTo("/");
                    loadingService.HideLoadingScreen();
                }
                else
                {
                    await ProtectedSessionStore.SetAsync("latitude", currentLocationData!.latitude!);
                    await ProtectedSessionStore.SetAsync("longitude", currentLocationData.longitude!);

                    await ProtectedSessionStore.SetAsync("parent", "");
                    parent = "";
                    await ProtectedSessionStore.SetAsync("edit", false);

                    if (parent.Equals("index"))
                    {
                        NavigationManager.NavigateTo("/solarScore");
                    }
                    else
                    {
                        NavigationManager.NavigateTo("/solarScore", true);
                    }
                }
            }
            catch
            {
                toastService.ShowToast("Could not make connection to the database", "Try again later", "error");
                NavigationManager.NavigateTo("/");
                loadingService.HideLoadingScreen();
            }
        }
    }

    /// <summary>
    /// Saves the image as a bytes array to the local storage.
    /// <paramref name="imageBytes"/> The image as a byte array.
    /// </summary>
    private async Task SaveImageToLocalStorage(byte[] imageBytes)
    {
        if (imageBytes.Length == 0)
        {
            Console.WriteLine("Image bytes is empty");
            return;
        }
        var imagePath = Path.Combine("wwwroot", "assets", "map_image.png");
        if (File.Exists(imagePath))
        {
            File.Delete(imagePath);
        }
        await File.WriteAllBytesAsync(imagePath, imageBytes);
    }
}