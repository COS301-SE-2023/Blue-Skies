@using BlazorApp.Components.Base
@using BlazorApp.Components.Dashboard
@using BlazorApp.Models
@using System.Text.Json;
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject BlazorApp.Data.LoadingService loadingService
@inject BlazorApp.Data.ToastService toastService


<div class="mt-24 text-center">
    <Heading>
        <Header>
            <h1 class="text-3xl">Your results in numbers</h1>
        </Header>
        <Subscript>
            <p class="text-primary-700">The following numbers are based on your location.</p>
        </Subscript>
    </Heading>
</div>
<div class="flex w-full flex-wrap gap-4 flex-row justify-center mt-4 md:mt-20">
    @* Map Container *@
    <div class="relative sm:flex-shrink-0  items-center flex flex-col justify-center">
        <Image ImageName="Robert_Pointing_Down.png" css="absolute left-72 top-8 z-0 h-32" alt="Rob" />
        <Map css="scale-90 z-10" ImageName="@satteliteImage" />
        <LocationItem Title="Address" ImageName="Point On Map.svg" Text="@locationData!.locationName" />
    </div>
    <div class="relative w-1/2 flex flex-col sm:flex-shrink-0 gap-5 ">
        @* <a href="/advanced" @onclick="() => loadingService.ShowLoadingScreen()" class=" text-right -mb-4 col-span-2 w-full text-base font-normal leading-6 text-orange-accent-500 mr-32">Advanced Calculation â†’</a> *@
        @* Solar Score Card *@
        @* <Card css="border-2 scale-90 flex xl:scale-100 border-primary-300 w-72 h-72 relative">
            <div class="my-auto w-full">
                <div class="bg-gray-100 shadow-md rounded-3xl  p-3 w-16 ">
                    <Image ImageName="Sale.svg" alt="Sale" css="scale-150"/>
                </div>
                <h1  class="text-xl text-primary-800 font-semibold mt-3">Solar Score</h1>
                <div class="flex gap-1 mt-3">
                    <p class="text-5xl text-primary-900 font-semibold">@solarScore</p>
                    <p class="text-5xl text-gray-400 font-bold">%</p>
                </div>
            </div>
        </Card> *@
        @* Daylight Hours Card *@
        @* <Card css="border-2 flex scale-90 xl:scale-100 border-primary-300 p-4 w-72 h-72 flex  my-auto flex-col">
            <div class="my-auto w-full ">
                <div class="bg-gray-100 shadow-md rounded-3xl p-3 w-16 ">
                    <Image ImageName="History.svg" alt="Sale" css="scale-150"/>
                </div>
                <h1  class="text-xl text-primary-800 font-semibold mt-3">Usable hours of sunlight per day</h1>
                <div class="flex gap-1 mt-3">
                    @{
                        double dlh = solarCalculator.getSunlightHours(locationData!.solarPanelsData, true);
                    }
                    <p class="text-5xl text-primary-900 font-semibold">@dlh</p>
                    <p class="text-5xl text-gray-400 font-bold">h</p>
                </div>
            </div>
        </Card> *@
        @* Average Energy Production Card *@
        @* <Image ImageName="Robert_T_Pose.png" css="absolute right-14 top-[340px] z-0 h-32" alt="Rob" /> *@
        @* <Card css=" border-2 scale-90 flex xl:scale-100 border-primary-300 p-4 w-full h-fit my-auto">
            <div class="my-auto w-full relative">
                <div class="bg-gray-100 shadow-md rounded-3xl p-3 w-16 ">
                    <Image ImageName="Accumulator.svg" alt="Sale" css="scale-150"/>
                </div>
                <h1  class="text-xl text-primary-800 font-semibold mt-3">Avg Daily Energy Production</h1>
                <div class="flex gap-1 mt-3">
                    <p class="text-5xl text-primary-900 font-semibold">@avgEnergyProduction</p>
                    <p class="text-5xl text-gray-400 font-bold">kwh</p>
                </div>
                <div class="flex absolute top-0 right-0 justify-evenly gap-4">
                    @{
                        var small = "";
                        var medium = "";
                        var large = "";
                        if (systems!.Count > 0)
                        {
                            small = systems[0].inverterOutput + "kw";
                            medium = systems[1].inverterOutput + "kw";
                            large = systems[2].inverterOutput + "kw";
                        }
                    }
                    <div onclick="@(() => SetSystemSize(0))"
                        class=" flex shadow-md transition-all duration-500  @(selectedSystem == 0 ? "bg-gradient-to-bl from-primary-400 to-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-xl justify-center items-center w-12 h-12">
                        <p class="text-sm font-semibold">@small</p>
                    </div>
                    <div onclick="@(() => SetSystemSize(1))"
                        class="flex shadow-md transition-all duration-500 @(selectedSystem == 1 ? "bg-gradient-to-bl from-primary-400 to-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-xl justify-center items-center w-12 h-12">
                        <p class="text-sm font-semibold">@medium</p>
                    </div>
                    <div onclick="@(() => SetSystemSize(2))"
                        class="flex shadow-md transition-all duration-500 @(selectedSystem == 2 ? "bg-gradient-to-bl from-primary-400 to-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-xl justify-center items-center w-12 h-12">
                        <p class="text-sm font-semibold">@large</p>
                    </div>
                </div>
            </div>
        </Card> *@
        <Card css="relative border-2 scale-90 flex flex-col gap-2 xl:scale-100 border-primary-300 p-4 w-full h-fit my-auto">
            <div class="my-auto w-full flex gap-4 relative">
                <div class="bg-gray-100 shadow-md rounded-3xl p-3 w-16 ">
                    <Image ImageName="Sale.svg" alt="Sale" css="scale-150"/>
                </div>
                <h1  class="text-xl text-primary-800 font-semibold mt-3">Solar Score</h1>
            </div>

            <div class="flex gap-1 mt-3">
                <p class="text-5xl text-primary-900 font-semibold">@solarScore</p>
                <p class="text-5xl text-gray-400 font-bold">%</p>
            </div>

            <div class="bg-gradient-to-r p-4 absolute top-5 right-5 flex gap-2 h-fit from-primary-400 to-primary-300 shadow w-1/2 my-auto rounded-2xl">
                <div class="w-full h-full flex gap-2 justify-center items-center my-auto rounded-2xl">
                    <p class="text-center text-xl font-bold text-primary-100">Potential</p>
                    <p class="text-center text-xl font-bold text-primary-200">Savings</p>
                </div>
                <div class="w-1/2 h-full flex gap-2 justify-center p-3 my-auto bg-white items-center rounded-2xl">
                    <p class="text-center text-xl font-bold">R </p>
                    <p class="text-center text-xl font-bold">1280 </p>
                    <p class="text-center text-gray-400 text-xl font-bold">p/m </p>
                </div>
            </div>

            <div class="w-full relative h-3 mt-3 rounded-full bg-gradient-to-r from-red-accent-500 via-yellow-accent-500 to-green-500">
                <div class="h-6 w-2 rounded-full bg-primary-600 absolute top-1/2 -translate-y-1/2 transition-all duration-500 @scrollLength"></div>
            </div>
        </Card>
        <Card css="relative border-2 scale-90 flex flex-col gap-2 xl:scale-100 border-primary-300 p-4 w-full h-fit my-auto">
            <div class="my-auto w-full flex gap-4 relative">
                <div class="bg-gray-100 shadow-md rounded-3xl p-3 w-16 ">
                    <Image ImageName="Accumulator.svg" alt="Sale" css="scale-150"/>
                </div>
                <h1  class="text-xl text-primary-800 font-semibold mt-3">Avg Daily Energy Production</h1>
            </div>
            <div class="flex gap-4 mt-4">
                <div class="grid grid-cols-2 gap-2 w-full">
                    <Appliance name="Fridge" imageName="Fridge.svg" count="2"/>
                    <Appliance name="TV" imageName="TV.svg" count="2"/>
                    <Appliance name="Washing Machine" imageName="Washing Machine.svg" count="2"/>
                    <Appliance name="Lights" imageName="Lights.svg" count="2"/>
                </div>
                <div class="flex flex-col justify-center w-full items-center gap-5">
                    <div class="flex gap-1 mt-3">
                        <p class="text-5xl text-primary-900 font-semibold">@avgEnergyProduction</p>
                        <p class="text-5xl text-gray-400 font-bold">kwh</p>
                    </div>
                    <DaylightChart />
                    <div class="flex w-full justify-center items-center gap-1 -mt-10">
                        <p class="text-5xl text-primary-900 font-semibold">5</p>
                        <p class="text-5xl text-gray-400 font-bold">h</p>
                    </div>
                </div>
                <div class="flex flex-col w-full -mt-20 justify-center items-center gap-4">
                    <Appliance imageName="SolarPanels.svg" name="Number of Panels"
                    count="2" />
                    <input type="range" class="accent-primary-800  cursor-pointer w-full " min="1000" max="7000" step="100" />
                    <Appliance ImageName="Batteries.svg" name="Number of Batteries"
                        count="2" />
                    <input type="range" class="accent-primary-800  cursor-pointer w-full " min="1000" max="7000" step="100" />
                </div>
            </div>
        </Card>
    </div>
</div>


@code {
    private string scrollLength = "left-[0%]";
    private DataHandlers.SolarDataHandler solarCalculator = new DataHandlers.SolarDataHandler();
    private DataHandlers.RooftopDataHandler rooftopDataHandler = new DataHandlers.RooftopDataHandler();
    private SharedUtils.systemClass systemClass = new SharedUtils.systemClass();
    [Parameter]
    public LocationDataModel? locationData  { get; set; } = null;
    private int solarScore = 0;
    public List<SystemModel> systems = new List<SystemModel>();
    public int selectedSystem = 2;
    public double avgEnergyProduction = 0.0;
    public bool isLoaded = false;
    public string? satteliteImage;

    /// <summary>
    /// This function is called when the page is loaded and it gets the data from the session storage and the API
    /// </summary>
    protected override async Task OnInitializedAsync()
    {   
        loadingService.ShowLoadingScreen();
        if(locationData == null) 
        {
            toastService.ShowToast("Solar Score not Created", "You must first create a solar score", "error");
            NavigationManager.NavigateTo("/");
            return;
        }

        System.Globalization.CultureInfo customCulture = (System.Globalization.CultureInfo)
        System.Threading.Thread.CurrentThread.CurrentCulture.Clone();
        customCulture.NumberFormat.NumberDecimalSeparator = ".";
        var selectedSys = await ProtectedSessionStore.GetAsync<int>("selectedSystem");
        selectedSystem = selectedSys.Value;

        satteliteImage = rooftopDataHandler.GetSatelliteImage(locationData.satteliteImageData!);
        solarScore = solarCalculator.getSolarScore(locationData.solarPanelsData);

        isLoaded = true;
        loadingService.HideLoadingScreen();
        
        Console.WriteLine("Solar Score: " + solarScore);
        await Task.Delay(1000);
        scrollLength = $"left-[{solarScore}%]";

        StateHasChanged();
    }

    /// <summary>
    /// <para>This function is called when the user selects a system size and it updates the selected system and the average energy production</para>
    /// <paramref name="selection"/> The index of the selected system.
    /// </summary>
    private  void SetSystemSize(int selection)
    {
        Console.WriteLine("Selected System number of panels: " + systems[selection].numberOfPanels);
        if(systems != null && locationData != null) {
            selectedSystem = selection;
            ProtectedSessionStore.SetAsync("selectedSystem", selection);
            if (systems!.Count > 0)
            {
                avgEnergyProduction = Math.Round(solarCalculator.getAnnualKwGenerated(systems[selection].numberOfPanels, locationData.solarPanelsData) / 365, 2);
            }
        }
    }
}