@using BlazorApp.Components.Base
@using BlazorApp.Components.Dashboard
@using BlazorApp.Models
@using System.Text.Json;
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject BlazorApp.Data.SolarCalculator solarCalculator
@inject BlazorApp.Data.LoadingService loadingService


<div class="mt-24 text-center">
    <Heading>
        <Header>
            <h1 class="text-3xl">Your results in numbers</h1>
        </Header>
        <Subscript>
            <p class="text-primary-700">The following numbers are based on your location.</p>
        </Subscript>
    </Heading>
</div>
<div class="flex w-full flex-wrap gap-4 flex-row justify-center mt-4 md:mt-20">
    @* Map Container *@
    <div class="sm:flex-shrink-0  items-center flex flex-col justify-center ">
        <Map css="scale-90" ImageName="@mapImage" />
        <LocationItem Title="Address" ImageName="Point On Map.svg" Text="@currentLocationData.location" />
    </div>
    <div class="grid sm:flex-shrink-0 grid-cols-1 sm:grid-cols-2 gap-5 xl:gap-10">
        <a href="/advanced" @onclick="() => loadingService.ShowLoadingScreen()" class=" text-right -mb-4 col-span-2 w-full text-base font-normal leading-6 text-orange-accent-500 mr-32">Advanced Calculation â†’</a>
        @* Solar Score Card *@
        <Card css="border-2 scale-90 flex xl:scale-100 border-primary-300 w-72 h-72">
            @if(solarCalculator.remainingCalls == 100) {
                <div class="w-full h-2 overflow-hidden animate-pulse rounded-full bg-primary-500 absolute bottom-0 z-20 left-0">
                    <div class="w-[105%] h-2 rounded-full bg-white loading-runner"></div>
                </div>
            } else if(solarCalculator.remainingCalls > 0){ 
                double percentage = solarCalculator.remainingCalls;
                percentage = Math.Round((percentage / 144)*100, 0);

                <div class="flex justify-end h-2 overflow-hidden w-full rounded-full bg-gradient-to-l from-primary-400 to-primary-600 absolute bottom-0 z-20 left-0">
                    <div style="width: @(percentage)%;"  class="w-full h-2 bg-white"></div>
                </div>
            }
            <div class="my-auto w-full">
                <div class="bg-gray-100 shadow-md rounded-3xl  p-3 w-16 ">
                    <Image ImageName="Sale.svg" alt="Sale" css="scale-150"/>
                </div>
                <h1  class="text-xl text-primary-800 font-semibold mt-3">Solar Score</h1>
                <div class="flex gap-1 mt-3">
                    <p class="text-5xl text-primary-900 font-semibold">@solarScore</p>
                    <p class="text-5xl text-gray-400 font-bold">%</p>
                </div>
            </div>
        </Card>
        @* Daylight Hours Card *@
        <Card css="border-2 flex scale-90 xl:scale-100 border-primary-300 p-4 w-72 h-72 flex  my-auto flex-col">
            <div class="my-auto w-full ">
                <div class="bg-gray-100 shadow-md rounded-3xl p-3 w-16 ">
                    <Image ImageName="History.svg" alt="Sale" css="scale-150"/>
                </div>
                <h1  class="text-xl text-primary-800 font-semibold mt-3">Usable hours of sunlight per day</h1>
                <div class="flex gap-1 mt-3">
                    <p class="text-5xl text-primary-900 font-semibold">@currentLocationData.daylightHours</p>
                    <p class="text-5xl text-gray-400 font-bold">h</p>
                </div>
            </div>
        </Card>
        @* Average Energy Production Card *@
        <Card css="border-2 scale-90 sm:col-span-2 flex xl:scale-100 border-primary-300 p-4 w-full h-full  my-auto">
            <div class="my-auto w-full relative">
                <div class="bg-gray-100 shadow-md rounded-3xl p-3 w-16 ">
                    <Image ImageName="Accumulator.svg" alt="Sale" css="scale-150"/>
                </div>
                <h1  class="text-xl text-primary-800 font-semibold mt-3">Avg Energy Production</h1>
                <div class="flex gap-1 mt-3">
                    <p class="text-5xl text-primary-900 font-semibold">@avgEnergyProduction</p>
                    <p class="text-5xl text-gray-400 font-bold">kw/h</p>
                </div>
                <div class="flex absolute top-0 right-0 justify-evenly gap-4">
                    @{
                        var small = "";
                        var medium = "";
                        var large = "";
                        if (systems!.Count > 0)
                        {
                            small = systems[0].inverterOutput + "kw";
                            medium = systems[1].inverterOutput + "kw";
                            large = systems[2].inverterOutput + "kw";
                        }
                    }
                    <div onclick="@(() => SetSystemSize(0))"
                        class=" flex shadow-md transition-all duration-500  @(selectedSystem == 0 ? "bg-gradient-to-bl from-primary-400 to-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-xl justify-center items-center w-12 h-12">
                        <p class="text-sm font-semibold">@small</p>
                    </div>
                    <div onclick="@(() => SetSystemSize(1))"
                        class="flex shadow-md transition-all duration-500 @(selectedSystem == 1 ? "bg-gradient-to-bl from-primary-400 to-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-xl justify-center items-center w-12 h-12">
                        <p class="text-sm font-semibold">@medium</p>
                    </div>
                    <div onclick="@(() => SetSystemSize(2))"
                        class="flex shadow-md transition-all duration-500 @(selectedSystem == 2 ? "bg-gradient-to-bl from-primary-400 to-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-xl justify-center items-center w-12 h-12">
                        <p class="text-sm font-semibold">@large</p>
                    </div>
                </div>
            </div>
        </Card>
        @* System used Card *@
        @* <Card css="border-2 scale-90 flex xl:scale-100  border-primary-300 w-72 h-72">
            <div class="my-auto flex flex-col gap-4 w-full ">
                <h1 class="text-xl text-primary-800 font-semibold mt-3">Solar System Used for Calculations</h1>
                <div class="flex justify-evenly gap-4">
                    @{
                        var small = "";
                        var medium = "";
                        var large = "";
                        if (systems!.Count > 0)
                        {
                            small = systems[0].inverterOutput + "kw";
                            medium = systems[1].inverterOutput + "kw";
                            large = systems[2].inverterOutput + "kw";
                        }
                    }
                    <div onclick="@(() => SetSystemSize(0))"
                        class=" flex shadow-md transition-all duration-500  @(selectedSystem == 0 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-xl justify-center items-center w-12 h-12">
                        <p class="text-sm font-semibold">@small</p>
                    </div>
                    <div onclick="@(() => SetSystemSize(1))"
                        class="flex shadow-md transition-all duration-500 @(selectedSystem == 1 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-xl justify-center items-center w-12 h-12">
                        <p class="text-sm font-semibold">@medium</p>
                    </div>
                    <div onclick="@(() => SetSystemSize(2))"
                        class="flex shadow-md transition-all duration-500 @(selectedSystem == 2 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-xl justify-center items-center w-12 h-12">
                        <p class="text-sm font-semibold">@large</p>
                    </div>
                </div>
                <div class="flex gap-2 mt-3">
                    @{
                        var selectedPanels = 0;
                        if (systems.Count > 0)
                        {
                            selectedPanels = systems[selectedSystem].numberOfPanels;
                        }
                    }
                    <p class="text-5xl text-pkrimary-900 font-semibold">@selectedPanels</p>
                    <p class="text-4xl text-gray-400 translate-y-1 font-semibold">panels</p>
                </div>
            </div>
        </Card> *@
    </div>
</div>


@code {
    [Parameter]
    public double latitude  { get; set; }
    [Parameter]
    public double longitude  { get; set; }
    public LocationDataModel currentLocationData { get; set; } = new LocationDataModel();
    ProtectedBrowserStorageResult<double> tempSolarIrradiation;
    private int solarScore = 0;
    public List<SystemModel> systems = new List<SystemModel>();
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    public int selectedSystem = 2;
    public double avgEnergyProduction = 0.0;
    public string solarScoreId = "";
    public List<SolarScoreModel> solarScores = new List<SolarScoreModel>();
    public bool isLoaded = false;
    public string? mapImage = "";

    /// <summary>
    /// This function is called when the page is loaded and it gets the data from the session storage and the API
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        tempSolarIrradiation = await ProtectedSessionStore.GetAsync<double>("tempSolarIrradiation");
        if(API_PORT != null) {
            solarScore = solarCalculator.getSolarScoreFromInitialData(tempSolarIrradiation.Value);
        }
        
        System.Globalization.CultureInfo customCulture = (System.Globalization.CultureInfo)
        System.Threading.Thread.CurrentThread.CurrentCulture.Clone();
        customCulture.NumberFormat.NumberDecimalSeparator = ".";
        var selectedSys = await ProtectedSessionStore.GetAsync<int>("selectedSystem");
        selectedSystem = selectedSys.Value;
        
        await GetLocationData(latitude, longitude);
        mapImage = currentLocationData.image;
        await GetSystems();
        if (systems!.Count > 0)
        {
            double calc = systems[selectedSystem].numberOfPanels * currentLocationData!.daylightHours * systems[selectedSystem].solarInput / 1000;
            avgEnergyProduction = Math.Round(calc, 2);
        }
        else
        {
            Console.WriteLine("Error currentReport is null or no systems found in results");
        }
        isLoaded = true;
        loadingService.HideLoadingScreen();

        var tempLatitude = await ProtectedSessionStore.GetAsync<double>("latitude");
        latitude = tempLatitude.Value;
        var tempLongitude = await ProtectedSessionStore.GetAsync<double>("longitude");
        longitude = tempLongitude.Value;

        // Remove warning but still does not wait for the function to complete since this is the while loop that is running in the background
        _ = GetSolarScore();
    }

    /// <summary>
    /// <list type="bullet">
    ///     <item>Tries to get the location data from the database.</item>
    ///     <item>If the data exists: save it's data to the currentLocationData variable</item>
    ///     <item>If the data does not exist print error.</item>
    /// </list>
    /// <paramref name="latitude"/> The latitude of the location.
    /// <paramref name="longitude"/> The longitude of the location.
    /// </summary>
    public async Task GetLocationData(double latitude, double longitude){
        string lat = latitude.ToString().Replace(",", ".");
        string lon = longitude.ToString().Replace(",", ".");
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/locationData/GetLocationData/" + lat + "/" + lon);
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Location data found");
            string data = response.Content.ReadAsStringAsync().Result;
            currentLocationData = JsonSerializer.Deserialize<LocationDataModel>(data)!;
        } else {
            Console.WriteLine("Location data not found in Results");
        }
        return;
    }

    /// <summary>
    /// <para>This function is called when the user selects a system size and it updates the selected system and the average energy production</para>
    /// <paramref name="selection"/> The index of the selected system.
    /// </summary>
    private void SetSystemSize(int selection)
    {
        selectedSystem = selection;
        ProtectedSessionStore.SetAsync("selectedSystem", selectedSystem);
        if (systems!.Count > 0)
        {
            double calc = systems[selectedSystem].numberOfPanels * currentLocationData!.daylightHours * systems[selectedSystem].solarInput / 1000;
            avgEnergyProduction = Math.Round(calc, 2);
        }
    }

    /// <summary>
    /// This function is called to get the systems from the API and store them in the systems list
    /// </summary>
    private async Task GetSystems()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/System/all");
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            systems = JsonSerializer.Deserialize<List<SystemModel>>(data, new JsonSerializerOptions {
                PropertyNameCaseInsensitive = true
            })!;
        }
        else
        {
            Console.WriteLine("Failed");
        }
        return;
    }

    /// <summary>
    /// This function is called in the background to update the solar score
    /// </summary>
    private async Task GetSolarScore() 
    {
        solarCalculator.reset();
        if(API_PORT == null) {
            Console.WriteLine("API_PORT is null, GetSolarScore function aborted");
            return;
        }
        while(solarCalculator.remainingCalls > 0 && solarCalculator.timesNotUpdated < 10 && NavigationManager.Uri.Contains("solarScore")) {
            solarScore = await solarCalculator.GetSolarScoreFromData(latitude, longitude, API_PORT, tempSolarIrradiation.Value);
            await ProtectedSessionStore.SetAsync("solarScore", solarScore);
            StateHasChanged();
            Console.WriteLine("Remaining calls: " + solarCalculator.remainingCalls + " timesNotUpdated: " + solarCalculator.timesNotUpdated + " solarScore: " + solarScore);
            await Task.Delay(3000);
        }
    }
}