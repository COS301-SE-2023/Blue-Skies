@using BlazorApp.Components.Base
@using BlazorApp.Components.Dashboard
@using BlazorApp.Models
@using System.Text.Json;
@inject ProtectedSessionStorage ProtectedSessionStore
@inject ProtectedLocalStorage ProtectedLocalStore
@inject NavigationManager NavigationManager
@inject BlazorApp.Data.ToastService toastService
@inject BlazorApp.Data.TooltipService tooltipService
@using System.Timers
@implements IDisposable


<div class="mt-24 text-center">
    <Heading>
        <Header>
            <h1 class="text-3xl">Your results in numbers</h1>
        </Header>
        <Subscript>
            <p class="text-primary-700 mt-2">The following numbers are based on your location.</p>
        </Subscript>
    </Heading>
</div>
<div class="flex w-full flex-nowrap gap-4 flex-col xl:flex-row items-center justify-center mt-4 md:mt-20">
    @* Map Container *@
    <div class="relative sm:flex-shrink-0 gap-5 items-center flex flex-col justify-center w-full max-w-lg">
        <Image ImageName="Robert_Welcoming.png" css="absolute left-20 z-0 h-28 top-10" alt="Rob" />
        @if (satteliteImage != null)
        {
            <Map css="scale-90 z-10" ImageName="@satteliteImage" />
        }
        else
        {
            <MapSkeleton />
        }
        @if (locationData != null)
        {
            <div class="w-full pl-2  -mt-6 mb-6 lg:mb-0">
                <LocationItem Title="Address" ImageName="Point On Map.svg" Text="@locationData!.locationName" />
            </div>
            <div class="hidden lg:block mb-6" @onclick="ShowModalCalculation">
                <Button style="pill">
                    <div class="flex gap-4 px-3 py-1">
                        <p class="my-auto">More Calculations </p>
                        <Image css="w-8 h-8" ImageName="ArrowRight.svg" alt="Arrow" />
                    </div>
                </Button>
            </div>
        }
        else
        {
            <LocationSkeleton />
        }
    </div>

    @* Solar Score and Potential Savings *@
    <div class="relative w-full xl:w-3/5 flex flex-col sm:flex-shrink-0 xl:gap-10 md:gap-4">
        <Image ImageName="Robert_Pointing_Down.png" css="absolute right-24 -top-14 xl:-top-16 z-0 h-32 hidden lg:block" alt="Rob" />
        <Card css="relative border-2 scale-90 flex flex-col gap-2 xl:scale-100 border-primary-300 p-4 w-full h-fit my-auto z-10">
            @if (solarScore == -1)
            {
                <SolarScoreSkeleton />
            }
            else
            {
                <div class="my-auto w-full flex gap-4 relative has-tooltip">
                    <Tooltip>
                        <p>@tooltipService.GetTooltip("solarScore")</p>
                    </Tooltip>
                    <div class="bg-gray-100 shadow-md rounded-3xl p-3 w-16 ">
                        <Image ImageName="Sale.svg" alt="Sale" css="scale-150" />
                    </div>
                    <h1 class="text-xl text-primary-800 font-semibold mt-3">Solar Score</h1>
                </div>
                <div class="flex gap-1 mt-3">
                    <p class="text-5xl text-primary-900 font-semibold">@solarScore</p>
                    <p class="text-5xl text-gray-400 font-bold">%</p>
                </div>
                <div
                    class="w-full mb-4 relative h-3 mt-3 rounded-full bg-gradient-to-r from-red-accent-500 via-yellow-accent-500 to-green-500">
                    @{
                        var percentage = solarScore + "%";
                    }
                    <div style="left: @percentage"
                        class="h-6 w-2 rounded-full bg-primary-600 absolute top-1/2 -translate-y-1/2 transition-all duration-900 ">
                    </div>
                </div>
                <div class="flex gap-2 w-full md:w-fit justify-end md:absolute md:top-3 md:right-5">
                    <div class="flex w-full md:w-fit gap-3 justify-end items-end flex-col">
                        <div class="flex flex-col md:flex-row w-full gap-2">
                            <p class="text-primary-800">Savings Calculations Based on an Average Bill of R4500,</p>
                            <p class="text-orange-accent-600 hover:text-primary-500 cursor-pointer"
                            @onclick="ShowModalCalculation">Calculate with Own Bill â†’</p>
                        </div>
                        <div class="bg-gradient-to-r p-4 max-w-md flex gap-2 h-fit from-primary-400 to-primary-300 shadow w-full my-auto rounded-2xl has-tooltip">
                                        <Tooltip>
                                            <p>@tooltipService.GetTooltip("potential savings")</p>
                                        </Tooltip>
                            <div class="w-full h-full flex flex-col lg:flex-row gap-2 justify-center items-center my-auto rounded-2xl">
                                <p class="text-center text-xl font-bold text-primary-100">Potential</p>
                                <p class="text-center text-xl font-bold text-primary-200">Savings</p>
                            </div>
                            <div
                                class="w-1/2 h-full flex gap-2 justify-center p-3 my-auto bg-white items-center rounded-2xl">
                                <p class="text-center text-xl font-bold">R </p>
                                    @{
                                        var savings = Math.Round(avgEnergyProduction * 2.5 * 30, 0);
                                    }
                                <p class="text-center text-xl font-bold">@savings</p>
                                <p class="text-center text-gray-400 text-xl font-bold">p/m </p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </Card>
        <Image ImageName="Robert_T_Pose.png" css="scale-75 absolute left-40 top-[235px] z-0 h-32  hidden lg:block" alt="Rob T Posing" />

        @* Potential System *@
        <Card css="relative border-2 scale-90 flex flex-col gap-2 xl:scale-100 border-primary-300 p-4 w-full h-fit my-auto z-10">
            @if (locationData == null)
            {
                <PotentialSystemSkeleton />
            }
            else
            {
                <div class="my-auto w-full flex gap-4 relative">
                    <div class="bg-gray-100 shadow-md rounded-3xl p-3 w-16 h-16">
                        <Image ImageName="Accumulator.svg" alt="Sale" css="scale-150" />
                    </div>
                    <h1 class="text-xl text-primary-800 font-semibold mt-3">Potential Solar System <br/> with given appliances</h1>
                </div>
                <div class="flex w-full flex-col md:flex-row gap-10">
                    <div class="flex w-full flex-col sm:flex-row gap-5 mt-4">
                        <div class="grid scale-90 grid-cols-2 gap-2 w-full">
                            <Appliance name="Fridge" imageName="Fridge.svg" count="numFridges" />
                            <Appliance name="Stove" imageName="Stove.svg" count="numStove" />
                            <Appliance name="Geyser" imageName="Geyser.svg" count="numGeyser" />
                            <div class="flex mx-auto has-tooltip" @onclick="showModalAppliancesPopup">
                                <Tooltip>
                                    <p>@tooltipService.GetTooltip("solar score add button")</p>
                                </Tooltip>
                                <Appliance css="transition-all duration-300 hover:-translate-y-1 hover:shadow" name="Add"
                                    imageName="AddSquare.svg" />
                            </div>
                        </div>
                        <div class="flex flex-col justify-center w-full">
                            <div class="flex flex-col gap-1 has-tooltip mb-3 -mt-28">
                                <Tooltip pointer="15">
                                    <p>@tooltipService.GetTooltip("average energy produced")</p>
                                </Tooltip>
                                <h3 class="font-medium text-lg text-primary-900 text-center">Avg Energy Produced</h3>
                                <div class="flex gap-1 mt-3 text-center justify-center">
                                    @{
                                        avgEnergyProduction = Math.Round(solarCalculator.getAnnualKwGenerated(numOfPanels,
                                        locationData.solarPanelsData) / 365, 2);
                                    }
                                    <p class="text-5xl text-primary-900 font-semibold">@avgEnergyProduction</p>
                                    <p class="text-5xl text-gray-400 font-bold">kwh</p>
                                </div>
                            </div>
                            <div class="mt-4">
                                <DaylightChart hours="@dlh" daylightHours="@daylight" concurrent="concurrentRuntime"/>
                            </div>
                            <div class="flex flex-col w-full justify-center items-center gap-10">
                                <div class="flex flex-row gap-2 items-center mt-4">
                                    @{
                                        string hexColor = calculationDataHandler.GetColorGradient(dlh);
                                    }
                                    <div class=" h-3 w-3 rounded-sm" style="background-color: @hexColor;"></div>
                                    <div class="flex flex-row gap-1 mr-5 has-tooltip">
                                        <Tooltip pointer="45" direction="top">
                                            <p>@tooltipService.GetTooltip("running hours on batteries")</p>
                                        </Tooltip>
                                        <p class='text-green-600" text-3xl  font-semibold'>@dlh</p>
                                        <p class="text-3xl text-gray-400 font-bold">h</p>
                                    </div>
                                    @{
                                        string hexColorConcurrent = calculationDataHandler.GetColorGradient(concurrentRuntime, 4);
                                    }
                                    <div class=" h-3 w-3 rounded-sm" style="background-color: @hexColorConcurrent;"></div>
                                    <div class="flex flex-row gap-1 has-tooltip">
                                        <Tooltip pointer="45">
                                            <p>@tooltipService.GetTooltip("running hours on batteries")</p>
                                        </Tooltip>
                                        <p class='text-green-600" text-3xl  font-semibold'>@concurrentRuntime</p>
                                        <p class="text-3xl text-gray-400 font-bold">h</p>
                                    </div>
                                </div>
                                <h3 class="font-medium text-lg -mt-10 text-primary-900 text-left">Running Hours on Batteries</h3>
                            </div>
                        </div>
                    </div>
                    <div class="flex flex-col w-full md:w-1/2 mt-20 lg:-mt-16 justify-center items-center gap-4">
                        <div class="-mt-5 mb-5 w-full flex flex-col justify-center items-center gap-4">
                            <div class="has-tooltip">
                                <Tooltip pointer="45">
                                        <p>@tooltipService.GetTooltip("number of panels")</p>
                                    </Tooltip>
                                <Appliance css="scale-90" imageName="SolarPanels.svg" name="Number of Panels"
                                    count="@numOfPanels" />
                            </div>
                            <input type="range" class="accent-primary-800 scale-150 w-2/3 lg:scale-100 lg:w-full  cursor-pointer " min="4" max="20"
                                step="1" @bind-value="@numOfPanels" @oninput="ResetPanelTimer" />
                        </div>
                        <div class="flex gap-2 pr-2 justify-start items-start -mt-10">
                            <div class="flex flex-col gap-2 justify-center items-center w-full has-tooltip">
                                 <div class="has-tooltip">
                                    <Tooltip direction="left" pointer="95">
                                        <p>@tooltipService.GetTooltip("battery utilisation")</p>
                                    </Tooltip>
                                    <div class="h-28 shadow flex-col-reverse flex w-20 p-1 bg-gray-300 relative  rounded-lg">
                                            @{
                                                var percentage = chargingLimitPercentage + "%";
                                            }
                                        <div style="height: @percentage"
                                            class='w-full transition-all rounded-lg @(chargingLimitPercentage > 0 && chargingLimitPercentage < 25 ? "bg-red-accent-500" : chargingLimitPercentage > 25 && chargingLimitPercentage < 50 ? "bg-yellow-accent-500" : chargingLimitPercentage > 50 && chargingLimitPercentage < 75 ? "bg-primary-500" : "bg-primary-800")'>
                                        </div>
                                            <div class="flex gap-1 absolute bottom-2 left-1/2 -translate-x-1/2 ">
                                            <p
                                                class='@(chargingLimitPercentage > 75 ? "text-primary-400" : chargingLimitPercentage < 25 ? "text-primary-100" : "text-primary-900") font-bold text-md'>
                                                @chargingLimitPercentage
                                            </p>
                                            <p class='@(chargingLimitPercentage > 75 ? "text-primary-300" : chargingLimitPercentage < 25 ? "text-primary-300" :"text-primary-700")'>%</p>
                                        </div>
                                        <div
                                            class="w-8 h-4 -z-10 bg-gray-300 rounded-md absolute -top-2 left-1/2 -translate-x-1/2">
                                        </div>
                                    </div>
                                </div>
                                <p class="text-center">Battery Utilisation</p>
                            </div>
                            <div class="has-tooltip">
                                <Tooltip pointer="45">
                                        <p>@tooltipService.GetTooltip("number of batteries")</p>
                                    </Tooltip>
                                <Appliance css="scale-90" ImageName="Batteries.svg" name="Number of Batteries"
                                    count="@numOfBatteries" />
                            </div>
                        </div>
                        <input type="range" class="accent-primary-800 scale-150 w-2/3 lg:scale-100 lg:w-full cursor-pointer -mt-5" min="1" max="6" step="1"
                        @bind-value="@numOfBatteries" @oninput="ResetBatteryTimer" />
                    </div>

                </div>
            }
        </Card>
    </div>
</div>
<ModalPopup @ref="ModalPopupLogIn" Title="Log in to access this feature">
    <p class="max-w-md">To provide you with a personalized experience and save your input data for enhanced
        calculations,
        please log in to our website. Your login helps us tailor our services to your specific needs.</p>
    <div class="flex flex-row gap-4 justify-center">
        <div @onclick="ModalPopupLogIn.Dismiss">
            <Button style="outline">
                <p>Cancel</p>
            </Button>
        </div>
        <div @onclick="NavigateToLogin">
            <Button style="pill">
                <p>Log in</p>
            </Button>
        </div>
    </div>
</ModalPopup>
<ModalPopup @ref="ModalPopupAppliances" Title="Continue with adding appliances?">
    <p class="max-w-md">You can add or remove appliances to get more accurate power usages for your location on our calculations page.</p>
    <p class="max-w-md">Go to calculations page now?</p>
    <div class="flex flex-row gap-4 justify-center">
        <div @onclick="ModalPopupAppliances.Dismiss">
            <Button style="outline" css="w-40">
                <p>Cancel</p>
            </Button>
        </div>
        <div @onclick="NavigateToAdvanced">
            <Button style="pill" css="w-40">
                <p>Calculations</p>
            </Button>
        </div>
    </div>
</ModalPopup>

@code {
    private SharedUtils.locationDataClass locationDataClass = new SharedUtils.locationDataClass();
    private DataHandlers.SolarDataHandler solarCalculator = new DataHandlers.SolarDataHandler();
    private DataHandlers.RooftopDataHandler rooftopDataHandler = new DataHandlers.RooftopDataHandler();
    private DataHandlers.CalculationDataHandler calculationDataHandler = new DataHandlers.CalculationDataHandler();
    [Parameter]
    public LocationDataModel? locationData { get; set; } = null;
    ModalPopup ModalPopupLogIn { get; set; } = new ModalPopup();
    ModalPopup ModalPopupAppliances { get; set; } = new ModalPopup();
    private int solarScore = -1;
    public double avgEnergyProduction = 0.0;
    public string? satteliteImage;
    public int numOfPanels = 8;
    public int numOfBatteries = 3;
    public double appliancePowerUsage = 0.0;
    public int numFridges = 2;
    public int numStove = 2;
    public int numGeyser = 1;
    float dlh = 0f;
    private float concurrentRuntimePercentage = 0f;
    private float concurrentRuntime = 0f; 
    private int daylight = 12;
    private double chargingLimit = 0.0;
    private double chargingLimitPercentage = 50.0;
    private Timer panelTimer = default!;
    private Timer batteryTimer = default!;

    protected override void OnInitialized()
    {
        panelTimer = new Timer(200);
        panelTimer.Elapsed += SetChargingLimit;
        panelTimer.AutoReset = false;
        panelTimer.Enabled = true;

        batteryTimer = new Timer(200);
        batteryTimer.Elapsed += SetRunningHours;
        batteryTimer.AutoReset = false;
        batteryTimer.Enabled = true;
    }

    private async Task GetSatteliteImage() {
        if(locationData != null && locationData.satteliteImageData == null) {
            locationData = await locationDataClass.GetSatelliteImageData(locationData.latitude, locationData.longitude, locationData);
            if(locationData != null && locationData.satteliteImageData != null) {
                Console.WriteLine("Getting sattelite image");
                satteliteImage = rooftopDataHandler.GetSatelliteImage(locationData.satteliteImageData);
                StateHasChanged();
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (locationData != null)
        {
            _ = GetSatteliteImage();
            solarScore = solarCalculator.getSolarScore(locationData.solarPanelsData);
            avgEnergyProduction = Math.Round(solarCalculator.getAnnualKwGenerated(numOfPanels, locationData!.solarPanelsData) / 365,
            2);
            SetGraphicValues();
        }
    }

    private void ResetPanelTimer(ChangeEventArgs e)
    {
        numOfPanels = int.Parse(e.Value!.ToString()!);
        panelTimer.Stop();
        panelTimer.Start();
    }

    private void ResetBatteryTimer(ChangeEventArgs e)
    {
        numOfBatteries = int.Parse(e.Value!.ToString()!);
        batteryTimer.Stop();
        batteryTimer.Start();
    }

    private async void SetChargingLimit(Object? source, ElapsedEventArgs e)
    {
        if (locationData != null)
        {
            SetGraphicValues();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void SetRunningHours(Object? source, ElapsedEventArgs e)
    {
        if (locationData != null)
        {
            SetGraphicValues();
        }
        await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        panelTimer.Dispose();
        batteryTimer.Dispose();
    }

    private void SetGraphicValues()
    {
        appliancePowerUsage = ((numFridges * 500) + (numStove * 2500*4/24) + (numGeyser * 8000*2/24)) / 1000.0;
        var avgEnergyProduction = solarCalculator.getAnnualKwGenerated(numOfPanels, locationData!.solarPanelsData, true, 150) / 365;
        var usableHours = solarCalculator.getSunlightHours(locationData.solarPanelsData, true);
        usableHours = Math.Round(usableHours, 2);
        chargingLimit = (avgEnergyProduction - appliancePowerUsage) * usableHours;
        if (chargingLimit > numOfBatteries * 8)
        {
            chargingLimit = numOfBatteries * 8;
            chargingLimitPercentage = 100;
        }
        else
        {
            chargingLimitPercentage = (chargingLimit / (numOfBatteries * 10)) * 100;
        }
        chargingLimitPercentage = Math.Round(chargingLimitPercentage, 2);

        double runningHours = chargingLimit / appliancePowerUsage;
        double runningHoursPercentage = (runningHours / daylight) * 100;
        dlh = (float)Math.Round((24 - daylight) * (runningHoursPercentage / 100), 2);
        var concurrentRuntimePercentage = calculateConcurrentRunTimePercentage();
        concurrentRuntime = (float)Math.Round((24 - daylight) * (concurrentRuntimePercentage / 100), 2);    
    }

    private float calculateConcurrentRunTimePercentage()
    {
        float powerUsedPerHour = ((numFridges * 250) + (numStove * 2500) + (numGeyser * 8000)) / 1000f;
        float runningHours = float.Parse(chargingLimit.ToString()) / powerUsedPerHour;
        float nonDaylightHours = 12;
        float concurrentPercentage = (runningHours / nonDaylightHours) * 100;
        if(concurrentPercentage > 825) {
            concurrentPercentage = 825;
        }
        return concurrentPercentage;
    }

    private async void ShowModalCalculation()
    {
        var logIn = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
        bool isLoggedIn = logIn.Value;
        if (isLoggedIn)
        {
            NavigationManager.NavigateTo("/advanced");
        }
        else
        {
            ModalPopupLogIn.Show();
            StateHasChanged();
        }
    }

    private async void showModalAppliancesPopup()
    {
        var logIn = await ProtectedLocalStore.GetAsync<bool>("loggedIn");
        bool isLoggedIn = logIn.Value;
        if (isLoggedIn)
        {
            ModalPopupAppliances.Show();
        }
        else
        {
            ModalPopupLogIn.Show();
        }
        StateHasChanged();
    }
    private async void NavigateToLogin()
    {
        await ProtectedSessionStore.SetAsync("redirect", "advanced");
        ModalPopupLogIn.Dismiss();
        NavigationManager.NavigateTo("/Login");
    }
    private void NavigateToAdvanced()
    {
        ModalPopupAppliances.Dismiss();
        NavigationManager.NavigateTo("/advanced");
    }
}