@using BlazorApp.Components.Base
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore

<div class="mt-20 text-center">
    <Heading>
        <Header>
            @if (reportName != null)
            {
                <h1 class="text-3xl">@reportName</h1>
            }
            else
            {
                <h1 class="text-3xl">Your results in numbers</h1>
            }
        </Header>
        <Subscript>
            <p class="text-primary-700">The following numbers are based on your location.</p>
        </Subscript>
    </Heading>
</div>
<div class="flex flex-col xl:flex-row w-fit mx-auto gap-4 mt-10">
    <div class="w-80 mx-auto">
        <Map scale="scale-[2.6]" imageName="@satteliteImage" />
    </div>
    <div class="flex mx-auto flex-col px-2 sm:flex-row gap-5">
        <Card css="border-2 border-primary-300 p-4 w-60 h-60 my-auto relative">
            <div class="bg-gray-100 shadow-md rounded-3xl  p-3 w-16 ">
                <Image ImageName="Sale.svg" alt="Sale" css="scale-150" />
            </div>
            <h1 class="text-lg text-primary-800 font-semibold mt-3">Solar Score</h1> <br />
            <div class="flex gap-1 mt-0">
                <p class="text-3xl text-primary-900 font-semibold">@solarScore</p>
                <p class="text-3xl text-gray-400 font-bold">%</p>
            </div>
        </Card>
        <Card css="border-2 border-primary-300 p-4 w-60 h-60 my-auto">
            <div class="bg-gray-100 shadow-md rounded-3xl p-3 w-16 ">
                <Image ImageName="History.svg" alt="Sale" css="scale-150" />
            </div>
            <h1 class="text-lg w-full text-primary-800 font-semibold mt-3">Usable hours of sunlight per day</h1>
            <div class="flex gap-1 mt-3">
                @{
                    var usableHours = 0.0;
                    if (currentLocationData != null)
                    {
                        usableHours = currentLocationData.daylightHours;
                        usableHours = Math.Round(usableHours, 2);
                    }
                }
                <p class="text-3xl text-primary-900 font-semibold">@usableHours</p>
                <p class="text-3xl text-gray-400 font-bold">h</p>
            </div>
        </Card>
        <Card css="border-2 border-primary-300 p-4 w-60 h-60 my-auto">
            <div class="bg-gray-100 shadow-md rounded-3xl p-3 w-16">
                <Image ImageName="Accumulator.svg" alt="Sale" css="scale-150" />
            </div>
            <h1 class="text-lg text-primary-800 font-semibold mt-3">Avg Energy Production</h1>
            <div class="flex gap-1 mt-3">
                @{
                    var avgEnergyProduction = 0.0;
                    if (currentLocationData != null && systems != null)
                    {
                        avgEnergyProduction = solarCalculator.getAnnualKwGenerated(systems[selectedSystem].numberOfPanels, currentLocationData.solarPanelsData, true);
                    }
                }
                <p class="text-3xl text-primary-900 font-semibold">@avgEnergyProduction</p>
                <p class="text-3xl text-gray-400 font-bold">kw/h</p>
            </div>
        </Card>
    </div>
</div>

@code {
    private DataHandlers.SolarDataHandler solarCalculator = new DataHandlers.SolarDataHandler();
    private DataHandlers.RooftopDataHandler rooftopDataHandler = new DataHandlers.RooftopDataHandler();
    private string? satteliteImage;

    [Parameter]
    public List<SystemModel>? systems { get; set; }
    [Parameter]
    public int selectedSystem { get; set; }
    [Parameter]
    public string? reportName { get; set; }
    [Parameter]
    public LocationDataModel currentLocationData { get; set; } = new LocationDataModel();
    public int solarScore { get; set; }

    /// <summary>
    /// <list type="bullet">
    ///     <item> Get the latitude and longitude from the session storage </item>
    ///     <item> Get the solar score from the session storage </item>
    ///     <item> Call the GetSolarScore function </item>
    /// </list>
    /// </summary>    

    protected override void OnInitialized()
    {
        satteliteImage = rooftopDataHandler.GetSatelliteImage(currentLocationData.satteliteImageData!);
        solarScore = solarCalculator.getSolarScore(currentLocationData.solarPanelsData!);
    }
}