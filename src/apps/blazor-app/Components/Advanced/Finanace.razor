@* Solar ROI calculator *@

@using ChartJs.Blazor.BarChart
@using BlazorApp.Models

<h1>Solar ROI Calculator</h1>

<div class="">
    <input type="range" min="1000" max="7000" step="100" @bind="sliderValue" @oninput="HandleSliderChange" />
</div>
<p>@sliderValue</p>
<div class="w-1/2 h-1/2">
    <Chart Config="barConfig"></Chart>
</div>

@code {
    private BarConfig? barConfig;
    private int sliderValue = 50;
    private BarDataset<double>? dataset;


    protected override void OnInitialized() {
        barConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Solar ROI Calculator"
                },
                Legend = new Legend
                {
                    Position = Position.Bottom,
                    Display = false
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "System Size",
                                Display = true
                            },
                            GridLines = new GridLines
                            {
                                Display = false
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                Display = false, 
                                Min = 0
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "ROI",
                                Display = true
                            },
                            GridLines = new GridLines
                            {
                                Display = false
                            }
                        }
                    }
                }
            }
        };

        var labels = new List<string> { "5kw", "8kw", "12kw", "16kw" };
        dataset = new BarDataset<double> { BackgroundColor = "#d2d2d2" };

        dataset.HoverBackgroundColor = "#f2f2f2";

        // Example data (replace with your data)
        var systems = CalculateROI(sliderValue);
        dataset.AddRange(systems.Select(x => x.ROI));


        foreach (var label in labels)
        {
            barConfig.Data.Labels.Add(label);
        }
        barConfig.Data.Datasets.Add(dataset);

    }

    private void HandleSliderChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value!.ToString(), out int newValue))
        {
            sliderValue = newValue;
            var systems = CalculateROI(sliderValue);
            dataset!.Clear();
            dataset!.AddRange(systems.Select(x => x.ROI)); 
            barConfig!.Data.Datasets.Clear();
            barConfig.Data.Datasets.Add(dataset);
        }
    }


    

    public List<SystemInfo> CalculateROI(double bill, bool pushback = true)
    {
        double powerRate = 2.50;
        double pushbackRate = 0.8;
        double usagePM = bill / powerRate;
        List<SystemInfo> systems = new List<SystemInfo>
        {
            new SystemInfo
            {
                Size = "5kw",
                Usage = (int)(8 * 72),
                Cost = 170000
            },
            new SystemInfo
            {
                Size = "8kw",
                Usage = (int)(14 * 72),
                Cost = 226000
            },
            new SystemInfo
            {
                Size = "12kw",
                Usage = (int)(20 * 72),
                Cost = 320000
            },
            new SystemInfo
            {
                Size = "16kw",
                Usage = (int)(32 * 72),
                Cost = 452000
            }
        };

        foreach (var el in systems)
        {
            el.Coverage = Math.Round(usagePM - el.Usage, 1);
            el.Extra = 0;
            if (el.Coverage < 0)
            {

                el.Extra = (int)Math.Round(-el.Coverage, 0);
                el.Coverage = 0;
                if (el.Extra > usagePM)
                {
                    el.Extra = (int)usagePM;
                }
            }
            el.ExtraSavings = (int)Math.Round(el.Extra * pushbackRate, 0);
            el.NewBill = (int)Math.Round(el.Coverage * powerRate, 0);
            el.Savings = (int)Math.Round(bill - el.NewBill, 0);

            if (pushback)
            {
                el.Savings += el.ExtraSavings;
            }
            el.ROI = Math.Round(el.Cost / (el.Savings * 12), 1);
        }

        return systems;
    }


}
