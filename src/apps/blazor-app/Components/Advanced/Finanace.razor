@* Solar ROI calculator *@

@using ChartJs.Blazor.BarChart
@using BlazorApp.Models
@using BlazorApp.Components.Base
@using System.Timers
@implements IDisposable

<Heading css="mb-16 mt-16 max-w-3xl mx-auto">
    <Superscript><h1 class="text-center">Potential Savings and</h1></Superscript >
    <Header><h1 class="text-center">Solar ROI Calculator</h1></Header>
    <Subscript><p class="text-center">All calculations are derived from the monthly bill. Please keep in mind that these calculations are approximate, and costs may vary among different solar installers."</p></Subscript>
</Heading>

<div class="w-full flex justify-center">
    <div class="flex flex-col gap-2 items-center justify-center p-4 w-11/12 rounded-3xl bg-gradient-to-tr from-primary-400 to-primary-500">
        <p class="text-center text-white font-semibold">Select your monthly bill:</p>
        <h1 class="text-center text-4xl font-black w-fit text-transparent bg-clip-text bg-gradient-to-l from-primary-100 to-primary-200">R @monthlyBill</h1>
        <input type="range" class="accent-primary-800  cursor-pointer w-3/4" min="1000" max="7000" step="100" @bind="monthlyBill" @oninput="ResetTimer" />
    </div>
</div>

<div class="flex gap-5 justify-center items-center mt-10">
    <div class="w-1/2 h-1/2 mt-10">
        <Chart Config="barConfig"></Chart>
    </div>
    <div class="flex w-2/5 flex-col gap-4 p-2 justify-center">
        <div class="bg-gradient-to-r p-4 flex gap-2 from-primary-400 to-primary-300 shadow w-2/3 h-1/2 rounded-2xl">
            <div class="w-full h-full flex flex-col gap-2 justify-center items-center  rounded-2xl">
                <p class="text-center text-xl font-bold text-primary-100">Potential Payback</p>
                <p class="text-center text-xl font-bold text-primary-200">in years</p>
            </div>
            <div class="w-1/2 h-full flex justify-center p-3 my-auto bg-white items-center rounded-2xl">
                <p class="text-center text-xl font-bold">@min</p>
            </div>
        </div>
        <div class="bg-gradient-to-r p-4 flex gap-2 from-primary-400 to-primary-300 shadow w-2/3 h-1/2 rounded-2xl">
            <div class="w-full h-full flex flex-col gap-2 justify-center items-center  rounded-2xl">
                <p class="text-center text-xl font-bold text-primary-100">Savings</p>
                <p class="text-center text-xl font-bold text-primary-200">per month</p>
            </div>
            <div class="w-1/2 h-full flex justify-center p-3 my-auto bg-white items-center rounded-2xl">
                <p class="text-center text-xl font-bold">R @activeSystem?.Savings</p>
            </div>
        </div>
    </div>
</div>

@code {
    private BarConfig? barConfig;
    private int monthlyBill = 3500;
    private BarDataset<double>? dataset;
    private string[] colors = { "#d2d2d2", "#d2d2d2", "#d2d2d2", "#d2d2d2" };
    private double min = 0;
    private SystemInfo? activeSystem;
    Timer timer = default!;


    protected override  void OnInitialized() {
        timer = new Timer(10);
        timer.Elapsed += HandleBillSliderChange;
        timer.AutoReset = true;
        timer.Enabled = true;

        barConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = false,
                },
                Legend = new Legend
                {
                    Position = Position.Bottom,
                    Display = false
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "System Size",
                                Display = true
                            },
                            GridLines = new GridLines
                            {
                                Display = false
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                Display = false, 
                                Min = 0
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Years",
                                Display = true
                            },
                            GridLines = new GridLines
                            {
                                Display = false
                            }
                        }
                    }
                }
            }
        };

        var labels = new List<string> { "5kw", "8kw", "12kw", "16kw" };
        dataset = new BarDataset<double> { BackgroundColor = colors };
        dataset.HoverBackgroundColor = "#f2f2f2";

        // Example data (replace with your data)
        var systems = CalculateROI(monthlyBill);
        dataset.AddRange(systems.Select(x => x.ROI));
        monthlyBill = 1500;
        Highlight();

        foreach (var label in labels)
        {
            barConfig.Data.Labels.Add(label);
        }
        barConfig.Data.Datasets.Add(dataset);
    }

    private void ResetTimer(ChangeEventArgs e)
    {
        timer.Stop();
        int.TryParse(e.Value!.ToString(), out monthlyBill);
        timer.Start();
    }

    private void HandleBillSliderChange(Object? source, ElapsedEventArgs e)
    {
        var round = Math.Round((monthlyBill / 2.5) / 10.0, 0);
        UpdateGraph();
    }

    void IDisposable.Dispose()
    {
        timer.Dispose();
    }

    private void UpdateGraph(){
        var systems = CalculateROI(monthlyBill);
        dataset!.Clear();
        dataset!.AddRange(systems.Select(x => x.ROI)); 
        Highlight();
        barConfig!.Data.Datasets.Clear();
        barConfig.Data.Datasets.Add(dataset);
    }

    private void Highlight(int index = -1)
    {
        //calculate min roi in systems
        var systems = CalculateROI(monthlyBill);
        min = systems.Min(x => x.ROI);

        if (index == -1)
        {
            index = systems.FindIndex(x => x.ROI == min);
        }

        for (int i = 0; i < colors.Length; i++)
        {
            colors[i] = "#d2d2d2";
            if (i == index)
            {
                colors[i] = "#3871C1";
                activeSystem = systems[i];
            }
        }
        dataset!.BackgroundColor = colors;
    }

    public List<SystemInfo> CalculateROI(double bill, bool pushback = true)
    {
        double powerRate = 2.50;
        double pushbackRate = 0.8;
        double usagePM = bill / powerRate;
        List<SystemInfo> systems = new List<SystemInfo>
        {
            new SystemInfo
            {
                Size = "5kw",
                Usage = (int)(8 * 72),
                Cost = 170000
            },
            new SystemInfo
            {
                Size = "8kw",
                Usage = (int)(14 * 72),
                Cost = 226000
            },
            new SystemInfo
            {
                Size = "12kw",
                Usage = (int)(20 * 72),
                Cost = 320000
            },
            new SystemInfo
            {
                Size = "16kw",
                Usage = (int)(32 * 72),
                Cost = 452000
            }
        };

        foreach (var el in systems)
        {
            el.Coverage = Math.Round(usagePM - el.Usage, 1);
            el.Extra = 0;
            if (el.Coverage < 0)
            {

                el.Extra = (int)Math.Round(-el.Coverage, 0);
                el.Coverage = 0;
                if (el.Extra > usagePM)
                {
                    el.Extra = (int)usagePM;
                }
            }
            el.ExtraSavings = (int)Math.Round(el.Extra * pushbackRate, 0);
            el.NewBill = (int)Math.Round(el.Coverage * powerRate, 0);
            el.Savings = (int)Math.Round(bill - el.NewBill, 0);

            if (pushback)
            {
                el.Savings += el.ExtraSavings;
            }
            el.ROI = Math.Round(el.Cost / (el.Savings * 12), 1);
        }

        return systems;
    }


}
