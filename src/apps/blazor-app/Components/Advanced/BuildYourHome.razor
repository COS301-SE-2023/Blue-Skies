@using BlazorApp.Components
@using BlazorApp.Components.Base
@using BlazorApp.Models
@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject BlazorApp.Data.ToastService toastService
@inject BlazorApp.Data.ApplianceService applianceService


<div class="flex flex-col gap-5 lg:flex-row w-full h-full  items-center px-4">
    <div class="w-full flex flex-col justify-center items-center ">
        @* Home Template Dropdown *@
        <div class="w-60 text-center my-auto translate-y-10">
            @if (systems.Count == 0)
            {
                <div role="status" class="max-w-sm animate-pulse justify-center">
                    <div class="h-3 bg-gray-200 rounded-full dark:bg-gray-700 w-[70px] mb-2.5 mx-auto"></div>
                    <div class="h-8 bg-gray-200 rounded-full dark:bg-gray-700 w-[240px] p-2.5"></div>
                    <span class="sr-only">Loading...</span>
                </div>
            } else {
                <h2 class="text-sm mb-2 font-medium text-gray-900">Home size</h2>
                <select @onchange="ApplyTemplate" id="selectHome"
                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 w-full p-2.5">
                    <option disabled selected value="1">Select a template</option>
                    <option value="2">2 Bedroom House</option>
                    <option value="3">3 Bedroom House</option>
                    <option value="4">4+ Bedroom House</option>
                </select>
            }
        </div>
    </div>
</div>
@* Add Appliances *@
<div class="hidden lg:flex w-full h-full px-4 mb-20">
    <div class="w-4/12 grid grid-cols-2 justify-center scale-90 gap-4 -mt-4">
        <div class="flex flex-col gap-4 col-span-2 items-center justify-center mb-4 -mt-8">
            <h1 class="text-blue-950 translate-y-8 font-semibold col-span-2 text-center text-3xl mb-5 ">Build your home</h1>
            <div class="flex gap-3 w-full relative justify-center">
                <h1 class="text-base font-medium text-center mb-2  text-primary-900">Select Appliances</h1>
                <div class="group">
                    <Image ImageName="Info.svg" alt="Info" css="w-7 hover:-translate-y-1 transition-all duration-300" />
                    <div
                        class="absolute hidden fade-in-active w-full -top-10 translate-x-10 max-w-md  group-hover:block transition-all duration-300 ease-in-out text-sm  bg-primary-200 shadow rounded-t-2xl rounded-r-2xl p-4 group-hover:-translate-y-10 ">
                        <p class="text-gray-900">Click on the appliances to add them to your calculation.</p>
                    </div>
                </div>
            </div>
            <div class="grid mx-auto gap-4 space-y-2 grid-cols-2 mt-2 justify-center">
                @if (appliances != null)
                {
                    if (tabs[0].active)
                    {
                        @foreach (var appliance in appliances)
                        {
                                        <div @onclick="@(() => IncrementApplianceCount(appliance))">
                                            <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1" imageName="@(appliance.type + ".svg")" name="@appliance.type" count="@appliance.quantity" />
                                        </div>
                        }
                    }
                    else
                    {
                        @foreach (var appliance in appliances)
                        {
                                        <div @onclick="@(() => DecrementApplianceCount(appliance))">
                                            <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1"
                                                imageName="@(appliance.type + ".svg")" name="@appliance.type" count="@appliance.quantity" />
                                        </div>
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < 8; i++)
                    {
                        <div class="justify-center">
                            <div class="flex bg-gray-100 shadow-md rounded-3xl mx-auto p-3 w-[80px] h-[80px] animate-pulse">
                                <svg class="w-14 h-14 text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                    <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                                </svg>
                            </div>
                            <div role="status" class="max-w-sm animate-pulse mt-3">
                                <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-[100px] mb-2.5"></div>
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    <div class="w-full pl-64 flex flex-col justify-center items-center">
        @* Home images *@
        <div class="flex pjustify-center items-center h-full">
            @switch (selectedSystem)
            {
                case 0:
                    homeType = "-Home1.svg";
                    break;
                case 1:
                    homeType = "-Home2.svg";
                    break;
                case 2:
                    homeType = "-Home3.svg";
                    break;
                case 3:
                    if (systems[3].inverterOutput <= 5)
                    {
                        homeType = "-Home1.svg";
                    }
                    else if (systems[3].inverterOutput <= 8)
                    {
                        homeType = "-Home2.svg";
                    }
                    else
                    {
                        homeType = "-Home3.svg";
                    }
                    break;
                default:
                    homeType = "-Home1.svg";
                    break;
            }
            @{
                homeImage = homeSize + homeType;
            }
            <Image ImageName="@homeImage" alt="Home" css="w-10/12 h-full" />
        </div>
    </div>
    <div class="w-6/12 px-1 flex flex-col justify-center items-center gap-4 -mt-4">
    @* Select System Size *@
        <div class="text-center mt-2 space-y-5">
            <h1 class="text-blue-950 translate-y-8 font-semibold text-center text-3xl mb-5 ">Solar System</h1>
            <div class="flex gap-3 w-full relative justify-center">
                <h1 class="text-base font-medium text-center mb-2  text-primary-900">Inverter size</h1>
                <div class="group">
                    <Image ImageName="Info.svg" alt="Info" css="w-7 hover:-translate-y-1 transition-all duration-300" />
                    <div
                        class=" transform -scale-x-100 absolute hidden fade-in-active w-full -top-[70px] -translate-x-64 max-w-md group-hover:block transition-all duration-300 ease-in-out text-sm  bg-primary-200 shadow rounded-t-2xl rounded-r-2xl p-4 group-hover:-translate-y-10 ">
                        <p class="text-gray-900 transform -scale-x-100">Your inverter determines how many appliances you can run at once</p>
                    </div>
                </div>
            </div>
            @if (systems.Count > 2)
            {  
                <div class="flex space-x-9">
                    @{
                        var small = systems[0].inverterOutput + "kw";
                        var medium = systems[1].inverterOutput + "kw";
                        var large = systems[2].inverterOutput + "kw";
                    }
                                <div onclick="@(() => SetSystemSize(0))"
                                    class=" flex shadow-md transition-all duration-500  @(selectedSystem == 0 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                                    <p class=" font-semibold">@small</p>
                                </div>
                                <div onclick="@(() => SetSystemSize(1))"
                                    class="flex shadow-md transition-all duration-500 @(selectedSystem == 1 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                                    <p class="font-semibold">@medium</p>
                                </div>
                                <div onclick="@(() => SetSystemSize(2))"
                                    class="flex shadow-md transition-all duration-500 @(selectedSystem == 2 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                                    <p class="font-semibold">@large</p>
                                </div>
                            </div>
                            <div class="flex justify-center h-24">
                    @if (showCustomSystem)
                    {
                        if (displayCreatedCustomSystem)
                        {
                            var customSize = systems[3].inverterOutput + "kw";
                                        <div @onclick="CreateCustomSystem"
                                            class="flex shadow-md transition-all duration-500 @(selectedSystem == 3 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-24 h-16">
                                            <p class="font-semibold">@customSize</p>
                                        </div>
                        }
                        else
                        {
                                        <div>
                                            <div class="gap-2 px-6">
                                                <input class="text-center focus:outline-none" type="number" placeholder="Enter System Size" @bind="systems[3].inverterOutput"/>
                                            </div>
                                            <div @onclick="CreateCustomSystem" class="mx-auto pt-4 w-24">
                                                <Button style="pill" >
                                                    <content>
                                                        <p  class="font-semibold">Create</p>
                                                    </content>
                                                </Button>
                                            </div>
                                        </div>
                        }
                    }
                    else
                    {
                                <div @onclick="CustomSystemSelected">
                                    <Button style="pill" >
                                        <content>
                                            <p  class="font-semibold">Custom</p>
                                        </content>
                                    </Button>
                                </div>
                    }
                        </div>
            }
            else
            {
                    <div class="flex space-x-9">
                        <div class="flex bg-gray-100 shadow-md rounded-3xl  p-3 w-[65px] h-[65px] animate-pulse">
                            <svg class="w-9 h-9 text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                            </svg>
                        </div>
                        <div class="flex bg-gray-100 shadow-md rounded-3xl  p-3 w-[65px] h-[65px] animate-pulse">
                            <svg class="w-9 h-9 text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                            </svg>
                        </div>
                            <div class="flex bg-gray-100 shadow-md rounded-3xl  p-3 w-[65px] h-[65px] animate-pulse">
                            <svg class="w-9 h-9 text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                            </svg>
                        </div>
                    </div>
                    <div class="flex justify-center h-24">
                        <div role="status" class="max-w-sm animate-pulse">
                            <div class="h-8 bg-gray-200 rounded-full dark:bg-gray-700 w-[105px] mb-2.5"></div>
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
            }

        </div>
    @* System details *@
        <h1 class="text-base font-medium text-center text-primary-900">What this means for you</h1>
        <div class="flex justify-between gap-4 scale-75">
            @if (systems.Count > 0)
            {
                if (showCustomSystem)
                {
                            <div @onclick='@(() => CustomSystemModal("Panels"))'>
                                <Appliance ImageName="SolarPanels.svg" name="Number of Panels"
                                    count=@systems[3].numberOfPanels />
                            </div>
                            <div @onclick='@(() => CustomSystemModal("Batteries"))'>
                                <Appliance ImageName="Batteries.svg" name="Number of Batteries"
                                    count=@systems[3].numberOfBatteries />
                            </div>
                }
                else
                {
                            <Appliance ImageName="SolarPanels.svg" name="Number of Panels"
                                count=@systems[selectedSystem].numberOfPanels />
                            <Appliance ImageName="Batteries.svg" name="Number of Batteries"
                                count=@systems[selectedSystem].numberOfBatteries />
                }
            }
            else
            {
                    <div class="flex space-x-9">
                        <div class="justify-center">
                            <div class="flex bg-gray-100 shadow-md rounded-3xl mx-auto p-3 w-[80px] h-[80px] animate-pulse">
                                <svg class="w-14 h-14 text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                    <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                                </svg>
                            </div>
                            <div role="status" class="max-w-sm animate-pulse mt-3">
                                <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-[125px] mb-2.5"></div>
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        <div class="justify-center">
                            <div class="flex bg-gray-100 shadow-md rounded-3xl mx-auto p-3 w-[80px] h-[80px] animate-pulse">
                                <svg class="w-14 h-14 text-gray-200 dark:text-gray-600" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                    <path d="M18 0H2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2Zm-5.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm4.376 10.481A1 1 0 0 1 16 15H4a1 1 0 0 1-.895-1.447l3.5-7A1 1 0 0 1 7.468 6a.965.965 0 0 1 .9.5l2.775 4.757 1.546-1.887a1 1 0 0 1 1.618.1l2.541 4a1 1 0 0 1 .028 1.011Z"/>
                                </svg>
                            </div>
                            <div role="status" class="max-w-sm animate-pulse mt-3">
                                <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-[125px] mb-2.5"></div>
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    </div>
            }
        </div>
        <h3 class="font-medium text-lg text-primary-900 text-left">Running Hours on Batteries</h3>
        <div class="flex relative flex-col justify-center w-full">
            @{
                dlh = 0;
                if (currentReport != null)
                {
                    daylight = 12;
                    dlh = (float)Math.Round((24 - daylight) * (runningHoursPercentage / 100), 2);

                }
            }
            <DaylightChart hours="@dlh" daylightHours="@daylight" />
            <div class="flex w-full justify-center absolute top-1/2 left-0 items-center gap-1 mt-20">
                    @{
                        if (dlh == (24 - daylight))
                        {
                                    <p class="text-5xl text-primary-900 font-semibold">@dlh+</p>
                        }
                        else
                        {
                                    <p class="text-5xl text-primary-900 font-semibold">@dlh</p>
                        }
                    }
                <p class="text-5xl text-gray-400 font-bold">h</p>
            </div>
        </div>
    </div>
</div>



<ModalPopup @ref="SystemModalPopup" Title=@customModalTitle>

    @if (@customModalTitle == "Number of Solar Panels")
    {
            <p>Number of solar panels:</p>
            <Input  @bind-InputValue="customPanels" placeholder="8" type="number" min="4"/>
            <p>Solar panel power output (W/h): </p>
            <Input  @bind-InputValue="customPanelsInput" placeholder="500" type="number" value="customPanelsInputNumber" min="300"/>
    }
    else
    {
            <p>Number of batteries: </p>
            <Input  @bind-InputValue="customBatteries" placeholder="1" type="number" min="1"/>    
            <p>Battery Size (kW): </p>
            <Input  @bind-InputValue="customBatteriesSize" placeholder="10" type="number" min="4"/>
    }
    @if (!isNumericValue)
    {
           <p class="mt-8 text-red-600 font-bold">Please provide valid input <br/> for all fields</p>
    }
            <div class="flex flex-row gap-4 justify-center">

        @if (@customModalTitle == "Number of Solar Panels")
        {
            <div @onclick="SetPanels">
                <Button>
                    <content>
                        Save
                    </content>
                </Button>
            </div>
        }
        else
        {
            <div @onclick="SetNumberOfBatteries">
                <Button>
                    <content>
                        Save
                    </content>
                </Button>
            </div>
        }
            <div @onclick="SystemModalPopup.Dismiss">
                <Button style="outline">
                    <content>Cancel</content>
                </Button>
            </div>
        </div>
</ModalPopup>  

<ModalPopup @ref="ModalPopup" Title="Save your calculation?">
    @if (edit)
    {
            <p>Rename this calculation?</p>
    }
    else
    {
            <p>Add a nickname for this calculation:</p>
    }
        <Input @bind-InputValue="calculationName" placeholder="Nickname" />
        <div class="flex flex-row gap-4 justify-center">
        @if (edit)
        {
                <div @onclick="UpdateCalculation">
                    <Button>
                        <content>
                        Update
                            </content>
                    </Button>
                </div>
        }
        else
        {
                <div @onclick="SaveCalculation">
                    <Button>
                        <content>
                            Save
                        </content>
                    </Button>
                </div>
        }
            <div @onclick="ModalPopup.Dismiss">
                <Button style="outline">
                    <content>Cancel</content>
                </Button>
            </div>
        </div>
</ModalPopup>


@* Mobile Viewport *@
@* <div class="flex flex-col justify-center lg:hidden w-full h-full px-4">
    <div class="w-full px-4 flex flex-col justify-center items-center gap-4">
        <h1 class="text-base font-medium text-center text-primary-900">What this means for you</h1>
        <div class="flex justify-between gap-4 mt-4 mb-16">
            <Appliance ImageName="SolarPanels.svg" Name="Number of Panels"
                Count=@systems[selectedSystem].numberOfPanels />
            <Appliance ImageName="Batteries.svg" Name="Number of Batteries"
                Count=@systems[selectedSystem].numberOfBatteries />
        </div>
    </div>
    <div class="w-full flex flex-col justify-center items-center">
        <div class="flex mb-10 justify-center items-center h-full">
            @switch (selectedSystem)
            {
                case 0:
                    <Image ImageName="Small-Home3.svg" alt="House" css="scale-95" />
                    break;
                case 1:
                    <Image ImageName="Small-Home2.svg" alt="House" css="scale-95" />
                    break;
                case 2:
                    <Image ImageName="Small-Home1.svg" alt="House" css="scale-95" />
                    break;
                case 3:
                    if (systems[3].inverterOutput <= 5)
                    {
                        <Image ImageName="Small-Home3.svg" alt="House" css="scale-95" /> 
                    }
                    else if (systems[3].inverterOutput <= 8)
                    {
                        <Image ImageName="Small-Home2.svg" alt="House" css="scale-95" />
                    }
                    else
                    {
                        <Image ImageName="Small-Home1.svg" alt="House" css="scale-95" />
                    }
                    break;
                default:
                        <Image ImageName="Small-Home2.svg" alt="House" css="scale-95" />
                    break;
            }
        </div>
        <DaylightChart hours="@daylight" daylightHours="@dlh" />
    </div>
    <h1 class="text-base font-medium text-center mb-2  text-primary-900">Select Appliances</h1>
    <div class="flex justify-center items-center  my-7">
        <Tabs @bind-Items="tabs"></Tabs>
    </div>
    <div class="grid mx-auto gap-4 space-y-2 grid-cols-2 mt-2 justify-center">
        @if (tabs[0].active)
        {
            @foreach (var appliance in appliances)
            {
                if (appliance.quantity > 0)
                {
                    <div @onclick="@(() => IncrementApplianceCount(appliance))">
                        <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1"
                            ImageName="@(appliance.type + ".svg")" Name="@appliance.type" Count="@appliance.quantity" />
                    </div>
                }
                else
                {
                    <div class="fade-in-active" @onclick="@(() => IncrementApplianceCount(appliance))">
                        <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1"
                            ImageName="@(appliance.type + ".svg")" Name="@appliance.type" />
                    </div>
                }
            }
        }
        else
        {
            @foreach (var appliance in appliances)
            {
                if (appliance.quantity > 0)
                {
                    <div @onclick="@(() => DecrementApplianceCount(appliance))">
                        <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1"
                            ImageName="@(appliance.type + ".svg")" Name="@appliance.type" Count="@appliance.quantity" />
                    </div>
                }
                else
                {   
                    <div class="fade-in-active">
                        <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1"
                            ImageName="@(appliance.type + ".svg")" Name="@appliance.type" />
                    </div>
                }
            }
        }
    </div>
</div> *@

@code {
    private SharedUtils.reportClass reportClass = new SharedUtils.reportClass();
    private SharedUtils.reportApplianceClass reportApplianceClass = new SharedUtils.reportApplianceClass();

    private DataHandlers.SystemsDataHandler systemsDataHandler = new DataHandlers.SystemsDataHandler();
    private DataHandlers.CalculationDataHandler calculationDataHandler = new DataHandlers.CalculationDataHandler();
    private SharedUtils.systemClass systemClass = new SharedUtils.systemClass();

    [Parameter]
    public List<ApplianceModel> appliances { get; set; } = new List<ApplianceModel>();
    [Parameter]
    public List<SystemModel> systems { get; set; } = new List<SystemModel>();
    [Parameter]
    public int selectedSystem { get; set; }
    [Parameter]
    public EventCallback<int> selectedSystemChanged { get; set; }
    [Parameter]
    public List<ReportAllApplianceModel>? reportAllAppliance { get; set; }
    [Parameter]
    public ReportModel? currentReport { get; set; }
    [Parameter]
    public bool edit { get; set; }
    [Parameter]
    public LocationDataModel? currentLocationData { get; set; }
    [Parameter]
    public List<ApplianceModel>? allAppliances { get; set; }
    private List<ReportModel> reports = new List<ReportModel>();
    private int userId = -1;
    public ModalPopup ModalPopup { get; set; } = new ModalPopup();
    private ModalPopup SystemModalPopup { get; set; } = new ModalPopup();
    private string? calculationName { get; set; }
    private List<ApplianceModel> applianceQuantities = new List<ApplianceModel>();
    private List<TabItemModel> tabs = new List<TabItemModel>
    {
        new TabItemModel("Add", true),
        new TabItemModel("Remove", false)
    };
    private List<TabItemModel> categories = new List<TabItemModel>
    {
        new TabItemModel("Kitchen", true),
        new TabItemModel("Entertainment", false),
        new TabItemModel("General", false)
    };
    float runningHoursPercentage = 0f;
    float dlh = 0f;
    float daylight = 0f;
    DaylightChart daylightChart = new DaylightChart();
    private string homeSize = "Small";
    private string homeType = "";
    private string homeImage = "";
    private bool showCustomSystem = false;
    private bool displayCreatedCustomSystem = false;
    private string customPanels = "";
    private string customBatteries = "";
    private string customPanelsInput = "";
    private string customBatteriesSize = "";
    private string customModalTitle = "";
    private bool isNumericValue = true;



    /// <summary>
    /// On initialisation, get the user id from local storage
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var usId = await ProtectedLocalStore.GetAsync<int>("userId");
        userId = usId.Value;
        if (currentReport!.homeSize != null)
        {
            homeSize = currentReport.homeSize;
        }
        if (systems.Count > 0)
        {
            customPanels = "" + systems[3].numberOfPanels;
            customBatteries = "" + systems[3].numberOfBatteries;
            customPanelsInput = "" + systems[3].solarInput;
            customBatteriesSize = "" + systems[3].batterySize;
            runningHoursPercentage = systemsDataHandler.CalculateRunningHours(systems[selectedSystem].numberOfBatteries, systems[selectedSystem].batterySize * 1000, appliances);
        }
    }

    /// <summary>
    /// On parameters set, set the appliance quantities to the values from the report
    /// </summary>
    protected override void OnParametersSet()
    {
        if (selectedSystem == 3)
        {
            showCustomSystem = true;
            displayCreatedCustomSystem = true;
        }

        if (reportAllAppliance != null)
        {
            for (int i = 0; i < reportAllAppliance!.Count; i++)
            {

                if (reportAllAppliance[i].type!.Equals("Kettle"))
                {
                    appliances[0].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("Fridge"))
                {
                    appliances[1].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("Lights"))
                {
                    appliances[2].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("TV"))
                {
                    appliances[3].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("Computer"))
                {
                    appliances[4].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("Microwave"))
                {
                    appliances[5].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("CCTV"))
                {
                    appliances[6].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("Washing Machine"))
                {
                    appliances[7].quantity = reportAllAppliance[i].numberOfAppliances;
                }

            }
        }
        calculationName = currentReport!.reportName;
        if (appliances != null)
        {
            for (int i = 0; i < appliances.Count; i++)
            {
                ApplianceModel appliance = new ApplianceModel();
                appliance.applianceId = appliances[i].applianceId;
                appliance.type = appliances[i].type;
                appliance.powerUsage = appliances[i].powerUsage;
                appliance.quantity = appliances[i].quantity;
                applianceQuantities.Add(appliance);
            }
        }
    }

    public void CreateCustomSystem()
    {
        runningHoursPercentage = systemsDataHandler.CalculateRunningHours(systems[selectedSystem].numberOfBatteries, systems[selectedSystem].batterySize * 1000, appliances);
        if (systemsDataHandler.CalculateAppliancePowerUsage(appliances, null) > systems[selectedSystem].inverterOutput * 1000)
        {
            toastService.ShowToast("Error", "The total power usage of your appliances is greater than the inverter output of your system.", "error");
        }
        else if (displayCreatedCustomSystem)
        {

            displayCreatedCustomSystem = false;
        }
        else
        {
            runningHoursPercentage = systemsDataHandler.CalculateRunningHours(systems[selectedSystem].numberOfBatteries, systems[selectedSystem].batterySize * 1000, appliances);
            displayCreatedCustomSystem = true;
            selectedSystemChanged.InvokeAsync(selectedSystem);
            ProtectedSessionStore.SetAsync("selectedSystem", selectedSystem);
        }
    }

    public void CustomSystemSelected()
    {
        selectedSystem = 3;
        if (systems.Count == 3)
        {
            SystemModel system = new SystemModel();
            system.systemId = -1;
            system.systemSize = "Custom";
            system.numberOfPanels = -1;
            system.numberOfBatteries = -1;
            system.batterySize = -1;
            system.inverterOutput = -1;
            system.solarInput = -1;
            systems.Add(system);
        }
        selectedSystemChanged.InvokeAsync(selectedSystem);
        if (showCustomSystem)
        {
            if (systemsDataHandler.CalculateAppliancePowerUsage(appliances, null) > systems[selectedSystem].inverterOutput * 1000)
            {
                toastService.ShowToast("Error", "The total power usage of your appliances is greater than the inverter output of your system.", "error");
            }
            else
            {
                showCustomSystem = false;
            }
        }
        else
        {
            showCustomSystem = true;
            runningHoursPercentage = systemsDataHandler.CalculateRunningHours(systems[selectedSystem].numberOfBatteries, systems[selectedSystem].batterySize * 1000, appliances);
        }
    }

    public void CustomSystemModal(string modalType)
    {
        if (modalType == "Panels")
        {
            customModalTitle = "Number of Solar Panels";
        }
        else
        {
            customModalTitle = "Number of Batteries";
        }
        SystemModalPopup.Show();
    }

    public void SetPanels()
    {
        isNumericValue = true;
        try
        {
            systems[3].numberOfPanels = Convert.ToInt32(customPanels);
            systems[3].solarInput = Convert.ToInt32(customPanelsInput);
            if (customPanels.Equals("") || customPanelsInput.Equals(""))
            {
                isNumericValue = false;
            }
            selectedSystemChanged.InvokeAsync(selectedSystem);
            SystemModalPopup.Dismiss();
        }
        catch (System.Exception)
        {
            isNumericValue = false;
        }
    }

    public void SetNumberOfBatteries()
    {
        isNumericValue = true;
        try
        {
            systems[3].numberOfBatteries = Convert.ToInt32(customBatteries);
            systems[3].batterySize = Convert.ToInt32(customBatteriesSize);
            runningHoursPercentage = systemsDataHandler.CalculateRunningHours(systems[selectedSystem].numberOfBatteries, systems[selectedSystem].batterySize * 1000, appliances);
            SystemModalPopup.Dismiss();
        }
        catch (System.Exception)
        {
            isNumericValue = false;
        }
    }

    /// <summary>
    /// On selected system changed, update the selected system and calculate the running hours
    /// </summary>
    public Task OnSelectedSystemChanged(ChangeEventArgs e)
    {
        selectedSystem = Convert.ToInt32(e.Value);
        return selectedSystemChanged.InvokeAsync(selectedSystem);
    }

    private void IncrementApplianceCount(ApplianceModel appliance)
    {
        if (systemsDataHandler.CalculateAppliancePowerUsage(appliances, appliance) > systems[selectedSystem].inverterOutput * 1000)
        {
            toastService.ShowToast("Error", "The total power usage of your appliances is greater than the inverter output of your system.", "error");
        }
        else
        {
            appliance.fade = "fade-in-active";
            appliance.quantity++;
            UpdateApplianceStorage();
            runningHoursPercentage = systemsDataHandler.CalculateRunningHours(systems[selectedSystem].numberOfBatteries, systems[selectedSystem].batterySize * 1000, appliances);
            applianceService.UpdateAppliance(appliances);
        }
    }

    /// <summary>
    /// On appliance count changed, update the appliance count and calculate the running hours
    /// </summary>
    private void DecrementApplianceCount(ApplianceModel appliance)
    {
        appliance.quantity--;
        if (appliance.quantity < 0)
        {
            appliance.quantity = 0;
        }
        runningHoursPercentage = systemsDataHandler.CalculateRunningHours(systems[selectedSystem].numberOfBatteries, systems[selectedSystem].batterySize * 1000, appliances);
        StateHasChanged();
        UpdateApplianceStorage();
        applianceService.UpdateAppliance(appliances);
    }

    private async void UpdateApplianceStorage()
    {
        await ProtectedSessionStore.SetAsync("advancedCalculationAppliances", appliances);
    }

    /// <summary>
    /// On system size changed, update the selected system and calculate the running hours
    /// </summary>
    private void SetSystemSize(int selection)
    {
        showCustomSystem = false;
        selectedSystem = selection;
        ProtectedSessionStore.SetAsync("selectedSystem", selectedSystem);
        selectedSystemChanged.InvokeAsync(selectedSystem);
        runningHoursPercentage = systemsDataHandler.CalculateRunningHours(systems[selectedSystem].numberOfBatteries, systems[selectedSystem].batterySize * 1000, appliances);
    }

    /// <summary>
    /// On template changed, update the selected system and appliance quantities
    /// </summary>
    private void ApplyTemplate(ChangeEventArgs e)
    {
        showCustomSystem = false;
        switch (e.Value)
        {
            case "2":
                homeSize = "Small";
                selectedSystem = 0;
                appliances[0].quantity = 1;
                appliances[1].quantity = 1;
                appliances[2].quantity = 15;
                appliances[3].quantity = 1;
                appliances[4].quantity = 0;
                appliances[5].quantity = 1;
                appliances[6].quantity = 0;
                appliances[7].quantity = 0;

                break;
            case "3":
                homeSize = "Medium";
                selectedSystem = 1;
                appliances[0].quantity = 1;
                appliances[1].quantity = 1;
                appliances[2].quantity = 20;
                appliances[3].quantity = 1;
                appliances[4].quantity = 1;
                appliances[5].quantity = 1;
                appliances[6].quantity = 0;
                appliances[7].quantity = 0;
                break;
            case "4":
                homeSize = "Large";
                selectedSystem = 2;
                appliances[0].quantity = 2;
                appliances[1].quantity = 1;
                appliances[2].quantity = 30;
                appliances[3].quantity = 2;
                appliances[4].quantity = 2;
                appliances[5].quantity = 1;
                appliances[6].quantity = 0;
                appliances[7].quantity = 1;
                break;
            default:
                homeSize = "Small";
                selectedSystem = 0;
                appliances[0].quantity = 1;
                appliances[1].quantity = 1;
                appliances[2].quantity = 15;
                appliances[3].quantity = 1;
                appliances[4].quantity = 0;
                appliances[5].quantity = 1;
                appliances[6].quantity = 0;
                appliances[7].quantity = 0;
                break;
        }
        applianceService.UpdateAppliance(appliances);
        runningHoursPercentage = systemsDataHandler.CalculateRunningHours(systems[selectedSystem].numberOfBatteries, systems[selectedSystem].batterySize * 1000, appliances);
    }

    public async void ResetHome()
    {
        Console.WriteLine("Resetting");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('selectHome').value = 1;");
        appliances[0].quantity = 0;
        appliances[1].quantity = 0;
        appliances[2].quantity = 0;
        appliances[3].quantity = 0;
        appliances[4].quantity = 0;
        appliances[5].quantity = 0;
        appliances[6].quantity = 0;
        appliances[7].quantity = 0;
        showCustomSystem = false;
        selectedSystem = 0;
        await selectedSystemChanged.InvokeAsync(selectedSystem);
        runningHoursPercentage = systemsDataHandler.CalculateRunningHours(systems[selectedSystem].numberOfBatteries, systems[selectedSystem].batterySize * 1000, appliances);
    }

    public async void SaveCalculation()
    {
        Console.WriteLine("Saving Calculation");
        ModalPopup.Dismiss();
        var calcName = await ProtectedSessionStore.GetAsync<string>("calculationName");
        if (calcName.Value != null)
        {
            calculationName = calcName.Value;
            await ProtectedSessionStore.DeleteAsync("calculationName");
        }
        if (selectedSystem == 3)
        {
            systems[3].systemId = await systemClass.CreateSystem(systems[3]);
            Console.WriteLine("Custom System ID: " + systems[3].systemId);
        }
        int reportId = await calculationDataHandler.SaveCalculation(calculationName!, userId, homeSize, currentReport!.latitude, currentReport.longitude, systems[selectedSystem].systemId, allAppliances);
        if (reportId != -1)
        {
            toastService.ShowToast("Saved Calculation", "Report successfuly saved.", "success");
            await ProtectedSessionStore.SetAsync("createdReport", reportId);
            await ProtectedSessionStore.SetAsync("currentReport", reportId);
            NavigationManager.NavigateTo("/dashboard");
        }
        else
        {
            toastService.ShowToast("Error", "Report failed to save.", "error");
        }

    }

    private async Task UpdateCalculation()
    {
        if (await reportClass.UpdateReport(currentReport!.reportId, calculationName!, userId, homeSize, currentReport.latitude, currentReport.longitude, systems[selectedSystem].systemId))
        {

            toastService.ShowToast("Updated Calculation", "Report updated saved.", "success");

            for (int i = 0; i < 8; i++)
            {
                if (appliances[i].quantity != applianceQuantities[i].quantity)
                {
                    await reportApplianceClass.UpdateReportAppliance(currentReport.reportId, appliances[i]);
                }
            }
            await ProtectedSessionStore.SetAsync("createdReport", currentReport.reportId);
        }
        NavigationManager.NavigateTo("/dashboard");
    }
}