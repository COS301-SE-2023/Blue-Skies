@using BlazorApp.Components
@using BlazorApp.Components.Base
@using BlazorApp.Components.Advanced.Skeletons
@using BlazorApp.Models
@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject BlazorApp.Data.ToastService toastService
@inject BlazorApp.Data.ApplianceService applianceService
@inject BlazorApp.Data.TooltipService tooltipService
@using System.Timers
@implements IDisposable


<div class="flex flex-col gap-5 lg:flex-row w-full h-full  items-center mb-20 px-4">
    <div class="w-full flex flex-col justify-center items-center ">
        <h1 class="text-blue-950 translate-y-8 font-semibold col-span-2 lg:hidden text-center text-3xl mb-5 ">Build your home</h1>
        @* Home Template Dropdown *@
        <div class="w-60 text-center my-auto translate-y-10">
            @if (systems.Count == 0)
            {
                <div role="status" class="max-w-sm animate-pulse justify-center">
                    <div class="h-3 bg-gray-200 rounded-full w-[70px] mb-2.5 mx-auto"></div>
                    <div class="h-8 bg-gray-200 rounded-full w-[240px] p-2.5"></div>
                    <span class="sr-only">Loading...</span>
                </div>
            } else {
                <h2 class="text-sm mb-2 font-medium text-gray-900">Home size</h2>
                <select @onchange="ApplyTemplate" id="selectHome"
                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 w-full p-2.5 hover:cursor-pointer">
                    <option disabled selected value="1">Select a template</option>
                    <option value="2">2 Bedroom House</option>
                    <option value="3">3 Bedroom House</option>
                    <option value="4">4+ Bedroom House</option>
                </select>
            }
        </div>
    </div>
</div>


@* Add Appliances *@
<div class="hidden lg:flex w-full h-full px-4 mb-20">
    <div class="w-4/12 grid grid-cols-2 justify-center scale-90 gap-4 -mt-4">
        <div class="flex flex-col gap-4 col-span-2 items-center justify-center mb-4 -mt-8 w-[420px]">
            <h1 class="text-blue-950 translate-y-8 font-semibold col-span-2 text-center text-3xl mb-5 ">Build your home</h1>
            <div class="flex gap-3 w-full relative justify-center">
                <h1 class="text-base font-medium text-center mb-2  text-primary-900">Select Appliances</h1>
                <div class="group">
                    <Image ImageName="Info.svg" alt="Info" css="w-7 hover:-translate-y-1 transition-all duration-300" />
                    <div
                        class="absolute hidden fade-in-active w-full -top-10 translate-x-10 max-w-md  group-hover:block transition-all duration-300 ease-in-out text-sm  bg-primary-200 shadow rounded-t-2xl rounded-r-2xl p-4 group-hover:-translate-y-10 ">
                        <p class="text-gray-900">Click on the appliances to add them to your calculation, you can add multiple of the same appliances in the variants section below</p>
                    </div>
                </div>
            </div>
            <input class="block w-72 rounded-lg border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" type="text" placeholder="Search.." @bind-value="applianceSearch" @bind-value:event="oninput">
                @if (appliances.Count > 0)
                {
                        <div class="flex">
                            <div class="my-auto h-fit hover:cursor-pointer" @onclick="DecrementAppliancePage">
                                <Image ImageName="Arrow-Left.svg" alt="Left Arrow"
                                    css="w-12 rounded-full p-2 hover:bg-slate-200 hover:cursor-pointer" />
                            </div>
                            <div class="grid mx-auto gap-4 space-y-2 grid-cols-2 mt-2 justify-center w-[245px] @applianceAnimation">
                                @{
                                    filteredAppliances = getFilteredAppliances(applianceSearch);
                                    if(filteredAppliances.Count <= 8)
                                    {
                                        appliancesPage = 0;
                                    }
                                    @for (int i = 0; i < 8 && filteredAppliances.Count > 0; i++)
                                    {
                                        
                                        @if (filteredAppliances.Count > i + appliancesPage * 8)
                                        {   
                                            int applianceQuantity = 0;
                                            foreach (ApplianceModel app in appliances.Where(app => app.type == filteredAppliances[i + appliancesPage * 8].type))
                                            {
                                                applianceQuantity += app.quantity;
                                            }
                                            ApplianceModel appliance = filteredAppliances[i + appliancesPage * 8];
                                            <div @onclick="@(() => ToggleAppliance(appliance))">
                                                <Appliance css="hover:shadow hover:cursor-pointer transition-all duration-300 hover:-translate-y-1 scale-1.7" imageName="@(appliance.type + ".svg")" name="@appliance.type" count="@applianceQuantity" />     
                                            </div>
                                        }
                                    }
                                }
                            </div>
                            <div class="my-auto h-fit hover:cursor-pointer" @onclick="IncrementAppliancePage">
                                <Image ImageName="Arrow-Right.svg" alt="Right Arrow"
                                    css="w-12 rounded-full p-2 hover:bg-slate-200 hover:cursor-pointer" />
                            </div>
                        </div>
                }
                else
                {
                <div class="grid mx-auto gap-4 space-y-2 grid-cols-2 mt-2 justify-center">
                    @for (int i = 0; i < 8; i++)
                    {
                        <AppliancesSkeleton />
                    }
                </div>
                }
        </div>
    </div>
    <div class="w-full flex flex-col justify-center items-center pl-64">
        @* Home images *@
        <div class="flex pjustify-center items-center h-full">
        @switch (selectedSystem)
        {
            case 0:
                homeType = "-Home1.svg";
            break;
            case 1:
                homeType = "-Home2.svg";
            break;
            case 2:
                homeType = "-Home3.svg";
            break;
            case 3:
                if (systems[3].inverterOutput <= 5) { 
                    homeType="-Home1.svg" ; 
                } else if (systems[3].inverterOutput <=8) { 
                    homeType="-Home2.svg" ; 
                } else {
                    homeType="-Home3.svg" ;
                } 
                break; 
            default: 
                homeType="-Home1.svg" ; 
            break; 
        } 
        @{ homeImage=homeSize + homeType; }
        <Image ImageName="@homeImage" alt="Home" css="w-10/12 h-full" />
    </div>
    </div>
    <div class="w-6/12 px-1 flex flex-col justify-center items-center gap-4 -mt-4">
    @* Select System Size *@
        <div class="text-center mt-2 space-y-5">
            <h1 class="text-blue-950 translate-y-8 font-semibold text-center text-3xl mb-5 ">Solar System</h1>
            <div class="flex gap-3 w-full relative justify-center">
                <h1 class="text-base font-medium text-center mb-2  text-primary-900">Inverter size</h1>
                <div class="group">
                    <Image ImageName="Info.svg" alt="Info" css="w-7 hover:-translate-y-1 transition-all duration-300" />
                    <div
                        class=" transform -scale-x-100 absolute hidden fade-in-active w-full -top-[70px] -translate-x-64 max-w-md group-hover:block transition-all duration-300 ease-in-out text-sm  bg-primary-200 shadow rounded-t-2xl rounded-r-2xl p-4 group-hover:-translate-y-10 ">
                        <p class="text-gray-900 transform -scale-x-100">Your inverter determines how many appliances you can run at once</p>
                    </div>
                </div>
            </div>
            @if (systems.Count > 2)
            {  
                <div class="flex space-x-9">
                    @{
                        var small = systems[0].inverterOutput + "kw";
                        var medium = systems[1].inverterOutput + "kw";
                        var large = systems[2].inverterOutput + "kw";
                    }
                        <div onclick="@(() => SetSystemSize(0))"
                            class="flex shadow-md transition-all duration-500 hover:cursor-pointer @(selectedSystem == 0 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                            <p class=" font-semibold">@small</p>
                        </div>
                        <div onclick="@(() => SetSystemSize(1))"
                            class="flex shadow-md transition-all duration-500 hover:cursor-pointer @(selectedSystem == 1 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                            <p class="font-semibold">@medium</p>
                        </div>
                        <div onclick="@(() => SetSystemSize(2))"
                            class="flex shadow-md transition-all duration-500 hover:cursor-pointer @(selectedSystem == 2 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                            <p class="font-semibold">@large</p>
                        </div>
                    </div>
                    <div class="flex justify-center h-24">
                    @if (showCustomSystem)
                    {
                        if (displayCreatedCustomSystem)
                        {
                            var customSize = systems[3].inverterOutput + "kw";
                            <div @onclick="CreateCustomSystem"
                                class="flex shadow-md transition-all duration-500 @(selectedSystem == 3 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-24 h-16">
                                <p class="font-semibold">@customSize</p>
                            </div>
                        }
                        else
                        {
                            <div>
                                <div class="gap-2 px-6">
                                    <input class="text-center focus:outline-none" type="number" placeholder="Enter System Size" @bind="systems[3].inverterOutput"/>
                                </div>
                                <div @onclick="CreateCustomSystem" class="mx-auto pt-4 w-24">
                                    <Button style="pill" >
                                        <p  class="font-semibold">Create</p>
                                    </Button>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div @onclick="CustomSystemSelected">
                            <Button style="pill" >
                                <p  class="font-semibold">Custom</p>
                            </Button>
                        </div>
                    }
                        </div>
            }
            else
            {
                <SystemSizeSkeleton />
            }

        </div>
    @* System details *@
        <div class="flex justify-between gap-4 scale-75">
            @if (systems.Count > 0)
            {
                <div class="flex flex-col w-full -mt-16 justify-center items-center gap-4">
                    <div class="mb-2 w-full flex flex-col">
                        <div @onclick='@(() => CustomSystemModal("Panels"))'>
                            <Appliance css="scale-90 hover:shadow transition-all duration-300 hover:-translate-y-1" imageName="SolarPanels.svg" name="Number of Panels"count="@systems[selectedSystem].numberOfPanels" />
                        </div>
                        <input type="range" class="accent-primary-800  cursor-pointer w-full mt-3" min="4" max="20" step="1" value="@systems[selectedSystem].numberOfPanels" @oninput="ResetPanelTimer" @onchange="UpdateSelectedSystem"/>
                    </div>
                    <div class="flex gap-2 pr-2 justify-start items-start">
                        <div class="flex flex-col gap-2 justify-center items-center w-full has-tooltip">
                            <Tooltip pointer="50">
                                <p class="text-xl text-center">@tooltipService.GetTooltip("battery utilisation")</p>
                            </Tooltip>
                            <div class="h-28 shadow flex-col-reverse flex w-20 p-1 bg-gray-300 relative  rounded-lg">
                                @{
                                    var percentage = chargingLimitPercentage + "%";
                                }
                                <div style="height: @percentage" class='w-full transition-all rounded-lg @(chargingLimitPercentage > 0 && chargingLimitPercentage < 25 ? "bg-red-accent-500" : chargingLimitPercentage > 25 && chargingLimitPercentage < 50 ? "bg-yellow-accent-500" : chargingLimitPercentage > 50 && chargingLimitPercentage < 75 ? "bg-primary-500" : "bg-primary-800")'></div>
                                    <p class='absolute bottom-2 left-1/2 -translate-x-1/2 @(chargingLimitPercentage > 75 ? "text-primary-400" : chargingLimitPercentage < 25 ? "text-primary-100" : "text-primary-900") font-bold text-md'>@chargingLimitPercentage<span class='@(chargingLimitPercentage > 75 ? "text-primary-300" : chargingLimitPercentage < 25 ? "text-primary-300" :"text-primary-700")'>%</span></p>
                                <div class="w-8 h-4 -z-10 bg-gray-300 rounded-md absolute -top-2 left-1/2 -translate-x-1/2"></div>
                            </div>
                            <p class="text-center">Battery Utilization</p>
                        </div>
                        <div @onclick='@(() => CustomSystemModal("Batteries"))'>
                            <Appliance css="scale-90 hover:shadow transition-all duration-300 hover:-translate-y-1" ImageName="Batteries.svg" name="Number of Batteries" count="@systems[selectedSystem].numberOfBatteries" />
                        </div>
                    </div>
                    <input type="range" class="accent-primary-800  cursor-pointer w-full " min="1" max="6" step="1" value="@systems[selectedSystem].numberOfBatteries" @oninput="ResetBatteryTimer"  @onchange="UpdateSelectedSystem"/>
                </div>
            }
            else
            {
                <BatterySkeleton />
            }
        </div>
        <h3 class="font-medium text-lg text-primary-900 text-left">Running Hours on Batteries</h3>
        <div class="flex relative flex-col justify-center w-full has-tooltip">
            <div>
                <Tooltip pointer="48">
                    <p>@tooltipService.GetTooltip("running hours on batteries")</p>
                </Tooltip>
            </div>
            <DaylightChart hours="@dlh" daylightHours="@daylight" />
            <div class="flex w-full justify-center absolute top-1/2 left-0 items-center gap-1 mt-5">
                    @{
                        if (dlh == (24 - daylight))
                        {
                            <p class="text-5xl text-primary-900 font-semibold">@dlh+</p>
                        }
                        else
                        {
                            <p class="text-5xl text-primary-900 font-semibold">@dlh</p>
                        }
                    }
                <p class="text-5xl text-gray-400 font-bold">h</p>
            </div>
        </div>
    </div>
</div>

<MobileBuildHome @bind-homeImage="homeImage" />



<ModalPopup @ref="SystemModalPopup" Title=@customModalTitle>

    @if (@customModalTitle == "Number of Solar Panels")
    {
            <p>Number of solar panels:</p>
            <Input  @bind-InputValue="customPanels" placeholder="8" type="number" min="4"/>
            <p>Solar panel power output (W/h): </p>
            <Input  @bind-InputValue="customPanelsInput" placeholder="500" type="number" min="300"/>
    }
    else
    {
            <p>Number of batteries: </p>
            <Input  @bind-InputValue="customBatteries" placeholder="1" type="number" min="1"/>    
            <p>Battery Size (kW): </p>
            <Input  @bind-InputValue="customBatteriesSize" placeholder="10" type="number" min="4"/>
    }
    @if (!isNumericValue)
    {
           <p class="mt-8 text-red-600 font-bold">Please provide valid input <br/> for all fields</p>
    }
            <div class="flex flex-row gap-4 justify-center">

        @if (@customModalTitle == "Number of Solar Panels")
        {
            <div @onclick="SetPanels">
                <Button>
                    <p>Save</p>
                </Button>
            </div>
        }
        else
        {
            <div @onclick="SetBatteries">
                <Button>
                    <p>Save</p>
                </Button>
            </div>
        }
            <div @onclick="SystemModalPopup.Dismiss">
                <Button style="outline">
                    <p>Cancel</p>
                </Button>
            </div>
        </div>
</ModalPopup>  

<ModalPopup @ref="ModalPopup" Title="Save your calculation?">
    @if (edit)
    {
            <p>Rename this calculation?</p>
    }
    else
    {
            <p>Add a nickname for this calculation:</p>
    }
        <Input @bind-InputValue="calculationName" placeholder="Nickname" />
        <div class="flex flex-row gap-4 justify-center">
        @if (edit)
        {
                <div @onclick="UpdateCalculation">
                    <Button>
                        <p>Update</p>
                    </Button>
                </div>
        }
        else
        {
                <div @onclick="SaveCalculation">
                    <Button>
                        <p>Save</p>
                    </Button>
                </div>
        }
            <div @onclick="ModalPopup.Dismiss">
                <Button style="outline">
                    <p>Cancel</p>
                </Button>
            </div>
        </div>
</ModalPopup>


@code {
    private SharedUtils.reportClass reportClass = new SharedUtils.reportClass();
    private SharedUtils.reportApplianceClass reportApplianceClass = new SharedUtils.reportApplianceClass();

    private DataHandlers.SystemsDataHandler systemsDataHandler = new DataHandlers.SystemsDataHandler();
    private DataHandlers.CalculationDataHandler calculationDataHandler = new DataHandlers.CalculationDataHandler();
    private SharedUtils.systemClass systemClass = new SharedUtils.systemClass();
    private DataHandlers.SolarDataHandler solarCalculator = new DataHandlers.SolarDataHandler();

    [Parameter]
    public List<ApplianceModel> appliances { get; set; } = new List<ApplianceModel>();
    [Parameter]
    public List<SystemModel> systems { get; set; } = new List<SystemModel>();
    [Parameter]
    public int selectedSystem { get; set; }
    [Parameter]
    public EventCallback<int> selectedSystemChanged { get; set; }
    [Parameter]
    public ReportModel? currentReport { get; set; }
    [Parameter]
    public bool edit { get; set; }
    [Parameter]
    public LocationDataModel? currentLocationData { get; set; }
    private List<ReportModel> reports = new List<ReportModel>();
    private int userId = -1;
    public ModalPopup ModalPopup { get; set; } = new ModalPopup();
    private ModalPopup SystemModalPopup { get; set; } = new ModalPopup();
    private string? calculationName { get; set; }
    private List<ApplianceModel> applianceQuantities = new List<ApplianceModel>();
    private List<TabItemModel> tabs = new List<TabItemModel>
    {
        new TabItemModel("Toggle", true),
        new TabItemModel("Add", false),
        new TabItemModel("Remove", false)
    };
    private List<TabItemModel> categories = new List<TabItemModel>
    {
        new TabItemModel("Kitchen", true),
        new TabItemModel("Entertainment", false),
        new TabItemModel("General", false)
    };
    float runningHoursPercentage = 0f;
    float dlh = 0f;
    float daylight = 12f;
    DaylightChart daylightChart = new DaylightChart();
    private bool showCustomSystem = false;
    private bool displayCreatedCustomSystem = false;
    private string customPanels = "";
    private string customBatteries = "";
    private string customPanelsInput = "";
    private string customBatteriesSize = "";
    private string customModalTitle = "";
    private bool isNumericValue = true;
    private double chargingLimit = 0.0;
    private double chargingLimitPercentage = 50.0;
    private int appliancesPage = 0;
    private string applianceAnimation = "";
    private string applianceSearch = "";
    private List<ApplianceModel> filteredAppliances = new List<ApplianceModel>();
    private Timer panelTimer = default!;
    private Timer batteryTimer = default!;
    private string homeSize = "Small";
    private string homeType = "";
    private string homeImage = "";


    /// <summary>
    /// On initialisation, get the user id from local storage
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        panelTimer = new Timer(100);
        panelTimer.Elapsed += SetNumberPanels;
        panelTimer.AutoReset = false;
        panelTimer.Enabled = true;

        batteryTimer = new Timer(100);
        batteryTimer.Elapsed += SetNumberOfBatteries;
        batteryTimer.AutoReset = false;
        batteryTimer.Enabled = true;
        var usId = await ProtectedLocalStore.GetAsync<int>("userId");
        userId = usId.Value;
        if (currentReport!.homeSize != null)
        {
            homeSize = currentReport.homeSize;
        }
        if (systems.Count > 0)
        {
            SetGraphicValues();
        }
        applianceService.UpdateAppliancesRequested += UpdateAppliances;
    }

    /// <summary>
    /// On parameters set, set the appliance quantities to the values from the report
    /// </summary>
    protected override void OnParametersSet()
    {
        if (selectedSystem == 3)
        {
            showCustomSystem = true;
            displayCreatedCustomSystem = true;
        }


        calculationName = currentReport!.reportName;
        if (appliances != null)
        {
            for (int i = 0; i < appliances.Count; i++)
            {
                ApplianceModel appliance = new ApplianceModel();
                appliance.applianceId = appliances[i].applianceId;
                appliance.type = appliances[i].type;
                appliance.powerUsage = appliances[i].powerUsage;
                appliance.quantity = appliances[i].quantity;
                applianceQuantities.Add(appliance);
            }
        }
        if (systems.Count > 0)
        {
            SetGraphicValues();
        }
    }

    public void CreateCustomSystem()
    {
        SetGraphicValues();
        if (systemsDataHandler.CalculateAppliancePowerUsage(appliances, null) > systems[selectedSystem].inverterOutput * 1000)
        {
            toastService.ShowToast("Error", "The total power usage of your appliances is greater than the inverter output of your system.", "error");
        }
        else if (displayCreatedCustomSystem)
        {

            displayCreatedCustomSystem = false;
        }
        else
        {
            displayCreatedCustomSystem = true;
            selectedSystemChanged.InvokeAsync(selectedSystem);
            ProtectedSessionStore.SetAsync("selectedSystem", selectedSystem);
        }
    }

    public void CustomSystemSelected()
    {
        selectedSystem = 3;
        selectedSystemChanged.InvokeAsync(selectedSystem);
        if (showCustomSystem)
        {
            if (systemsDataHandler.CalculateAppliancePowerUsage(appliances, null) > systems[selectedSystem].inverterOutput * 1000)
            {
                toastService.ShowToast("Error", "The total power usage of your appliances is greater than the inverter output of your system.", "error");
            }
            else
            {
                showCustomSystem = false;
            }
        }
        else
        {
            showCustomSystem = true;
            runningHoursPercentage = systemsDataHandler.CalculateRunningHours(systems[selectedSystem].numberOfBatteries, systems[selectedSystem].batterySize * 1000, appliances);
        }
    }

    public void CustomSystemModal(string modalType)
    {
        if (modalType == "Panels")
        {
            customModalTitle = "Number of Solar Panels";
        }
        else
        {
            customModalTitle = "Number of Batteries";
        }
        SystemModalPopup.Show();
    }

    private async void SetNumberPanels(Object? source, ElapsedEventArgs e){
        if (currentLocationData != null)
        {
            SetGraphicValues();
        } 
        await InvokeAsync(StateHasChanged);

    }
    private async void SetNumberOfBatteries(Object? source, ElapsedEventArgs e){
        if (currentLocationData != null)
        {
            SetGraphicValues();
        }
        await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        panelTimer.Dispose();
        batteryTimer.Dispose();
    }

    private void ResetPanelTimer(ChangeEventArgs e)
    {
        panelTimer.Stop();
        var val = e.Value!.ToString();
        customPanels = val!;
        if (selectedSystem < 3)
        {
            systems[3].numberOfBatteries = systems[selectedSystem].numberOfBatteries;
            systems[3].batterySize = systems[selectedSystem].batterySize;
            systems[3].inverterOutput = systems[selectedSystem].inverterOutput;
            systems[3].solarInput = systems[selectedSystem].solarInput;
            systems[3].numberOfPanels = systems[selectedSystem].numberOfPanels;
        }
        systems[3].numberOfPanels =  int.Parse(val!);
        panelTimer.Start();
    }

    private void ResetBatteryTimer(ChangeEventArgs e)
    {
        batteryTimer.Stop();
        var val = e.Value!.ToString();
        customBatteries = val!;
        if (selectedSystem < 3)
        {
            systems[3].numberOfPanels = systems[selectedSystem].numberOfPanels;
            systems[3].batterySize = systems[selectedSystem].batterySize;
            systems[3].inverterOutput = systems[selectedSystem].inverterOutput;
            systems[3].solarInput = systems[selectedSystem].solarInput;
            systems[3].numberOfBatteries = systems[selectedSystem].numberOfBatteries;
        }
        systems[3].numberOfBatteries =  int.Parse(val!);
        batteryTimer.Start();
    }

    private void UpdateSelectedSystem(){
        selectedSystem = 3;
        selectedSystemChanged.InvokeAsync(3);
    }
    public void SetPanels()
    {
        isNumericValue = true;
        try
        {
            if (selectedSystem < 3)
            {
                systems[3].numberOfBatteries = systems[selectedSystem].numberOfBatteries;
                systems[3].batterySize = systems[selectedSystem].batterySize;
                systems[3].inverterOutput = systems[selectedSystem].inverterOutput;
                systems[3].solarInput = systems[selectedSystem].solarInput;
                systems[3].numberOfPanels = systems[selectedSystem].numberOfPanels;
            }
            selectedSystem = 3;
            systems[3].numberOfPanels = Convert.ToInt32(customPanels);
            systems[3].solarInput = Convert.ToInt32(customPanelsInput);
            if ( customPanelsInput.Equals(""))
            {
                isNumericValue = false;
            }
            selectedSystemChanged.InvokeAsync(selectedSystem);
            SystemModalPopup.Dismiss();
        }
        catch (System.Exception)
        {
            isNumericValue = false;
        }
        SetGraphicValues(); 

    }

    public void SetBatteries()
    {
        isNumericValue = true;
        try
        {
            if (selectedSystem < 3)
            {
                systems[3].numberOfBatteries = systems[selectedSystem].numberOfBatteries;
                systems[3].batterySize = systems[selectedSystem].batterySize;
                systems[3].inverterOutput = systems[selectedSystem].inverterOutput;
                systems[3].solarInput = systems[selectedSystem].solarInput;
                systems[3].numberOfPanels = systems[selectedSystem].numberOfPanels;
            }
            selectedSystem = 3;
            systems[3].numberOfBatteries = Convert.ToInt32(customBatteries);
            systems[3].batterySize = Convert.ToInt32(customBatteriesSize);
            SystemModalPopup.Dismiss();
        }
        catch (System.Exception)
        {
            isNumericValue = false;
        }
        SetGraphicValues(); 

    }

    private void SetGraphicValues(){
        var appliancePowerUsage = systemsDataHandler.CalculateAppliancePowerUsage(appliances, null) / 1000.0;
        var avgEnergyProduction = solarCalculator.getAnnualKwGenerated(systems[selectedSystem].numberOfPanels, currentLocationData!.solarPanelsData, true, systems[selectedSystem].solarInput) / 365;
        var usableHours = solarCalculator.getSunlightHours(currentLocationData.solarPanelsData, true);
        usableHours = Math.Round(usableHours, 2);
        chargingLimit = (avgEnergyProduction - appliancePowerUsage) * usableHours;
        if (chargingLimit > systems[selectedSystem].numberOfBatteries * systems[selectedSystem].batterySize)
        {
            chargingLimit = systems[selectedSystem].numberOfBatteries * systems[selectedSystem].batterySize;
            chargingLimitPercentage = 100;
        } else if (appliancePowerUsage >= avgEnergyProduction) {
            chargingLimitPercentage = 0;
            chargingLimit = 0;
        } else
        {
            chargingLimitPercentage = (chargingLimit / (systems[selectedSystem].numberOfBatteries * systems[selectedSystem].batterySize)) * 100;
        }
        chargingLimitPercentage = Math.Round(chargingLimitPercentage, 2);

        double runningHours = chargingLimit / appliancePowerUsage;
        double runningHoursPercentage = (runningHours / daylight) * 100;
        if (runningHoursPercentage > 100)
        {
            runningHoursPercentage = 100;
        }
        dlh = (float)Math.Round((24 - daylight) * (runningHoursPercentage / 100), 2);
    }

    /// <summary>
    /// On selected system changed, update the selected system and calculate the running hours
    /// </summary>
    public Task OnSelectedSystemChanged(ChangeEventArgs e)
    {
        selectedSystem = Convert.ToInt32(e.Value);
        SetGraphicValues();
        return selectedSystemChanged.InvokeAsync(selectedSystem);
    }

    @* private void IncrementApplianceCount(ApplianceModel appliance)
    {
        if (systemsDataHandler.CalculateAppliancePowerUsage(appliances, appliance) > systems[selectedSystem].inverterOutput * 1000)
        {
            toastService.ShowToast("Error", "The total power usage of your appliances is greater than the inverter output of your system.", "error");
        }
        else
        {
            appliance.fade = "fade-in-active";
            appliance.quantity++;
            UpdateApplianceStorage();
            SetGraphicValues();
            applianceService.UpdateAppliance(appliances);
        }
    } *@

    @* /// <summary>
    /// On appliance count changed, update the appliance count and calculate the running hours
    /// </summary>
    private void DecrementApplianceCount(ApplianceModel appliance)
    {
        appliance.quantity--;
        if (appliance.quantity < 0)
        {
            appliance.quantity = 0;
        }
        SetGraphicValues();

        StateHasChanged();
        UpdateApplianceStorage();
        applianceService.UpdateAppliance(appliances);
    } *@

    private void UpdateAppliances(List<ApplianceModel> applianceGroups)
    {
        appliances = applianceGroups;
        SetGraphicValues();
        StateHasChanged();
    }

    private void ToggleAppliance(ApplianceModel appliance)
    {
        Console.WriteLine("Toggling - " + appliance.type);
        List<ApplianceModel> groupAppliance = appliances.Where(x => x.type == appliance.type).ToList();
        if (groupAppliance.FindAll(x => x.quantity > 0).Count > 0)
        {
            foreach (var app in groupAppliance)
            {
                if(app.name == "Default") 
                {
                    app.quantity = 0;
                } else {
                    appliances.Remove(app);
                }
            }
        }
        else
        {
            appliance.quantity = 1;
        }
        SetGraphicValues();
        UpdateApplianceStorage();
        applianceService.UpdateAppliance(appliances);
    }

    private async void UpdateApplianceStorage()
    {
        await ProtectedSessionStore.SetAsync("advancedCalculationAppliances", appliances);
    }

    /// <summary>
    /// On system size changed, update the selected system and calculate the running hours
    /// </summary>
    private void SetSystemSize(int selection)
    {
        showCustomSystem = false;
        selectedSystem = selection;
        ProtectedSessionStore.SetAsync("selectedSystem", selectedSystem);
        selectedSystemChanged.InvokeAsync(selectedSystem);
        SetGraphicValues();

    }

    /// <summary>
    /// On template changed, update the selected system and appliance quantities
    /// </summary>
    private void ApplyTemplate(ChangeEventArgs e)
    {
        Console.WriteLine("Applying Templete");
        showCustomSystem = false;
        switch (e.Value)
        {
            case "2":
                homeSize = "Small";
                selectedSystem = 0;
                int[] applianceQuantities = { 1, 1, 15, 1, 0, 1, 0, 0 };
                for (int i = 0; i < appliances.Count; i++)
                {
                    if(i >= applianceQuantities.Length)
                    {
                        appliances[i].quantity = 0;
                    }
                    else
                    {
                        appliances[i].quantity = applianceQuantities[i];
                    }

                }

                break;
            case "3":
                homeSize = "Medium";
                selectedSystem = 1;
                int[] applianceQuantities2 = { 1, 1, 20, 1, 1, 1, 0, 0 };
                for (int i = 0; i < appliances.Count; i++)
                {
                    if(i >= applianceQuantities2.Length)
                    {
                        appliances[i].quantity = 0;
                    }
                    else
                    {
                        appliances[i].quantity = applianceQuantities2[i];
                    }
                }
                break;
            case "4":
                homeSize = "Large";
                selectedSystem = 2;
                int[] applianceQuantities3 = { 2, 1, 30, 2, 2, 1, 0, 1 };
                for (int i = 0; i < appliances.Count; i++)
                {
                    if(i >= applianceQuantities3.Length)
                    {
                        appliances[i].quantity = 0;
                    }
                    else
                    {
                        appliances[i].quantity = applianceQuantities3[i];
                    }
                }
                break;
            default:
                homeSize = "Small";
                selectedSystem = 0;
                int[] applianceQuantities4 = { 1, 1, 15, 1, 0, 1, 0, 0 };
                for (int i = 0; i < appliances.Count; i++)
                {
                    if(i >= applianceQuantities4.Length)
                    {
                        appliances[i].quantity = 0;
                    }
                    else
                    {
                        appliances[i].quantity = applianceQuantities4[i];
                    }
                }
                break;
        }
        applianceService.UpdateAppliance(appliances);
        SetGraphicValues();
    }

    public async void ResetHome()
    {
        Console.WriteLine("Resetting");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('selectHome').value = 1;");
        foreach (var appliance in appliances)
        {
            appliance.quantity = 0;
        }
        showCustomSystem = false;
        selectedSystem = 0;
        await selectedSystemChanged.InvokeAsync(selectedSystem);
        SetGraphicValues();
    }

    public async void SaveCalculation()
    {
        Console.WriteLine("Saving Calculation");
        ModalPopup.Dismiss();
        var calcName = await ProtectedSessionStore.GetAsync<string>("calculationName");
        if (calcName.Value != null)
        {
            calculationName = calcName.Value;
            await ProtectedSessionStore.DeleteAsync("calculationName");
        }
        if (selectedSystem == 3)
        {
            systems[3].systemId = await systemClass.CreateSystem(systems[3]);
            Console.WriteLine("Custom System ID: " + systems[3].systemId);
        }
        int reportId = -1;
        if(appliances != null) {
            reportId = await calculationDataHandler.SaveCalculation(calculationName!, userId, homeSize, currentReport!.latitude, currentReport.longitude, systems[selectedSystem].systemId, appliances);
        }
        if (reportId != -1)
        {
            toastService.ShowToast("Saved Calculation", "Report successfuly saved.", "success");
            await ProtectedSessionStore.SetAsync("createdReport", reportId);
            await ProtectedSessionStore.SetAsync("currentReport", reportId);
            NavigationManager.NavigateTo("/dashboard");
        }
        else
        {
            toastService.ShowToast("Error", "Report failed to save.", "error");
        }

    }

    public async Task UpdateCalculation()
    {
        var calcName = await ProtectedSessionStore.GetAsync<string>("calculationName");
        if (calcName.Value != null)
        {
            calculationName = calcName.Value;
            await ProtectedSessionStore.DeleteAsync("calculationName");
        }
        Console.WriteLine("Update Calculation, new name: " + calculationName);
        if (await calculationDataHandler.UpdateCalculation(currentReport!.reportId, calculationName!, appliances))
        {
            toastService.ShowToast("Updated Calculation", "Report successfuly updated.", "success");
            NavigationManager.NavigateTo("/dashboard");
        }
        else
        {
            toastService.ShowToast("Error", "Report failed to update.", "error");
        }
        NavigationManager.NavigateTo("/dashboard");
    }

    private async void IncrementAppliancePage(){
        applianceAnimation = "appliance-slide-out-left";
        StateHasChanged();
        await Task.Delay(100);
        if(appliancesPage != Math.Ceiling(getFilteredAppliances(applianceSearch).Count / 8.0) - 1){
            appliancesPage++;
        } else {
            appliancesPage = 0;
        }
        applianceAnimation = "appliance-slide-in-right";
        StateHasChanged();
    }
    private async void DecrementAppliancePage(){
        applianceAnimation = "appliance-slide-out-right";
        StateHasChanged();
        await Task.Delay(100);
        if(appliancesPage != 0){
            appliancesPage--;
        } else {
            appliancesPage = (int) Math.Ceiling(getFilteredAppliances(applianceSearch).Count / 8.0) - 1;
        }
        applianceAnimation = "appliance-slide-in-left";
        StateHasChanged();
    }

    private List<ApplianceModel> getFilteredAppliances(string search) {
        return appliances.Where(app => app.type!.ToLower().Contains(search.ToLower()) && app.name == "Default").ToList();
    }
}