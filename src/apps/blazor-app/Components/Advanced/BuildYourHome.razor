@using BlazorApp.Components
@using BlazorApp.Components.Base
@using BlazorApp.Models
@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject BlazorApp.Data.LoadingService loadingService
@inject BlazorApp.Data.ToastService toastService
@inject BlazorApp.Data.ApplianceService applianceService


<div class="flex flex-col gap-5 lg:flex-row w-full h-full  items-center mb-20 px-4">
    <div class=" flex items-center justify-center lg:w-6/12 gap-4">
        <h1 class="text-blue-950 translate-y-8 font-semibold col-span-2 text-center text-3xl mb-5 ">Build your home</h1>
    </div>
    <div class="w-full flex flex-col justify-center items-center ">
        @* Home Template Dropdown *@
        <div class="w-60  my-auto">
            <h2 class="text-sm mb-2 font-medium text-gray-900">Home size</h2>
            <select @onchange="ApplyTemplate" id="selectHome"
                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 w-full p-2.5">
                <option disabled selected value="1">Select a template</option>
                <option value="2">2 Bedroom House</option>
                <option value="3">3 Bedroom House</option>
                <option value="4">4+ Bedroom House</option>
            </select>
        </div>
    </div>
    @* Select System Size *@
    <div class="lg:w-6/12 px-4 z-30 flex flex-col justify-center items-center gap-4 my-auto">
        <div class="text-center mt-2 space-y-5 my-auto ">
            <p>System Size</p>
            <div class="flex space-x-9">
                @{
                    var small = systems[0].inverterOutput + "kw";
                    var medium = systems[1].inverterOutput + "kw";
                    var large = systems[2].inverterOutput + "kw";
                }
                <div onclick="@(() => SetSystemSize(0))"
                    class=" flex shadow-md transition-all duration-500  @(selectedSystem == 0 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                    <p class=" font-semibold">@small</p>
                </div>
                <div onclick="@(() => SetSystemSize(1))"
                    class="flex shadow-md transition-all duration-500 @(selectedSystem == 1 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                    <p class="font-semibold">@medium</p>
                </div>
                <div onclick="@(() => SetSystemSize(2))"
                    class="flex shadow-md transition-all duration-500 @(selectedSystem == 2 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                    <p class="font-semibold">@large</p>
                </div>
            </div>
            <div class="flex justify-center">
                @if (showCustomSystem)
                {
                    if (displayCreatedCustomSystem)
                    {
                        var customSize = customCreatedSystem + "kw";
                                                        <div @onclick="CreateCustomSystem"
                                                            class="flex shadow-md transition-all duration-500 @(selectedSystem == 3 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-24 h-16">
                                                            <p class="font-semibold">@customSize</p>
                                                        </div>
                    }
                    else
                    {
                                                    <div>
                                                        <div class="gap-2 px-6">
                                                            <input class="text-center focus:outline-none" type="number" placeholder="Enter System Size" @bind="customCreatedSystem"/>
                                                        </div>
                                                        <div @onclick="CreateCustomSystem" class="mx-auto pt-4 w-24">
                                                            <Button style="pill" >
                                                                <content>
                                                                    <p  class="font-semibold">Create</p>
                                                                </content>
                                                            </Button>
                                                        </div>
                                                    </div>
                    }
                }
                else
                {
                                <div @onclick="CustomSystemSelected">
                                    <Button style="pill" >
                                        <content>
                                            <p  class="font-semibold">Custom</p>
                                        </content>
                                    </Button>
                                </div>
                }
                </div>
        </div>
    </div>
</div>
@* Add Appliances *@
<div class="hidden lg:flex w-full h-full -mt-5 px-4">
    <div class="w-4/12 grid grid-cols-2 justify-center scale-90 gap-4 -mt-4">
        <div class="flex flex-col gap-4 col-span-2 items-center justify-center mb-4 -mt-8">
            <div class="flex gap-3 w-full relative justify-center">
                <h1 class="text-base font-medium text-center mb-2  text-primary-900">Select Appliances</h1>
                <div class="group">
                    <Image ImageName="Info.svg" alt="Info" css="w-7 hover:-translate-y-1 transition-all duration-300" />
                    <div
                        class="absolute hidden fade-in-active w-full -top-10 translate-x-10 max-w-md  group-hover:block transition-all duration-300 ease-in-out text-sm  bg-primary-200 shadow rounded-t-2xl rounded-r-2xl p-4 group-hover:-translate-y-10 ">
                        <p class="text-gray-900">Click on the appliances to add them to your calculation.</p>
                    </div>
                </div>
            </div>
            @* Tabs to add or remove *@
            <div class="flex flex-col gap-2 justify-center items-center w-full  my-7">
                @* <Tabs @bind-Items="categories"></Tabs> *@
                <Tabs @bind-Items="tabs"></Tabs>
            </div>
            <div class="grid mx-auto gap-4 space-y-2 grid-cols-2 mt-2 justify-center">
                @if (tabs[0].active)
                {
                    @foreach (var appliance in appliances)
                    {
                                                                <div @onclick="@(() => IncrementApplianceCount(appliance))">
                                                                    <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1" imageName="@(appliance.type + ".svg")" name="@appliance.type" count="@appliance.quantity" />
                                                                </div>
                    }
                }
                else
                {
                    @foreach (var appliance in appliances)
                    {
                                                                <div @onclick="@(() => DecrementApplianceCount(appliance))">
                                                                    <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1"
                                                                    imageName="@(appliance.type + ".svg")" name="@appliance.type" count="@appliance.quantity" />
                                                                </div>
                    }
                }
            </div>
        </div>
    </div>
    <div class="w-full pl-32 flex flex-col justify-center items-center">
        @* Home images *@
        <div class="flex pjustify-center items-center h-full">
            @switch (selectedSystem)
            {
                case 0:
                    homeType = "-Home1.svg";
                    break;
                case 1:
                    homeType = "-Home2.svg";
                    break;
                case 2:
                    homeType = "-Home3.svg";
                    break;
                case 3:
                    if (customCreatedSystem <= 5)
                    {
                        homeType = "-Home1.svg";
                    }
                    else if (customCreatedSystem <= 8)
                    {
                        homeType = "-Home2.svg";
                    }
                    else
                    {
                        homeType = "-Home3.svg";
                    }
                    break;
                default:
                    homeType = "-Home1.svg";
                    break;
            }
            @{
                homeImage = homeSize + homeType;
            }
            <Image ImageName="@homeImage" alt="Home" css="w-10/12 h-full" />
        </div>
    </div>
    @* System details *@
    <div class="w-6/12 px-1 -mt-40 flex flex-col justify-center items-center gap-4">
        <h1 class="text-base font-medium text-center text-primary-900">What this means for you</h1>
        <div class="flex justify-between gap-4 scale-75 mt-4 mb-16">
            @if (showCustomSystem)
            {
                        <div @onclick='@(() => CustomSystemModal("Panels"))'>
                            <Appliance ImageName="SolarPanels.svg" name="Number of Panels"
                                count=@customPanelsNumber />
                        </div>
                        <div @onclick='@(() => CustomSystemModal("Batteries"))'>
                            <Appliance ImageName="Batteries.svg" name="Number of Batteries"
                                count=@customBatteriesNumber />
                        </div>
            }
            else
            {
                        <Appliance ImageName="SolarPanels.svg" name="Number of Panels"
                            count=@systems[selectedSystem].numberOfPanels />
                        <Appliance ImageName="Batteries.svg" name="Number of Batteries"
                            count=@systems[selectedSystem].numberOfBatteries />
            }
        </div>
        <h3 class="font-medium text-lg text-primary-900 text-left">Running Hours</h3>
        <div class="flex relative flex-col justify-center w-full">
            @{
                dlh = 0;
                if (currentReport != null)
                {
                    daylight = (float)Math.Round(currentLocationData!.daylightHours, 2);

                    dlh = (float)Math.Round((24 - daylight) * (runningHoursPercentage / 100), 2);
                    @* daylightChart.SetDaylightHours(daylight);
                    daylightChart.SetHours(dlh); *@
                }
            }
            <DaylightChart hours="@dlh" daylightHours="@daylight" />
            <div class="flex w-full justify-center absolute top-1/2 left-0 items-center gap-1 mt-20">
                <p class="text-5xl text-primary-900 font-semibold">@{
                        if (dlh == (24 - daylight))
                        {
                                                                    <p>@dlh+</p>
                        }
                        else
                        {
                                                                    <p>@dlh</p>
                        }
                    }
                </p>
                <p class="text-5xl text-gray-400 font-bold">h</p>
            </div>
        </div>
    </div>
</div>

@* Appliance Summary *@

@* <div class="hidden lg:flex gap-5 px-10 w-full mt-10">
    <div
        class="border-primary-500 transition-all duration-200 border-1 p-10 justify-start flex flex-col rounded-3xl w-full">
        <div class="flex gap-4 justify-start mb-10 relative">
            <h1 class="text-base font-semibold text-primary-900">What do you want to run in a power outage?</h1>
            <div class="group">
                <Image ImageName="Info.svg" alt="Info" css="w-7 hover:-translate-y-1 transition-all duration-300" />
                <div
                    class="absolute hidden fade-in-active w-full -top-10 left-[38%] max-w-md  group-hover:block transition-all duration-300 ease-in-out text-sm  bg-primary-200 shadow rounded-t-2xl rounded-r-2xl p-4 group-hover:-translate-y-10 ">
                    <p class="text-gray-900">Click on the appliances to add them to your calculation.</p>
                </div>
            </div>
        </div>
        <div class="flex gap-10 scale-90 justify-stretchs">
            @foreach (var appliance in appliances)
            {
                if (appliance.quantity > 0)
                {
                                <div @onclick="@(() => DecrementApplianceCount(appliance))">
                                    <Appliance fade="@appliance.fade" css="hover:shadow transition-all duration-300 hover:-translate-y-1"
                                        imageName="@(appliance.type + ".svg")" name="@appliance.type" count="@appliance.quantity" />
                                </div>
                }
            }
        </div>
    </div>
    <div class="w-4/12 justify-center flex">
        <div class="flex flex-col my-auto gap-6 items-center>">
            <Button css="h-16 w-60" style="outline">
                <content>
                    <p @onclick="ResetHome">Reset</p>
                </content>
            </Button>
            <Button css="h-16 w-60" style="pill">
                <content>
                    @if (edit)
                    {
                                <p @onclick="ModalPopup.Show">Update calculation</p>
                    }
                    else
                    {
                                <p @onclick="ModalPopup.Show">Save this calculation</p>
                    }
                </content>
            </Button>
        </div>
    </div> 
</div> *@

@* <SelectVariant type="Fridge" customAppliances="@customAppliances"/> *@

@if (showCustomSystem)
{
                      <ModalPopup @ref="ModalPopup" Title=@customModalTitle>
                            <p>@customModalTitle</p>
        @if (@customModalTitle == "Number of Solar Panels")
        {
                                    <Input  @bind-InputValue="customPanels" placeholder="@customPanels" type="number"/>
        }
        else
        {
                                    <Input  @bind-InputValue="customBatteries" placeholder="@customBatteries" type="number"/>    
        }
                            <div class="flex flex-row gap-4 justify-center">
            @if (@customModalTitle == "Number of Solar Panels")
            {
                                            <div @onclick="SetNumberOfPanels">
                                                <Button>
                                                    <content>
                                                        Save
                                                    </content>
                                                </Button>
                                            </div>
            }
            else
            {
                                            <div @onclick="SetNumberOfBatteries">
                                                <Button>
                                                    <content>
                                                        Save
                                                    </content>
                                                </Button>
                                            </div>
            }
                                <div @onclick="ModalPopup.Dismiss">
                                    <Button style="outline">
                                        <content>Cancel</content>
                                    </Button>
                                </div>
                            </div>
                    </ModalPopup>  
}
else
{
                <ModalPopup @ref="ModalPopup" Title="Save your calculation?">
        @if (edit)
        {
                                            <p>Rename this calculation?</p>
        }
        else
        {
                                            <p>Add a nickname for this calculation:</p>
        }
                        <Input @bind-InputValue="calculationName" placeholder="Nickname" />
                        <div class="flex flex-row gap-4 justify-center">
            @if (edit)
            {
                                                <div @onclick="UpdateCalculation">
                                                    <Button>
                                                        <content>
                                                        Update
                                                            </content>
                                                    </Button>
                                            </div>
            }
            else
            {
                                            <div @onclick="SaveCalculation">
                                                <Button>
                                                    <content>
                                                        Save
                                                    </content>
                                                </Button>
                                            </div>
            }
                            <div @onclick="ModalPopup.Dismiss">
                                <Button style="outline">
                                    <content>Cancel</content>
                                </Button>
                            </div>
                        </div>
                </ModalPopup>
}

@* Mobile Viewport *@
<div class="flex flex-col justify-center lg:hidden w-full h-full px-4">
    <div class="w-full px-4 flex flex-col justify-center items-center gap-4">
        <h1 class="text-base font-medium text-center text-primary-900">What this means for you</h1>
        <div class="flex justify-between gap-4 mt-4 mb-16">
            <Appliance ImageName="SolarPanels.svg" Name="Number of Panels"
                Count=@systems[selectedSystem].numberOfPanels />
            <Appliance ImageName="Batteries.svg" Name="Number of Batteries"
                Count=@systems[selectedSystem].numberOfBatteries />
        </div>
    </div>
    <div class="w-full flex flex-col justify-center items-center">
        <div class="flex mb-10 justify-center items-center h-full">
            @*
            <Image ImageName="House 3.svg" alt="House" css="scale-105" /> *@
            @switch (selectedSystem)
            {
                case 0:
                                                            <Image ImageName="Small-Home3.svg" alt="House" css="scale-95" />
                    break;
                case 1:
                                                            <Image ImageName="Small-Home2.svg" alt="House" css="scale-95" />
                    break;
                case 2:
                                                            <Image ImageName="Small-Home1.svg" alt="House" css="scale-95" />
                    break;
                case 3:
                    if (customCreatedSystem <= 5)
                    {
                                                                                    <Image ImageName="Small-Home3.svg" alt="House" css="scale-95" /> 
                    }
                    else if (customCreatedSystem <= 8)
                    {
                                                                                    <Image ImageName="Small-Home2.svg" alt="House" css="scale-95" />
                    }
                    else
                    {
                                                                                    <Image ImageName="Small-Home1.svg" alt="House" css="scale-95" />
                    }
                    break;
                default:
                                                            <Image ImageName="Small-Home2.svg" alt="House" css="scale-95" />
                    break;
            }
        </div>
        <DaylightChart hours="@daylight" daylightHours="@dlh" />
    </div>
    <h1 class="text-base font-medium text-center mb-2  text-primary-900">Select Appliances</h1>
    <div class="flex justify-center items-center  my-7">
        <Tabs @bind-Items="tabs"></Tabs>
    </div>
    <div class="grid mx-auto gap-4 space-y-2 grid-cols-2 mt-2 justify-center">
        @if (tabs[0].active)
        {
            @foreach (var appliance in appliances)
            {
                if (appliance.quantity > 0)
                {
                                                                                <div @onclick="@(() => IncrementApplianceCount(appliance))">
                                                                                    <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1"
                                                                                        ImageName="@(appliance.type + ".svg")" Name="@appliance.type" Count="@appliance.quantity" />
                                                                                </div>
                }
                else
                {
                                                                                <div class="fade-in-active" @onclick="@(() => IncrementApplianceCount(appliance))">
                                                                                    <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1"
                                                                                        ImageName="@(appliance.type + ".svg")" Name="@appliance.type" />
                                                                                </div>
                }
            }
        }
        else
        {
            @foreach (var appliance in appliances)
            {
                if (appliance.quantity > 0)
                {
                                                                            <div @onclick="@(() => DecrementApplianceCount(appliance))">
                                                                                <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1"
                                                                                    ImageName="@(appliance.type + ".svg")" Name="@appliance.type" Count="@appliance.quantity" />
                                                                            </div>
                }
                else
                {   
                                                                            <div class="fade-in-active">
                                                                                <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1"
                                                                                    ImageName="@(appliance.type + ".svg")" Name="@appliance.type" />
                                                                            </div>
                }
            }
        }
    </div>
    @* <div class="flex mt-10 mx-auto gap-6 items-center>">
        <Button css="h-16 w-full" style="outline">
            <content>
                <p @onclick="ResetHome">Reset</p>
            </content>
        </Button>
        <Button css="h-16 w-full" style="pill">
            <content>
                <p @onclick="SaveCalculation">Save this calculation</p>
            </content>
        </Button>
    </div> *@
</div>

@code {
    private SharedUtils.reportClass reportClass = new SharedUtils.reportClass();
    private SharedUtils.reportApplianceClass reportApplianceClass = new SharedUtils.reportApplianceClass();
    private SharedUtils.customApplianceClass customApplianceClass = new SharedUtils.customApplianceClass();
    [Parameter]
    public List<ApplianceModel> appliances { get; set; } = new List<ApplianceModel>();
    [Parameter]
    public List<SystemModel> systems { get; set; } = new List<SystemModel>();
    [Parameter]
    public int selectedSystem { get; set; }
    [Parameter]
    public EventCallback<int> selectedSystemChanged { get; set; }
    [Parameter]
    public List<ReportAllApplianceModel>? reportAllAppliance { get; set; }
    [Parameter]
    public ReportModel? currentReport { get; set; }
    [Parameter]
    public bool edit { get; set; }
    [Parameter]
    public LocationDataModel? currentLocationData { get; set; }
    private List<ReportModel> reports = new List<ReportModel>();
    private int userId = -1;
    private ModalPopup ModalPopup { get; set; } = new ModalPopup();
    private string? calculationName { get; set; }
    private List<ApplianceModel> applianceQuantities = new List<ApplianceModel>();
    private List<CustomApplianceModel> customAppliances = new List<CustomApplianceModel>();
    private List<TabItemModel> tabs = new List<TabItemModel>
    {
        new TabItemModel("Add", true),
        new TabItemModel("Remove", false)
    };
    private List<TabItemModel> categories = new List<TabItemModel>
    {
        new TabItemModel("Kitchen", true),
        new TabItemModel("Entertainment", false),
        new TabItemModel("General", false)
    };
    float runningHoursPercentage = 0f;
    float dlh = 0f;
    float daylight = 0f;
    DaylightChart daylightChart = new DaylightChart();
    private string homeSize = "Small";
    private string homeType = "";
    private string homeImage = "";
    private bool showCustomSystem = false;
    private bool displayCreatedCustomSystem = false;
    private int customCreatedSystem = 0;
    private int customPanelsNumber = 0;
    private string customPanels = "";
    private int customBatteriesNumber = 0;
    private string customBatteries = "";
    private string customModalTitle = "";

    /// <summary>
    /// On initialisation, get the user id from local storage
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var usId = await ProtectedLocalStore.GetAsync<int>("userId");
        userId = usId.Value;
        if (currentReport!.homeSize != null)
        {
            homeSize = currentReport.homeSize;
        }

        CalculateRunningHours();
        @* Get custom Appliances *@
        customAppliances = await customApplianceClass.GetAllCustomAppliances();
    }

    /// <summary>
    /// On parameters set, set the appliance quantities to the values from the report
    /// </summary>
    protected override void OnParametersSet()
    {
        if (reportAllAppliance != null)
        {
            for (int i = 0; i < reportAllAppliance!.Count; i++)
            {

                if (reportAllAppliance[i].type!.Equals("Kettle"))
                {
                    appliances[0].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("Fridge"))
                {
                    appliances[1].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("Lights"))
                {
                    appliances[2].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("TV"))
                {
                    appliances[3].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("Computer"))
                {
                    appliances[4].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("Microwave"))
                {
                    appliances[5].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("CCTV"))
                {
                    appliances[6].quantity = reportAllAppliance[i].numberOfAppliances;
                }
                else if (reportAllAppliance[i].type!.Equals("Washing Machine"))
                {
                    appliances[7].quantity = reportAllAppliance[i].numberOfAppliances;
                }

            }
        }
        calculationName = currentReport!.reportName;

        for (int i = 0; i < appliances.Count; i++)
        {
            ApplianceModel appliance = new ApplianceModel();
            appliance.applianceId = appliances[i].applianceId;
            appliance.type = appliances[i].type;
            appliance.powerUsage = appliances[i].powerUsage;
            appliance.quantity = appliances[i].quantity;
            applianceQuantities.Add(appliance);
        }


    }

    public void CreateCustomSystem()
    {
        if (displayCreatedCustomSystem)
        {
            displayCreatedCustomSystem = false;
        }
        else
        {
            displayCreatedCustomSystem = true;
            ProtectedSessionStore.SetAsync("selectedSystem", selectedSystem);
            CalculateRunningHours();
        }
    }

    public void CustomSystemSelected()
    {
        selectedSystem = 3;
        if (showCustomSystem)
        {
            showCustomSystem = false;
        }
        else
        {
            showCustomSystem = true;
        }
    }

    public void CustomSystemModal(string modalType)
    {
        if (modalType == "Panels")
        {
            customModalTitle = "Number of Solar Panels";
        }
        else
        {
            customModalTitle = "Number of Batteries";
        }
        ModalPopup.Show();
    }

    public void SetNumberOfPanels()
    {
        customPanelsNumber = Convert.ToInt32(customPanels);
        customPanels = "";
        ModalPopup.Dismiss();
    }

    public void SetNumberOfBatteries()
    {
        customBatteriesNumber = Convert.ToInt32(customBatteries);
        customBatteries = "";
        ModalPopup.Dismiss();
    }

    /// <summary>
    /// On selected system changed, update the selected system and calculate the running hours
    /// </summary>
    public Task OnSelectedSystemChanged(ChangeEventArgs e)
    {
        selectedSystem = Convert.ToInt32(e.Value);
        return selectedSystemChanged.InvokeAsync(selectedSystem);
    }

    private void IncrementApplianceCount(ApplianceModel appliance)
    {
        appliance.fade = "fade-in-active";
        StateHasChanged();
        appliance.quantity++;
        UpdateApplianceStorage();
        CalculateRunningHours();
        applianceService.UpdateAppliance(appliances);
    }

    /// <summary>
    /// On appliance count changed, update the appliance count and calculate the running hours
    /// </summary>
    private async void DecrementApplianceCount(ApplianceModel appliance)
    {
        if (appliance.quantity == 1)
        {
            appliance.fade = "fade-out-active";
            StateHasChanged();
            await Task.Delay(300);
        }
        appliance.quantity--;
        if (appliance.quantity < 0)
        {
            appliance.quantity = 0;
        }
        appliance.fade = "fade-in-active";
        StateHasChanged();
        UpdateApplianceStorage();
        CalculateRunningHours();
        applianceService.UpdateAppliance(appliances);
    }

    private async void UpdateApplianceStorage()
    {
        await ProtectedSessionStore.SetAsync("advancedCalculationAppliances", appliances);
    }

    /// <summary>
    /// On system size changed, update the selected system and calculate the running hours
    /// </summary>
    private void SetSystemSize(int selection)
    {
        showCustomSystem = false;
        selectedSystem = selection;
        ProtectedSessionStore.SetAsync("selectedSystem", selectedSystem);
        selectedSystemChanged.InvokeAsync(selectedSystem);
        CalculateRunningHours();
    }

    /// <summary>
    /// On template changed, update the selected system and appliance quantities
    /// </summary>
    private void ApplyTemplate(ChangeEventArgs e)
    {
        showCustomSystem = false;
        switch (e.Value)
        {
            case "2":
                homeSize = "Small";
                selectedSystem = 0;
                appliances[0].quantity = 1;
                appliances[1].quantity = 1;
                appliances[2].quantity = 15;
                appliances[3].quantity = 1;
                appliances[4].quantity = 0;
                appliances[5].quantity = 1;
                appliances[6].quantity = 0;
                appliances[7].quantity = 0;

                break;
            case "3":
                homeSize = "Medium";
                selectedSystem = 1;
                appliances[0].quantity = 1;
                appliances[1].quantity = 1;
                appliances[2].quantity = 20;
                appliances[3].quantity = 1;
                appliances[4].quantity = 1;
                appliances[5].quantity = 1;
                appliances[6].quantity = 0;
                appliances[7].quantity = 0;
                break;
            case "4":
                homeSize = "Large";
                selectedSystem = 2;
                appliances[0].quantity = 2;
                appliances[1].quantity = 1;
                appliances[2].quantity = 30;
                appliances[3].quantity = 2;
                appliances[4].quantity = 2;
                appliances[5].quantity = 1;
                appliances[6].quantity = 0;
                appliances[7].quantity = 1;
                break;
            default:
                homeSize = "Small";
                selectedSystem = 0;
                appliances[0].quantity = 1;
                appliances[1].quantity = 1;
                appliances[2].quantity = 15;
                appliances[3].quantity = 1;
                appliances[4].quantity = 0;
                appliances[5].quantity = 1;
                appliances[6].quantity = 0;
                appliances[7].quantity = 0;
                break;
        }
        applianceService.UpdateAppliance(appliances);
    }

    private async void ResetHome()
    {
        Console.WriteLine("Resetting");
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('selectHome').value = 1;");
        appliances[0].quantity = 0;
        appliances[1].quantity = 0;
        appliances[2].quantity = 0;
        appliances[3].quantity = 0;
        appliances[4].quantity = 0;
        appliances[5].quantity = 0;
        appliances[6].quantity = 0;
        appliances[7].quantity = 0;
        showCustomSystem = false;
        selectedSystem = 0;
        await selectedSystemChanged.InvokeAsync(selectedSystem);
        CalculateRunningHours();
    }

    private async void SaveCalculation()
    {
        ModalPopup.Dismiss();
        ShowLoadingScreen();
        if (await reportClass.CreateReport(calculationName!, userId, homeSize, currentReport!.latitude, currentReport.longitude, systems[selectedSystem].systemId))
        {
            toastService.ShowToast("Saved Calculation", "Report successfuly saved.", "success");

            reports = await reportClass.GetUserReports(userId);
            if (reports.Count > 0)
            {
                await ProtectedSessionStore.SetAsync("userReports", reports);
                await ProtectedSessionStore.SetAsync("createdReport", reports[reports.Count - 1].reportId);
                await ProtectedSessionStore.SetAsync("currentReport", reports[reports.Count - 1]);

                foreach (var appliance in appliances)
                {
                    await reportApplianceClass.CreateReportAppliance(reports[reports.Count - 1].reportId, appliance);
                }
            }
        }
        else
        {
            toastService.ShowToast("Error", "Report failed to save.", "error");
        }
        loadingService.ShowLoadingScreen();
        NavigationManager.NavigateTo("/dashboard");
    }

    private async Task UpdateCalculation()
    {
        ShowLoadingScreen();
        if (await reportClass.UpdateReport(currentReport!.reportId, calculationName!, userId, homeSize, currentReport.latitude, currentReport.longitude, systems[selectedSystem].systemId))
        {

            toastService.ShowToast("Updated Calculation", "Report updated saved.", "success");

            for (int i = 0; i < 8; i++)
            {
                if (appliances[i].quantity != applianceQuantities[i].quantity)
                {
                    await reportApplianceClass.UpdateReportAppliance(currentReport.reportId, appliances[i]);
                }
            }
            await ProtectedSessionStore.SetAsync("createdReport", currentReport.reportId);
        }
        loadingService.ShowLoadingScreen();
        NavigationManager.NavigateTo("/dashboard");
    }

    private void ShowLoadingScreen()
    {
        loadingService.ShowLoadingScreen();
    }

    private void CalculateRunningHours()
    {
        int numBatteries = systems[selectedSystem].numberOfBatteries;
        int batteryStorage = systems[selectedSystem].batterySize * 1000; // kwh
        float sumOfAppliances = 0f;

        foreach (var appliance in appliances)
        {
            if (appliance.quantity > 0)
            {
                sumOfAppliances += appliance.quantity * appliance.powerUsage;
            }
        }

        float runningHours = (numBatteries * batteryStorage) / sumOfAppliances;
        float nonDaylightHours = 24 - (float)(currentLocationData!.daylightHours);
        runningHoursPercentage = (runningHours / nonDaylightHours) * 100;
        if (runningHoursPercentage > 100)
        {
            runningHoursPercentage = 100;
        }
    }
}