@inject  BlazorApp.Data.ApplianceService applianceService

<div class="border-primary-500 transition-all duration-200 border-1 p-10 justify-start flex flex-col rounded-3xl w-full z-20">
    <Heading css="mb-12 max-w-4xl mx-auto">
        <Superscript><h1 class="text-center">Variants</h1></Superscript >
        <Header><h1 class="text-center">Customise your Appliances</h1></Header>
        <Subscript><p class="text-center">Once appliances have been added to the calculation with the tool above - specific models of those appliances with their associated power usage can be specified below. <br/>
                                        If you cannot find your appliance in the list of appliance models below, you can specify the power usage of your appliance by selecting custom appliance
        </p></Subscript>
    </Heading>
    <div class="flex gap-20 scale-90 justify-center">
            @{applianceCount = appliances.Count(x => x.quantity > 0);}
            @foreach (var appliance in appliances)
            {
                if (appliance.quantity > 0)
                {
                    <div  class='@(selectedAppliance == appliance.type ? "bg-primary-100 h-40" : "") p-3 rounded-2xl' @onclick='(() => appliance.type != null ? SelectAppliance(appliance.type) : SelectAppliance(""))'>
                        <Appliance fade="@appliance.fade" css="hover:shadow transition-all duration-300 hover:-translate-y-1" imageName="@(appliance.type + ".svg")" name="@appliance.type" count="@appliance.quantity" />
                    </div>
                }
            }
            @if (applianceCount == 0)
            {
                <p class="text-xl font-medium text-primary-800 text-center">No Appliances Selected</p>
            }
    </div>
    @if (selectedAppliance != "" && appliances.Where(x => x.type == selectedAppliance)?.FirstOrDefault()?.quantity != 0) {

        <div class="flex w-full h-full flex-col gap-10 bg-primary-100 wipe-down p-4 -mt-7 rounded-2xl">
            @* Add variant button *@
                <div class="flex gap-2">
                    <SelectVariant @bind-value="value" type="@selectedAppliance" customAppliances="@customAppliances" />
                    <div @onclick='@(() => ChangeDefaultApplianceName(value!, selectedAppliance))'>
                        <Button style="pill">
                            <content>
                                <p>Add Variant</p>
                            </content>
                        </Button>
                    </div>
                </div>

            @foreach (var item in customAppliancesWithCounts!)
            {
                if (item.type == selectedAppliance)
                {
                    <div class="flex gap-4">
                        <Appliance fade="@item.fade" css="hover:shadow bg-white transition-all duration-300 hover:-translate-y-1" imageName="@(item.type + ".svg")" name="@item.type" count="@item.quantity" />
                        <p class="bg-white h-fit p-3 rounded-md w-full my-auto -translate-y-4">@item.name</p>
                        <p class="bg-white h-fit p-3 rounded-md w-full my-auto -translate-y-4">@item.durationUsed<span class="text-gray-400 text-end w-full"> hrs</span></p>
                        <p class="bg-white h-fit p-3 rounded-md w-full my-auto -translate-y-4">@item.powerUsage<span class="text-gray-400 text-end w-full"> kwh</span></p>
                    </div>
                }
            }
        </div>
    }
</div>

@code {
    private string? value = "";
    private string selectedAppliance = "";
    private int applianceCount = 0;
    [Parameter]
    public List<ApplianceModel> appliances { get; set; } = new List<ApplianceModel>();
    [Parameter]
    public List<SystemModel> systems { get; set; } = new List<SystemModel>();
    [Parameter]
    public int solarScore { get; set; }
    [Parameter]
    public int selectedSystem { get; set; }
    [Parameter]
    public EventCallback<int> selectedSystemChanged { get; set; }
    [Parameter]
    public List<ReportAllApplianceModel>? reportAllAppliance { get; set; }
    [Parameter]
    public ReportModel? currentReport { get; set; }
    [Parameter]
    public bool edit { get; set; }
    [Parameter]
    public double latitude { get; set; }
    [Parameter]
    public double longitude { get; set; }
    [Parameter]
    public LocationDataModel? currentLocationData { get; set; }
    [Parameter]
    public List<CustomApplianceModel>? customAppliances { get; set; }
    private List<ApplianceModel> allAppliances = new List<ApplianceModel>();

    protected override void OnInitialized()
    {
        applianceService.UpdateAppliancesRequested += UpdateAppliances;
    }



public void UpdateAppliances(List<ApplianceModel> applianceGroups)
{
    // Create a dictionary to store appliance variants by type
    Dictionary<string, List<ApplianceModel>> customAppliancesVariants = new Dictionary<string, List<ApplianceModel>>();

    if (allAppliances != null)
    {
        foreach (var appliance in allAppliances)
        {
            if (appliance.name != "Default")
            {
                if (!customAppliancesVariants.ContainsKey(appliance.type!))
                {
                    customAppliancesVariants[appliance.type!] = new List<ApplianceModel>();
                }
                customAppliancesVariants[appliance.type!].Add(appliance);
            }
        }
    }
    else
    {
        allAppliances = new List<ApplianceModel>();
    }

    // Clear the customAppliances list
    allAppliances.Clear();


    foreach (var applianceGroup in applianceGroups)
    {
        for (int i = 0; i < applianceGroup.quantity; i++)
        {
            allAppliances.Add(new ApplianceModel
            {
                name = applianceGroup.name,
                type = applianceGroup.type,
                quantity = 0
            });
        }
    }

    // Add the non-"Default" appliances back to customAppliances
    foreach (var variantList in customAppliancesVariants.Values)
    {
        allAppliances.AddRange(variantList);
    }

    foreach (var applianceGroup in applianceGroups)
    {
        while(allAppliances.Count(x => x.type == applianceGroup.type) < applianceGroup.quantity)
        {
            allAppliances.Add(new ApplianceModel
            {
                name = "Default",
                type = applianceGroup.type,
                quantity = 1
            });
        }

        while (allAppliances.Count(x => x.type == applianceGroup.type) > applianceGroup.quantity)
        {
            if((allAppliances.FirstOrDefault(x => x.type == applianceGroup.type)) != null) {
                allAppliances.Remove(allAppliances.FirstOrDefault(x => x.type == applianceGroup.type)!);
            }
        }
    }

    UpdateCustomAppliancesWithCounts();
    StateHasChanged();
}
    List<ApplianceModel>? customAppliancesWithCounts;

    // Function to update the customAppliancesWithCounts list
    private void UpdateCustomAppliancesWithCounts()
    {
        customAppliancesWithCounts = new List<ApplianceModel>();

        foreach (var appliance in allAppliances)
        {
            // Check if an appliance with the same name and type exists in customAppliancesWithCounts
            var existingAppliance = customAppliancesWithCounts.FirstOrDefault(a =>
                a.name == appliance.name && a.type == appliance.type);

            if (existingAppliance != null)
            {
                // Increment the quantity if it exists
                existingAppliance.quantity++;
            }
            else
            {
                // Add a new appliance with quantity 1
                customAppliancesWithCounts.Add(new ApplianceModel
                {
                    name = appliance.name,
                    type = appliance.type,
                    quantity = 1
                });
            }
        }
    }

    public void ChangeDefaultApplianceName(string newName, string type)
    {

        var defaultAppliance = allAppliances.FirstOrDefault(appliance => appliance.name == "Default" && appliance.type == type);

        if (defaultAppliance != null)
        {
            // Change the name of the found "Default" appliance
            defaultAppliance.name = newName;
            UpdateCustomAppliancesWithCounts();
            StateHasChanged();
        }
    }




    public Task SelectAppliance (string appliance)
    {
        if (appliance == selectedAppliance)
        {
            selectedAppliance = "";
            StateHasChanged();
        } else {
            selectedAppliance = appliance;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
}