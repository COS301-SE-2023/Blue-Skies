@inject  BlazorApp.Data.ApplianceService applianceService
@using System.Text.Json;

<div class="border-primary-500 transition-all duration-200 border-1 p-10 justify-start flex flex-col rounded-3xl w-full z-20">
    <Heading css="mb-12 max-w-4xl mx-auto">
        <Superscript><h1 class="text-center">Variants</h1></Superscript >
        <Header><h1 class="text-center">Customise your Appliances</h1></Header>
        <Subscript><p class="text-center max-w-4xl">Once appliances have been added to the calculation with the tool above - specific models of those appliances with their associated power usage can be specified below. If you cannot find your appliance in the list of appliance models below, you can specify the power usage of your appliance by selecting custom appliance</p></Subscript>
    </Heading>
    <div class="flex gap-20 scale-90 justify-center">
        @if (appliances != null)
        {
            applianceCount = appliances.Count(x => x.quantity > 0);
            @foreach (var appliance in appliances)
            {
                if (appliance.quantity > 0)
                {
                    <div  class='@(selectedAppliance == appliance.type ? "bg-primary-100 h-40" : "") p-3 rounded-2xl' @onclick='(() => appliance.type != null ? SelectAppliance(appliance.type) : SelectAppliance(""))'>
                        <Appliance fade="@appliance.fade" css="hover:shadow transition-all duration-300 hover:-translate-y-1" imageName="@(appliance.type + ".svg")" name="@appliance.type" count="@appliance.quantity" />
                    </div>
                }
            }
            @if (applianceCount == 0)
            {
                <p class="text-xl font-medium text-primary-800 text-center">No Appliances Selected</p>
            }
        }
    </div>
    @if (selectedAppliance != "" && appliances != null && appliances.Where(x => x.type == selectedAppliance)?.FirstOrDefault()?.quantity != 0) {

        <div class="flex w-full h-full flex-col gap-10 bg-primary-100 wipe-down p-4 -mt-7 rounded-2xl">
            @* Add variant button *@
            <div class="flex mt-2 gap-4 mb-5">
                    <div class="w-2/3 my-auto">
                        <label class="text-gray-400 my-auto">Search for your appliance:</label>
                        <SelectVariant @bind-value="value" @bind-powerUsage="powerUsage" type="@selectedAppliance" customAppliances="@customAppliances" />
                    </div>
                <div class="my-auto translate-y-2"  @onclick='@(() => ChangeDefaultApplianceName(value!, selectedAppliance, powerUsage ))'>
                    <Button style="pill">
                        <content>
                            <p>Add Variant</p>
                        </content>
                    </Button>
                </div>
            </div>

            @foreach (var item in customAppliancesWithCounts!)
            {
                if (item.type == selectedAppliance)
                {
                    <div class="flex gap-4">
                        <Appliance fade="@item.fade" css="hover:shadow bg-white transition-all duration-300 hover:-translate-y-1" imageName="@(item.type + ".svg")" name="@item.type" count="@item.quantity" />
                        <div class="w-full">
                            <label class="-translate-y-2 text-gray-400 mb-2" for="applianceName">Appliance Name:</label>
                            <input name="applianceName" id="applianceName" type="text" @bind="@item.name" class="w-full h-fit my-auto rounded-md -translate-y-2 p-3">
                        </div>
                        <div class="w-1/4">
                            <label class="-translate-y-2 text-gray-400 mb-2" for="applianceDuration">Duration of Usage:</label>
                            <div class="bg-white pl-3 w-fit flex h-fit my-auto rounded-md -translate-y-2">
                                <input min="0" max="24" name="applianceDuration" id="applianceDuration" type="number" @bind="item.durationUsed" @oninput="@(e => UpdateApplianceDuration(item, e))" class="w-fit h-fit my-auto rounded-md p-3 ">
                                <span class="text-gray-400 text-end w-full p-3 rounded-md"> hrs</span>
                            </div>
                        </div>
                        <div>
                            <label class="-translate-y-2 text-gray-400 mb-2" for="appliancePower">Power Usage:</label>
                            <div class="bg-white pl-3 w-fit flex h-fit my-auto rounded-md -translate-y-2">
                                <input min="0"  name="@item.name" id="appliancePower" type="number" @bind="item.powerUsage" @oninput="@(e => UpdateAppliancePower(item, e))" class="w-fit h-fit my-auto rounded-md p-3 ">
                                <span class="text-gray-400 text-end w-full p-3 rounded-md"> kwh</span>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
</div>

@code {
    private string? value = "";
    private int powerUsage = 0;
    private double durationUsed = 0;
    private string selectedAppliance = "";
    private int applianceCount = 0;
    [Parameter]
    public List<ApplianceModel> appliances { get; set; } = new List<ApplianceModel>();
    [Parameter]
    public List<SystemModel> systems { get; set; } = new List<SystemModel>();
    [Parameter]
    public int solarScore { get; set; }
    [Parameter]
    public int selectedSystem { get; set; }
    [Parameter]
    public EventCallback<int> selectedSystemChanged { get; set; }
    [Parameter]
    public ReportModel? currentReport { get; set; }
    [Parameter]
    public bool edit { get; set; }
    [Parameter]
    public double latitude { get; set; }
    [Parameter]
    public double longitude { get; set; }
    [Parameter]
    public LocationDataModel? currentLocationData { get; set; }
    [Parameter]
    public List<CustomApplianceModel>? customAppliances { get; set; }
    [Parameter]
    public List<ApplianceModel>? allAppliances { get; set; } 

    protected override void OnInitialized()
    {
        applianceService.UpdateAppliancesRequested += UpdateAppliances;
        UpdateCustomAppliancesWithCounts();
    }

    public void UpdateAppliance(ApplianceModel item)
    {
        item.durationUsed = durationUsed;
        item.powerUsage = powerUsage;
    }

    public void UpdateApplianceDuration(ApplianceModel item, ChangeEventArgs e)
    {
        Console.WriteLine("Update Appliance Duration: " + item.durationUsed);
    }

    public void UpdateAppliancePower(ApplianceModel item, ChangeEventArgs e)
    {
        Console.WriteLine("Update Appliance Power: " + item.powerUsage);
    }



public void UpdateAppliances(List<ApplianceModel> applianceGroups)
{
    // Create a dictionary to store appliance variants by type
    Dictionary<string, List<ApplianceModel>> customAppliancesVariants = new Dictionary<string, List<ApplianceModel>>();

    if (allAppliances != null)
    {
        foreach (var appliance in allAppliances)
        {
            if (appliance.name != "Default")
            {
                if (!customAppliancesVariants.ContainsKey(appliance.type!))
                {
                    customAppliancesVariants[appliance.type!] = new List<ApplianceModel>();
                }
                customAppliancesVariants[appliance.type!].Add(appliance);
            }
        }
    }
    else
    {
        allAppliances = new List<ApplianceModel>();
    }



    foreach (var applianceGroup in applianceGroups)
    {
        for (int i = 0; i < applianceGroup.quantity; i++)
        {
            allAppliances.Add(new ApplianceModel
            {
                name = applianceGroup.name,
                type = applianceGroup.type,
                powerUsage = applianceGroup.powerUsage,
                durationUsed = applianceGroup.durationUsed,
                quantity = 0
            });
        }
    }

    // Add the non-"Default" appliances back to customAppliances
    foreach (var variantList in customAppliancesVariants.Values)
    {
        allAppliances.AddRange(variantList);
    }

    foreach (var applianceGroup in applianceGroups)
    {
        while(allAppliances.Count(x => x.type == applianceGroup.type) < applianceGroup.quantity)
        {
            allAppliances.Add(new ApplianceModel
            {
                name = "Default",
                type = applianceGroup.type,
                powerUsage = applianceGroup.powerUsage,
                durationUsed = applianceGroup.durationUsed,
                quantity = 1
            });
        }
;
        while (allAppliances.Count(x => x.type == applianceGroup.type) > applianceGroup.quantity)
        {
            if((allAppliances.FirstOrDefault(x => x.type == applianceGroup.type)) != null) {
                allAppliances.Remove(allAppliances.FirstOrDefault(x => x.type == applianceGroup.type)!);
            }
        }
    }

    UpdateCustomAppliancesWithCounts();
    StateHasChanged();

    Console.WriteLine(JsonSerializer.Serialize(allAppliances));
    }
    List<ApplianceModel>? customAppliancesWithCounts;

    // Function to update the customAppliancesWithCounts list
    private void UpdateCustomAppliancesWithCounts()
    {
        customAppliancesWithCounts = new List<ApplianceModel>();

        foreach (var appliance in allAppliances!)
        {
            // Check if an appliance with the same name and type exists in customAppliancesWithCounts
            var existingAppliance = customAppliancesWithCounts.FirstOrDefault(a =>
                a.name == appliance.name && a.type == appliance.type);

            if (existingAppliance != null)
            {
                // Increment the quantity if it exists
                existingAppliance.quantity++;
            }
            else
            {
                // Add a new appliance with quantity 1
                customAppliancesWithCounts.Add(new ApplianceModel
                {
                    name = appliance.name,
                    type = appliance.type,
                    powerUsage = appliance.powerUsage,
                    durationUsed = appliance.durationUsed,
                    quantity = 1
                });
            }
        }
    }

    public void ChangeDefaultApplianceName(string newName, string type, int newPower)
    {
        var defaultAppliance = allAppliances!.FirstOrDefault(appliance => appliance.name == "Default" && appliance.type == type);
        double newDuration = allAppliances!.FirstOrDefault(appliance =>  appliance.type == type)!.durationUsed;

        if(newName == "")
        {
            newName = "Default";
        }

        if (defaultAppliance != null)
        {
            // Change the name of the found "Default" appliance
            newDuration = defaultAppliance.durationUsed;
            defaultAppliance.name = newName;
            defaultAppliance.powerUsage = newPower;
            defaultAppliance.durationUsed = newDuration;

            UpdateCustomAppliancesWithCounts();
            StateHasChanged();
        }
        else
        {
            // Add a default appliance and try again
            allAppliances!.Add(new ApplianceModel
            {
                name = "Default",
                type = type,
                quantity = 1,
                durationUsed = newDuration,
                powerUsage = newPower
            });
            appliances!.Where(x => x.type == type).FirstOrDefault()!.quantity++;
            ChangeDefaultApplianceName(newName, type, newPower);

        }
        applianceService.ClearSearch();
    }




    public Task SelectAppliance (string appliance)
    {
        if (appliance == selectedAppliance)
        {
            selectedAppliance = "";
            StateHasChanged();
        } else {
            selectedAppliance = appliance;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
}