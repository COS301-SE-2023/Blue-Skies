@inject  BlazorApp.Data.ApplianceService applianceService
@using System.Text.Json;

<div class="border-primary-500 transition-all duration-200 border-1 p-10 justify-start flex flex-col rounded-3xl w-full z-20">
    <Heading css="mb-12 max-w-4xl mx-auto">
        <Superscript><h1 class="text-center">Variants</h1></Superscript >
        <Header><h1 class="text-center">Customise your Appliances</h1></Header>
        <Subscript><p class="text-center max-w-4xl">Once appliances have been added to the calculation with the tool above - specific models of those appliances with their associated power usage can be specified below. If you cannot find your appliance in the list of appliance models below, you can specify the power usage of your appliance by selecting custom appliance</p></Subscript>
    </Heading>
    <div class="flex  gap-20 scale-90 w-full bg-red-300 overflow-hidden justify-center">
        @if (appliances != null)
        {
            if(appliances.FindAll(x => x.quantity > 0 && x.type == selectedAppliance).Count == 0) {
                selectedAppliance = "";
            }
            applianceCount = appliances.Count(x => x.quantity > 0);
            @foreach (var appliance in GetDifferentApplianceGroups())
            {
                if (appliance.quantity > 0)
                {
                    if(selectedAppliance == "" && appliance.type != null) {
                        selectedAppliance = appliance.type;
                    }
                    <div  class='@(selectedAppliance == appliance.type ? "bg-primary-100 h-40" : "") p-3 rounded-2xl' @onclick='(() => appliance.type != null ? SelectAppliance(appliance.type) : SelectAppliance(""))'>
                        <Appliance fade="@appliance.fade" css="hover:shadow transition-all duration-300 hover:-translate-y-1" imageName="@(appliance.type + ".svg")" name="@appliance.type" count="@appliance.quantity" />
                    </div>
                }
            }
            @if (applianceCount == 0)
            {
                <p class="text-xl font-medium text-primary-800 text-center">No Appliances Selected</p>
            }
        }
    </div>
    @if (selectedAppliance != "" && appliances != null && appliances.Where(x => x.type == selectedAppliance)?.LastOrDefault()?.quantity != 0) {

        <div class="flex w-full h-full flex-col gap-10 bg-primary-100 wipe-down p-4 -mt-7 rounded-2xl">
            @* Add variant button *@
            <div class="flex mt-2 gap-4 mb-5">
                    <div class="w-2/3 my-auto">
                        <label class="text-gray-400 my-auto">Search for your appliance:</label>
                        <SelectVariant @bind-value="value" @bind-powerUsage="powerUsage" type="@selectedAppliance" customAppliances="@customAppliances" />
                    </div>
                <div class="my-auto translate-y-2"  @onclick='@(() => AddVariant(value!, selectedAppliance, powerUsage ))'>
                    <Button style="pill">
                        <content>
                            <p>Add Variant</p>
                        </content>
                    </Button>
                </div>
            </div>

            @foreach (var item in appliances)
            {
                if (item.type == selectedAppliance && item.quantity > 0)
                {
                    <div class="flex gap-4">

                        <div class="flex w-fit justify-center gap-4">
                            <div class="transition-all w-full my-auto duration-300 hover:-translate-y-1" @onclick="@(() => DecrementAppliance(item))">
                                <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <circle cx="16" cy="16" r="16" fill="#F14624"/>
                                    <path d="M9 16.5C9 15.9477 9.44772 15.5 10 15.5H23C23.5523 15.5 24 15.9477 24 16.5V16.5C24 17.0523 23.5523 17.5 23 17.5H10C9.44772 17.5 9 17.0523 9 16.5V16.5Z" fill="white"/>
                                </svg>
                            </div>
                            <Appliance fade="@item.fade" css="bg-white" imageName="@(item.type + ".svg")" name="@item.type" count="@item.quantity" />
                            <div class="transition-all w-full my-auto duration-300 hover:-translate-y-1" @onclick="@(() => IncrementAppliance(item))">
                                <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <circle cx="16" cy="16" r="16" fill="#00C48B"/>
                                    <path d="M8.5 16.5C8.5 15.9477 8.94772 15.5 9.5 15.5H22.5C23.0523 15.5 23.5 15.9477 23.5 16.5V16.5C23.5 17.0523 23.0523 17.5 22.5 17.5H9.5C8.94772 17.5 8.5 17.0523 8.5 16.5V16.5Z" fill="white"/>
                                    <rect x="15" y="24" width="15" height="2" rx="1" transform="rotate(-90 15 24)" fill="white"/>
                                </svg>
                            </div>
                        </div>

                        <div class="w-full">
                            <label class="-translate-y-2 text-gray-400 mb-2" for="applianceName">Appliance Name:</label>
                            <input name="applianceName" id="applianceName" tyÅ¾pe="text" @bind="@item.name" class="w-full h-fit my-auto rounded-md -translate-y-2 p-3">
                        </div>

                        <div class="w-1/4">
                            <label class="-translate-y-2 text-gray-400 mb-2" for="applianceDuration">Duration of Usage:</label>
                            <div class="bg-white pl-3 w-fit flex h-fit my-auto rounded-md -translate-y-2">
                                <input min="0" max="24" name="applianceDuration" id="applianceDuration" type="number" @bind="item.durationUsed" @oninput="@(e => UpdateApplianceDuration(item, e))" class="w-fit h-fit my-auto rounded-md p-3 ">
                                <span class="text-gray-400 text-end w-full p-3 rounded-md"> hrs</span>
                            </div>
                        </div>
                        <div>
                            <label class="-translate-y-2 text-gray-400 mb-2" for="appliancePower">Power Usage:</label>
                            <div class="bg-white pl-3 w-fit flex h-fit my-auto rounded-md -translate-y-2">
                                <input min="0"  name="@item.name" id="appliancePower" type="number" @bind="item.powerUsage" @oninput="@(e => UpdateAppliancePower(item, e))" class="w-fit h-fit my-auto rounded-md p-3 ">
                                <span class="text-gray-400 text-end w-full p-3 rounded-md"> kwh</span>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
</div>

@code {
    private string? value = "";
    private int powerUsage = 0;
    private double durationUsed = 0;
    private string selectedAppliance = "";
    private int applianceCount = 0;
    [Parameter]
    public List<ApplianceModel> appliances { get; set; } = new List<ApplianceModel>();
    [Parameter]
    public List<SystemModel> systems { get; set; } = new List<SystemModel>();
    [Parameter]
    public int solarScore { get; set; }
    [Parameter]
    public int selectedSystem { get; set; }
    [Parameter]
    public EventCallback<int> selectedSystemChanged { get; set; }
    [Parameter]
    public ReportModel? currentReport { get; set; }
    [Parameter]
    public bool edit { get; set; }
    [Parameter]
    public double latitude { get; set; }
    [Parameter]
    public double longitude { get; set; }
    [Parameter]
    public LocationDataModel? currentLocationData { get; set; }
    [Parameter]
    public List<CustomApplianceModel>? customAppliances { get; set; }

    protected override void OnInitialized()
    {
        applianceService.UpdateAppliancesRequested += UpdateAppliances;
        UpdateCustomAppliancesWithCounts();
    }

    public void UpdateApplianceDuration(ApplianceModel item, ChangeEventArgs e)
    {
        Console.WriteLine("Update Appliance Duration: " + item.durationUsed);
    }

    public void UpdateAppliancePower(ApplianceModel item, ChangeEventArgs e)
    {
        Console.WriteLine("Update Appliance Power: " + item.powerUsage);
    }

    public void IncrementAppliance(ApplianceModel item)
    {
        Console.WriteLine("Increment Appliance: " + item.quantity);
        item.quantity++;
        applianceService.UpdateAppliance(appliances);
    }

    public void DecrementAppliance(ApplianceModel item)
    {
        if (item.quantity > 1)
        {
            item.quantity--;    
        } else {
            if(item.name != "Default")
            {
                appliances.Remove(item);
            } else {
                item.quantity = 0;
            }
        }
        printNonZeroAppliances();
        applianceService.UpdateAppliance(appliances);
    }

    private List<ApplianceModel> GetDifferentApplianceGroups() {
        List<ApplianceModel> differentApplianceGroups = new List<ApplianceModel>();
        foreach (var appliance in appliances)
        {
            var existingAppliance = differentApplianceGroups.FirstOrDefault(x => x.type == appliance.type);
            if (existingAppliance == null)
            {
                differentApplianceGroups.Add(new ApplianceModel
                {
                    name = appliance.name,
                    type = appliance.type,
                    quantity = appliance.quantity,
                    durationUsed = appliance.durationUsed,
                    powerUsage = appliance.powerUsage,
                    fade = appliance.fade
                });
            } else {
                existingAppliance.quantity += appliance.quantity;
            }
        }

        Console.WriteLine("Different Appliance Groups: " + JsonSerializer.Serialize(differentApplianceGroups));

        return differentApplianceGroups;
    }

    private void UpdateAppliances(List<ApplianceModel> applianceGroups)
    {
        appliances = applianceGroups;
        StateHasChanged();
    }

    public void AddVariant(string name, string type, int power)
    {
        Console.WriteLine("Adding Variant");
        if(name == "")
        {
            name = "Default";
        }

        if (defaultAppliance != null)
        {
            // Change the name of the found "Default" appliance
            newDuration = defaultAppliance.durationUsed;
            defaultAppliance.name = name;
            defaultAppliance.powerUsage = power;
            defaultAppliance.durationUsed = newDuration;
            StateHasChanged();
        }
        else
        {
            // Add a default appliance and try again
            allAppliances!.Add(new ApplianceModel
            {
                name = "Default",
                type = type,
                quantity = 1,
                durationUsed = newDuration,
                powerUsage = power
            });
            appliances!.Where(x => x.type == type).FirstOrDefault()!.quantity++;
            AddVariant(name, type, power);
        }
        applianceService.UpdateAppliance(appliances);
        applianceService.ClearSearch();
    }

    private void printNonZeroAppliances() {
        foreach (var item in appliances)
        {
            if (item.quantity > 0)
            {
                Console.WriteLine("Appliance: " + item.type + " Name: " + item.name + " Quantity: " + item.quantity + " Power: " + item.powerUsage + " Duration: " + item.durationUsed);
            }
        }
    }

    public Task SelectAppliance (string appliance)
    {
        Console.WriteLine("Selected appliance" + appliance);
        if (appliance == selectedAppliance)
        {
            selectedAppliance = "";
            StateHasChanged();
        } else {
            selectedAppliance = appliance;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
}