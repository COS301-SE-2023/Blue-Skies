@inject  BlazorApp.Data.ApplianceService applianceService

<div class="border-primary-500 transition-all duration-200 border-1 p-10 justify-start flex flex-col rounded-3xl w-full">
    <Heading css="mb-12 max-w-3xl mx-auto">
        <Superscript><h1 class="text-center">Variants</h1></Superscript >
        <Header><h1 class="text-center">Customise your Appliances</h1></Header>
        <Subscript><p class="text-center">Lorem ipsum dolor sit amet consectetur adipiscing elit tortor eu egestas morbi sem vulputate etiam facilisis pellentesque ut quis."</p></Subscript>
    </Heading>
    <div class="flex gap-20 scale-90 justify-center">
            @{applianceCount = appliances.Count(x => x.quantity > 0);}
            @foreach (var appliance in appliances)
            {
                if (appliance.quantity > 0)
                {
                    <div  class='@(selectedAppliance == appliance.type ? "bg-primary-100 h-40" : "") p-3 rounded-2xl' @onclick='(() => appliance.type != null ? SelectAppliance(appliance.type) : SelectAppliance(""))'>
                        <Appliance fade="@appliance.fade" css="hover:shadow transition-all duration-300 hover:-translate-y-1"
                            imageName="@(appliance.type + ".svg")" name="@appliance.type" count="@appliance.quantity" />
                    </div>
                }
            }
            @if (applianceCount == 0)
            {
                <p class="text-xl font-medium text-primary-800 text-center">No Appliances Selected</p>
            }
    </div>
    @if (selectedAppliance != "") {
        <div class="flex w-full bg-primary-100 h-40 -mt-7 rounded-2xl wipe-down">

        </div>
    }
</div>

@code {
    @* private List<List<ApplianceModel>> applianceVariants = new List<List<ApplianceModel>>(); *@
    private string selectedContainerFade = "wipe-down";
    private string selectedAppliance = "";
    private int applianceCount = 0;
    [Parameter]
    public List<ApplianceModel> appliances { get; set; } = new List<ApplianceModel>();
    [Parameter]
    public List<SystemModel> systems { get; set; } = new List<SystemModel>();
    [Parameter]
    public int solarScore { get; set; }
    [Parameter]
    public int selectedSystem { get; set; }
    [Parameter]
    public EventCallback<int> selectedSystemChanged { get; set; }
    [Parameter]
    public List<ReportAllApplianceModel>? reportAllAppliance { get; set; }
    [Parameter]
    public ReportModel? currentReport { get; set; }
    [Parameter]
    public bool edit { get; set; }
    [Parameter]
    public double latitude { get; set; }
    [Parameter]
    public double longitude { get; set; }
    [Parameter]
    public LocationDataModel? currentLocationData { get; set; }

    protected override void OnInitialized()
    {
        applianceService.UpdateAppliancesRequested += UpdateAppliances;
    }
    public void UpdateAppliances (List<ApplianceModel> appliances)
    {
        this.appliances = appliances;
        StateHasChanged();
    }

    public Task SelectAppliance (string appliance)
    {
        if (appliance == selectedAppliance)
        {
            selectedAppliance = "";
            StateHasChanged();
            return Task.CompletedTask;
        }
        selectedAppliance = appliance;
        StateHasChanged();
        return Task.CompletedTask;
    }
}