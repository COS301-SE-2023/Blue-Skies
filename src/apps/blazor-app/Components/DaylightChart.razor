@using ChartJs.Blazor.PieChart

<Chart Config="pieConfig"></Chart>

@code {
    private PieConfig pieConfig = new PieConfig();
    [Parameter]
    public float hours { get; set; } = 10;
    [Parameter]
    public float daylightHours { get; set; } = 12;
    [Parameter]
    public float? concurrent { get; set; }
    [Parameter]
    public bool showLegend { get; set; } = true;
    protected override void OnParametersSet()
    {
        UpdateDataset();
    }

    DataHandlers.CalculationDataHandler calculationHandler = new DataHandlers.CalculationDataHandler();

    protected override void OnInitialized()
    {
        pieConfig = new PieConfig(true)
        {
            Options = new PieOptions
            {
                Responsive = true,
                AspectRatio = 3,
                Legend = new Legend
                {
                    Display = showLegend,
                },
                Title = new OptionsTitle
                {
                    Display = false,
                    Text = "Running Hours",
                    FontSize = 20,
                    Position = Position.Bottom,
                    LineHeight = 4,
                },
                Circumference = 3,
                Rotation = -9.341,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    Duration = 5,

                },
                Tooltips = new Tooltips
                {
                    Enabled = true,
                    Mode = InteractionMode.Index,
                    Intersect = false,
                },
                Hover = new Hover
                {
                    Mode = InteractionMode.Index,
                    Intersect = false
                },
                CutoutPercentage = 70
            }
        };
    }
    public void UpdateDataset()
    {
        if(float.IsInfinity(hours))
        {
            hours = 12;
        }

        pieConfig.Data.Datasets.Clear();
        pieConfig.Data.Labels.Clear();

        foreach (string label in new[] { "Runnable Hours", "Concurrent Hours", "Remaining"})
        {
            pieConfig.Data.Labels.Add(label);
        }
        float remaining = (24 - daylightHours) - hours;
        if(remaining < 0)
        {
            remaining = 0;
        }

        if (concurrent != null) {
            float concurrentRemaining = 4 - (float) concurrent;
            if(concurrentRemaining < 0)
            {
                concurrentRemaining = 0;
            }

            Console.WriteLine("Other color: " + calculationHandler.GetColorGradient(hours));

            string[] colors = new[] {
                calculationHandler.GetColorGradient(hours),
                calculationHandler.GetColorGradient((float)concurrent, 4),
                ColorUtil.ColorHexString(156, 163, 175)
            };

            PieDataset<float?> pieDataset = new PieDataset<float?>(new float?[] {hours, null, remaining })
            {
                BackgroundColor = colors,
            };
            
            PieDataset<float?> pieDataset2 = new PieDataset<float?> (new float?[] { null, (float) concurrent, concurrentRemaining })
            {
                BackgroundColor = colors,
            };

            if (pieConfig != null)
            {
                pieConfig.Data.Datasets.Add(pieDataset);
                pieConfig.Data.Datasets.Add(pieDataset2);
                StateHasChanged();
            }
        } else {

            string[] colors = {
                calculationHandler.GetColorGradient(hours),
                ColorUtil.ColorHexString(156, 163, 175)
            };

            PieDataset<float?> pieDataset = new PieDataset<float?>(new float?[] {hours, null, remaining })
            {
                BackgroundColor = calculationHandler.GetColorGradient(hours),
            };


            if (pieConfig != null)
            {
                pieConfig.Data.Datasets.Add(pieDataset);
                StateHasChanged();
            }
        }
    }
}