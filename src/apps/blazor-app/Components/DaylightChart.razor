@using ChartJs.Blazor.PieChart

<Chart Config="pieConfig"></Chart>

@code {
    private PieConfig pieConfig = new PieConfig();
    [Parameter]
    public float hours { get; set; } = 10;
    [Parameter]
    public float remaining { get; set; } = 2;

    public DaylightChart() {}

    public void SetHours(float hours) {
        this.hours = hours;
    }

    public void SetRemaining(float remaining) {
        this.remaining = remaining;
    }
    
    protected override void OnParametersSet()
    {
        pieConfig = new PieConfig(true)
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    AspectRatio = 3,
                    Legend = new Legend
                    {
                        Display = false,
                    },
                    Title = new OptionsTitle
                    {
                        Display = false,
                        Text = "Running Hours",
                        FontSize = 20,
                        Position = Position.Bottom,
                        LineHeight = 4,
                    },
                    Circumference = 3,
                    Rotation = -9.341,
                    Animation = new ArcAnimation
                    {
                        AnimateRotate = true,
                        Duration = 2000,

                    },
                    Tooltips = new Tooltips
                    {
                        Enabled = true,
                        Mode = InteractionMode.Index,
                        Intersect = false,
                    },
                    Hover = new Hover
                    {
                        Mode = InteractionMode.Index,
                        Intersect = false
                    },
                    CutoutPercentage = 80
                }
            };  
        UpdateDataset();
    }

    public float[] getData() {
        float [] data = new float[2];
        var datasets = pieConfig.Data.Datasets;
        if (datasets.Count > 0)
        {
            data = ((PieDataset<float>)datasets[0]).Data.ToArray();
        }
        return data;
    }

    public void UpdateDataset() {
        pieConfig.Data.Datasets.Clear();
        pieConfig.Data.Labels.Clear();

        foreach (string label in new[] { "Runnable Hours", "Remaining" })
        {
            pieConfig.Data.Labels.Add(label);
        }

        Console.WriteLine(hours);
        Console.WriteLine(remaining);
        float copyHours = copyHours = new float();
        copyHours = hours;
        float copyRemaining = new float();
        copyRemaining = remaining;
        float[] data =  { 10, 2 };
        if(remaining == 0) {
            Console.WriteLine("Trueee");
            PieDataset<float> pieDataset = new PieDataset<float>(data)
                {
                    BackgroundColor = new[] {
                        ColorUtil.ColorHexString(56,113,193),
                        ColorUtil.ColorHexString(156,163,175),
                    },
                };
            if (pieConfig != null)
            {
                pieConfig.Data.Datasets.Add(pieDataset);
            } else {
                Console.WriteLine("pieConfig is null");
            }
        }
    }
} 