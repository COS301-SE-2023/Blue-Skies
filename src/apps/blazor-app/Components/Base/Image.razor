@using BlazorApp.Data
@using BlazorApp.Components
@inject BlobStorageService blobStorageService

@if (!string.IsNullOrEmpty(ImageData))
{
    @if (hasPath)
    {
        @* <img class="@css" src="@($"data:image/svg+xml;utf8,{Uri.EscapeDataString(ImageData)}")" alt="@alt" /> *@
        <img class="@css" src="/assets/@ImageName" alt="@ImageName" />
    }
    else
    {
        @* <img class="@css" src="/assets/@ImageName" alt="@ImageName" /> *@
        <img class="@css rounded-md shadow" src="@($"data:image;base64,{ImageData}")" alt="@alt" />
    }
}
else
{
    <Spinner/>
}

@code {
    [Parameter]
    public string? ImageName { get; set; }

    [Parameter]
    public string? css { get; set; }

    [Parameter]
    public string? alt { get; set; }

    private bool hasPath { get; set; }
    private string? ImageData { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        try
        {
            if (ImageName != null)
            {
                ImageData = ImageName;
                if(Path.Exists("wwwroot/assets/"+ImageName))
                {
                    hasPath = true;
                }
                else
                {
                    hasPath = false;
                }


                @* if (extension.Equals(".svg", StringComparison.OrdinalIgnoreCase))
                {
                    IsSvgImage = true;
                    ImageData = await blobStorageService.GetSvgContent("assets", ImageName); 
                    ImageData = ImageName;
                }
                else
                {
                    IsSvgImage = false;
                    byte[] imageBytes = await blobStorageService.GetImageBytes("assets", ImageName);
                    ImageData = Convert.ToBase64String(imageBytes);
                    ImageData = ImageName;
                }  
                *@

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Image.razor: "+ex.Message);
        }
    }
    protected override void OnInitialized()
    {
        
    }
}
