@inject IJSRuntime JSRuntime
<div class='absolute mx-auto tooltip transition-all duration-300 delay-500 rounded-xl shadow-lg px-3 py-2 bg-primary-900 text-primary-100 @directionClass'>
    <div @ref="divToMove" class='tooltip absolute bg-primary-900 z-40 @(direction == "top" ? "-bottom-1" : direction == "left" ? "-right-1" : direction == "bottom" ? "-top-1" : direction == "right" ? "-left-1" : "") @(direction == "left" || direction == "right" ? "top-1/2 -translate-y-1/2" : "") transition-all duration-75 tooltip rotate-45  w-3 h-3'></div>
    @ChildContent
</div>
@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }  
    [Parameter]
    public string? direction { get; set; } = "top";
    public string? directionClass { get; set; } = "";
    private ElementReference divToMove;

    // Register a JavaScript interop method
    private async Task InitializeMouseFollower()
    {
        await JSRuntime.InvokeVoidAsync("initializeMouseFollower", divToMove);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Call the JavaScript function to initialize the mouse follower
            if (direction == "top" || direction == "bottom"){
                await InitializeMouseFollower();
            }
        }
    }

    protected override void OnParametersSet()
    {
        switch (direction)
        {
            case "top":
                directionClass = "-translate-y-full -mt-2";
                break;
            case "bottom":
                directionClass = "translate-y-full -mb-2";
                break;
            case "left":
                directionClass = "-translate-x-full -ml-2";
                break;
            case "right":
                directionClass = "translate-x-1/2 -mr-2";
                break;
            default:
                directionClass = "-translate-y-full -mt-2";
                break;
        }
    }
}