@using BlazorApp.Components.Base
@using BlazorApp.Models
@using System.Text.Json;
@inject ProtectedSessionStorage ProtectedSessionStore

    
<div class="mt-24 text-center">
    <Heading>
        <Header>
            <h1 class="text-3xl">Your results in numbers</h1>
        </Header>
        <Subscript>
            <p class="text-primary-700">The following numbers are based on your location.</p>
        </Subscript>
    </Heading>
</div>
<div class="flex flex-wrap gap-4 flex-row justify-center mt-4 md:mt-20">
    <div class="sm:flex-shrink-0  flex justify-center ">
        <Map css="scale-90"/>
    </div>
    <div class="grid sm:flex-shrink-0  grid-cols-1 sm:grid-cols-2 gap-5 xl:gap-10">
        <Card css="border-2 scale-90 xl:scale-100 border-primary-300 w-72 h-72  my-auto">
            <div class="bg-gray-100 shadow-md rounded-3xl  p-4 w-20 ">
                <Image ImageName="Sale.svg" alt="Sale" css="scale-150"/>
            </div>
            <h1  class="text-xl text-primary-800 font-semibold mt-3">Solar Score</h1>
            <div class="flex gap-1 mt-3">
                <p class="text-5xl text-primary-900 font-semibold">@solarScore</p>
                <p class="text-5xl text-gray-400 font-bold">%</p>
            </div>
        </Card>
        <Card css="border-2 scale-90 xl:scale-100 border-primary-300 p-4 w-72 h-72 flex  my-auto flex-col">
            <div class="bg-gray-100 shadow-md rounded-3xl p-4 w-20 ">
                <Image ImageName="History.svg" alt="Sale" css="scale-150"/>
            </div>
            <h1  class="text-xl text-primary-800 font-semibold mt-3">Usable hours of sunlight per day</h1>
            <div class="flex gap-1 mt-3">
                <p class="text-5xl text-primary-900 font-semibold">@dayLightHours</p>
                <p class="text-5xl text-gray-400 font-bold">h</p>
            </div>
        </Card>
        <Card css="border-2 scale-90 xl:scale-100 border-primary-300 p-4 w-72 h-72  my-auto">
            <div class="bg-gray-100 shadow-md rounded-3xl p-4 w-20 ">
                <Image ImageName="Accumulator.svg" alt="Sale" css="scale-150"/>
            </div>
            <h1  class="text-xl text-primary-800 font-semibold mt-3">Avg Energy Production</h1>
            <div class="flex gap-1 mt-3">

                    <p class="text-5xl text-primary-900 font-semibold">@avgEnergyProduction</p>
                    <p class="text-5xl text-gray-400 font-bold">kw/h</p>
                </div>
            </Card>
            <Card css="border-2 scale-90 xl:scale-100 flex flex-col gap-4 border-primary-300 p-4 w-72 h-72  my-auto">
                <h1 class="text-xl text-primary-800 font-semibold mt-3">Solar System Used for Calculations</h1>
                <div class="flex justify-evenly gap-4">
                    @{
                        var small = "";
                        var medium = "";
                        var large = "";
                        if (systems.Count > 0)
                        {
                            small = systems[0].inverterOutput + "kw";
                            medium = systems[1].inverterOutput + "kw";
                            large = systems[2].inverterOutput + "kw";
                        }
                    }
                    <div onclick="@(() => SetSystemSize(0))"
                        class=" flex shadow-md transition-all duration-500  @(selectedSystem == 0 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                        <p class=" font-semibold">@small</p>
                    </div>
                    <div onclick="@(() => SetSystemSize(1))"
                        class="flex shadow-md transition-all duration-500 @(selectedSystem == 1 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                        <p class="font-semibold">@medium</p>
                    </div>
                    <div onclick="@(() => SetSystemSize(2))"
                        class="flex shadow-md transition-all duration-500 @(selectedSystem == 2 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                        <p class="font-semibold">@large</p>
                    </div>
                </div>
                <div class="flex gap-2 mt-3">
                    @{
                        var selectedPanels = 0;
                        if (systems.Count > 0)
                        {
                            selectedPanels = systems[selectedSystem].numberOfPanels;
                        }
                    }
                    <p class="text-5xl text-primary-900 font-semibold">@selectedPanels</p>
                    <p class="text-4xl text-gray-400 translate-y-1 font-semibold">panels</p>
                </div>
            </Card>
        </div>
    </div>

@code {
    private int solarScore = -1;
    private float dayLightHours = -1F;
    private string SystemSize = "5kw";
    private BasicCalculationModel basicCalculation = new BasicCalculationModel();
    private List<SystemModel> systems = new List<SystemModel>();
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    public int selectedSystem = 0;
    public double avgEnergyProduction = 0.0;
    protected override async Task OnInitializedAsync()
    {
        var ss = await ProtectedSessionStore.GetAsync<int>("solarScore");
        solarScore = ss.Value;

        var selectedSys = await ProtectedSessionStore.GetAsync<int>("selectedSystem");
        selectedSystem = selectedSys.Value;

        Console.WriteLine("Made it here results");
        var dlh = await ProtectedSessionStore.GetAsync<BasicCalculationModel>("basicCalculation");
        if (dlh.Success && dlh.Value != null)
        {
            basicCalculation = dlh.Value;
            dayLightHours = basicCalculation.daylightHours;
        }
        else
        {
            Console.WriteLine("Unsuccess");
        }
        await GetSystems();

        if (basicCalculation != null && systems.Count > 0)
        {
            double calc = systems[selectedSystem].numberOfPanels *
            basicCalculation.daylightHours * systems[selectedSystem].solarInput / 1000;
            avgEnergyProduction = Math.Round(calc, 2);
        }
        else
        {
            Console.WriteLine("Error");
            Console.WriteLine(basicCalculation == null);
            Console.WriteLine(systems == null);
        }

    }

    private void SetSystemSize(int selection)
    {
        selectedSystem = selection;
        ProtectedSessionStore.SetAsync("selectedSystem", selectedSystem);
        if (systems.Count > 0)
        {
            double calc = systems[selectedSystem].numberOfPanels *
            basicCalculation.daylightHours * systems[selectedSystem].solarInput / 1000;
            avgEnergyProduction = Math.Round(calc, 2);
        }
    }

    private async Task GetSystems()
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/System/all");
        Console.WriteLine("1 -- 3");
        var response = await client.SendAsync(request);
        Console.WriteLine("1 -- 4");
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            systems = JsonSerializer.Deserialize<List<SystemModel>>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                })!;
        }
        else
        {
            Console.WriteLine("Failed");
        }
    }
}
