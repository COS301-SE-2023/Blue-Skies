@using BlazorApp.Components
@using BlazorApp.Components.Base
@using BlazorApp.Models
@inject ProtectedLocalStorage ProtectedLocalStore
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@using System.Text.Json
@inject IJSRuntime JSRuntime
@using ChartJs.Blazor.PieChart
@inject BlazorApp.Data.LoadingService loadingService
@inject BlazorApp.Data.ToastService toastService


<div class="flex flex-col gap-5 lg:flex-row w-full h-full  items-center mb-20 px-4">
    <div class=" flex items-center justify-center lg:w-6/12 gap-4">
        <h1 class="text-blue-950 translate-y-8 font-semibold col-span-2 text-center text-3xl mb-5 ">Build your home</h1>
    </div>
    <div class="w-full flex flex-col justify-center items-center ">
        <div class="w-60  my-auto">
            <h2 class="text-sm mb-2 font-medium text-gray-900">Home size</h2>
            <select @onchange="ApplyTemplate" id="selectHome"
                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 w-full p-2.5">
                <option disabled selected value="1">Select a template</option>
                <option value="2">2 Bedroom House</option>
                <option value="3">3 Bedroom House</option>
                <option value="4">4+ Bedroom House</option>
            </select>
        </div>
    </div>
    <div class="lg:w-6/12 px-4 flex flex-col justify-center items-center gap-4 my-auto">
        <div class="text-center mt-2 space-y-5 my-auto ">
            <p>System Size</p>
            <div class="flex space-x-9">
                @{
                    var small = systems[0].inverterOutput + "kw";
                    var medium = systems[1].inverterOutput + "kw";
                    var large = systems[2].inverterOutput + "kw";
                }
                <div onclick="@(() => SetSystemSize(0))" class=" flex shadow-md transition-all duration-500  @(selectedSystem == 0 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                    <p class=" font-semibold">@small</p>
                </div>
                <div onclick="@(() => SetSystemSize(1))" class="flex shadow-md transition-all duration-500 @(selectedSystem == 1 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                    <p class="font-semibold">@medium</p>
                </div>
                <div onclick="@(() => SetSystemSize(2))" class="flex shadow-md transition-all duration-500 @(selectedSystem == 2 ? "bg-primary-500 scale-110 text-gray-100 " : "bg-gray-100 text-primary-900 hover:scale-110 ") rounded-2xl justify-center items-center w-16 h-16">
                    <p class="font-semibold">@large</p>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="hidden lg:flex w-full h-full px-4">
    <div class="w-4/12 grid grid-cols-2 justify-center scale-90 gap-4 -mt-4">
        <div class="flex gap-4 col-span-2 items-center justify-center mb-4 -mt-8">
            <h1 class="text-lg font-medium text-center text-primary-900">Select Appliances</h1>
            <div class="group">
                <Image ImageName="Info.svg" alt="Info" css="w-7 hover:-translate-y-1 transition-all duration-300" />
                <div class="absolute hidden fade-in-enter-active w-full -top-20 left-64  group-hover:block transition-all duration-500 ease-in-out text-sm  bg-primary-200 shadow rounded-t-2xl rounded-r-2xl p-4 group-hover:-translate-y-10 ">
                    <p class="text-gray-900">Click on the appliances to add them to your calculation.</p>
                </div>
            </div>
        </div>
        @foreach (var appliance in appliances)
        {
            <div class="fade-in-enter-active" @onclick="@(() => IncrementApplianceCount(appliance))">
                <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1" ImageName="@(appliance.type + ".svg")" Name="@appliance.type" />
            </div>
        }
    </div>
    <div class="w-full flex flex-col justify-center items-center">
        <div class="flex justify-center items-center h-full">
            @* <Image ImageName="House 3.svg" alt="House" css="scale-105" /> *@
            @switch (selectedSystem)
            {
                case 0:
                    <Image ImageName="House 3.svg" alt="House" css="scale-105" />
                    break;
                case 1:
                    <Image ImageName="House 2.svg" alt="House" css="scale-105" />
                    break;
                case 2:
                    <Image ImageName="House 1.svg" alt="House" css="scale-105" />
                    break;
                default:        
                    <Image ImageName="House 3.svg" alt="House" css="scale-105" />
                    break;
            }
        </div>
    </div>
    <div class="w-6/12 px-4 flex flex-col justify-center items-center gap-4">
        <h1 class="text-base font-medium text-center text-primary-900">What this means for you</h1>
        <div class="flex justify-between gap-4 scale-75 mt-4 mb-16">
            <Appliance ImageName="SolarPanels.svg" Name="Number of Panels" Count=@systems[selectedSystem].numberOfPanels />
            <Appliance ImageName="Batteries.svg" Name="Number of Batteries" Count=@systems[selectedSystem].numberOfBatteries />
        </div>
        <h3 class="font-medium text-lg text-primary-900 text-left">Running Hours</h3>   
        <div class="flex relative flex-col justify-center w-full">
            @{
                dlh = 0;
                if (basicCalc != null)
                {
                    daylight = (float)Math.Round(float.Parse(basicCalc.daylightHours!), 2);
                    dlh = (float)Math.Round((24-daylight)*(runningHoursPercentage/100), 2);
                    daylightChart.SetDaylightHours(daylight);
                    daylightChart.SetHours(dlh);
                }
            }
            <DaylightChart @ref="daylightChart"/>
            <div class="flex w-full justify-center absolute top-1/2 left-0 items-center gap-1 mt-20">
                <p class="text-5xl text-primary-900 font-semibold">@dlh</p>
                <p class="text-5xl text-gray-400 font-bold">h</p>
            </div>
        </div>
    </div>
</div>

<div class="hidden lg:flex gap-5 px-10 w-full mt-10">
    <div class="border-primary-500 transition-all duration-200 border-1 p-10 justify-start flex flex-col rounded-3xl w-full">
        <div class="flex gap-4 justify-start mb-10 relative">
            <h1 class="text-base font-semibold text-primary-900">What do you want to run in a power outage?</h1>
            <div class="group">
                <Image ImageName="Info.svg" alt="Info" css="w-7 hover:-translate-y-1 transition-all duration-300" />
                <div class="absolute hidden fade-in-active w-full -top-10 left-[38%] max-w-md  group-hover:block transition-all duration-300 ease-in-out text-sm  bg-primary-200 shadow rounded-t-2xl rounded-r-2xl p-4 group-hover:-translate-y-10 ">
                    <p class="text-gray-900">Click on the appliances to add them to your calculation.</p>
                </div>
            </div>
        </div>
        <div class="flex gap-10 scale-90 justify-stretchs">
            @foreach (var appliance in appliances)
        {
            if (appliance.quantity > 0)
            {
                <div @onclick="@(() => DecrementApplianceCount(appliance))">
                    <Appliance fade="@appliance.fade" css="hover:shadow transition-all duration-300 hover:-translate-y-1" ImageName="@(appliance.type + ".svg")" Name="@appliance.type" Count="@appliance.quantity" />
                </div>
            } 
        }
        </div>
    </div>
    <div class="w-4/12 justify-center flex">
        <div class="flex flex-col my-auto gap-6 items-center>">
            <Button css="h-16 w-60" style="outline">
                <content>
                    <p @onclick="ResetHome">Reset</p>
                </content>
            </Button>
            <Button  css="h-16 w-60" style="pill">
                <content>
                    @if (edit)
                    {
                        <p @onclick="ModalPopup.Show">Update calculation</p> 
                    } else {
                        <p @onclick="ModalPopup.Show">Save this calculation</p>
                    }
                </content>
            </Button>
        </div>
    </div>
</div>
<ModalPopup @ref="ModalPopup" Title="Save your calculation?">
        <ChildContent>
            @if (edit)
            {
            <p>Rename this calculation?</p>
            } else
            {
            <p>Add a nickname for this calculation:</p>
            }
            <Input @bind-InputValue="calculationName" placeholder="Nickname" />
            <div class="flex flex-row gap-4 justify-center">
                @if (edit)
                {
                    <div @onclick="UpdateCalculation">
                    <Button >
                        <content>
                            Update
                        </content>
                    </Button>
                </div>
                } else {
                <div @onclick="SaveCalculation">
                    <Button >
                        <content>
                            Save
                        </content>
                    </Button>
                </div>
                }
                <div @onclick="ModalPopup.Dismiss">
                    <Button style="outline">
                        <content>Cancel</content>
                    </Button>
                </div>
            </div>
        </ChildContent>
    </ModalPopup>

@* Mobile Viewport *@
<div class="flex flex-col justify-center lg:hidden w-full h-full px-4">
    <div class="w-full px-4 flex flex-col justify-center items-center gap-4">
        <h1 class="text-base font-medium text-center text-primary-900">What this means for you</h1>
        <div class="flex justify-between gap-4 mt-4 mb-16">
            <Appliance ImageName="SolarPanels.svg" Name="Number of Panels" Count=@systems[selectedSystem].numberOfPanels />
            <Appliance ImageName="Batteries.svg" Name="Number of Batteries" Count=@systems[selectedSystem].numberOfBatteries />
        </div>
    </div>
    <div class="w-full flex flex-col justify-center items-center">
        <div class="flex mb-10 justify-center items-center h-full">
            @*
            <Image ImageName="House 3.svg" alt="House" css="scale-105" /> *@
            @switch (selectedSystem)
            {
            case 0:
            <Image ImageName="House 3.svg" alt="House" css="scale-95" />
            break;
            case 1:
            <Image ImageName="House 2.svg" alt="House" css="scale-95" />
            break;
            case 2:
            <Image ImageName="House 1.svg" alt="House" css="scale-95" />
            break;
            default:
            <Image ImageName="House 3.svg" alt="House" css="scale-95" />
            break;
            }
        </div>
        <svg width="272" height="272" viewBox="0 0 272 272" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path
                d="M31.522 182V159.6H39.234C41.0047 159.6 42.4553 159.899 43.586 160.496C44.738 161.093 45.5913 161.904 46.146 162.928C46.7007 163.931 46.978 165.051 46.978 166.288C46.978 167.675 46.6047 168.933 45.858 170.064C45.1327 171.195 43.9913 172.005 42.434 172.496L47.202 182H43.266L38.914 172.976H34.914V182H31.522ZM34.914 170.416H39.042C40.578 170.416 41.698 170.043 42.402 169.296C43.1273 168.549 43.49 167.579 43.49 166.384C43.49 165.189 43.138 164.24 42.434 163.536C41.73 162.811 40.5887 162.448 39.01 162.448H34.914V170.416ZM56.7188 182.384C54.7988 182.384 53.2841 181.787 52.1748 180.592C51.0868 179.397 50.5428 177.616 50.5428 175.248V166.128H53.9348V174.896C53.9348 177.968 55.1934 179.504 57.7108 179.504C58.9694 179.504 60.0041 179.056 60.8148 178.16C61.6254 177.264 62.0308 175.984 62.0308 174.32V166.128H65.4228V182H62.4148L62.1588 179.216C61.6681 180.197 60.9428 180.976 59.9828 181.552C59.0441 182.107 57.9561 182.384 56.7188 182.384ZM69.7378 182V166.128H72.7458L73.0018 168.912C73.4924 167.931 74.2071 167.163 75.1458 166.608C76.1058 166.032 77.2044 165.744 78.4418 165.744C80.3618 165.744 81.8658 166.341 82.9538 167.536C84.0631 168.731 84.6178 170.512 84.6178 172.88V182H81.2578V173.232C81.2578 170.16 79.9991 168.624 77.4818 168.624C76.2231 168.624 75.1778 169.072 74.3458 169.968C73.5351 170.864 73.1298 172.144 73.1298 173.808V182H69.7378ZM88.6128 182V166.128H91.6208L91.8768 168.912C92.3674 167.931 93.0821 167.163 94.0208 166.608C94.9808 166.032 96.0794 165.744 97.3168 165.744C99.2368 165.744 100.741 166.341 101.829 167.536C102.938 168.731 103.493 170.512 103.493 172.88V182H100.133V173.232C100.133 170.16 98.8741 168.624 96.3568 168.624C95.0981 168.624 94.0528 169.072 93.2208 169.968C92.4101 170.864 92.0048 172.144 92.0048 173.808V182H88.6128ZM109.408 163.12C108.768 163.12 108.234 162.928 107.808 162.544C107.402 162.139 107.2 161.637 107.2 161.04C107.2 160.443 107.402 159.952 107.808 159.568C108.234 159.163 108.768 158.96 109.408 158.96C110.048 158.96 110.57 159.163 110.976 159.568C111.402 159.952 111.616 160.443 111.616 161.04C111.616 161.637 111.402 162.139 110.976 162.544C110.57 162.928 110.048 163.12 109.408 163.12ZM107.712 182V166.128H111.104V182H107.712ZM115.582 182V166.128H118.59L118.846 168.912C119.336 167.931 120.051 167.163 120.99 166.608C121.95 166.032 123.048 165.744 124.286 165.744C126.206 165.744 127.71 166.341 128.798 167.536C129.907 168.731 130.462 170.512 130.462 172.88V182H127.102V173.232C127.102 170.16 125.843 168.624 123.326 168.624C122.067 168.624 121.022 169.072 120.19 169.968C119.379 170.864 118.974 172.144 118.974 173.808V182H115.582ZM140.953 177.136C140.121 177.136 139.353 177.04 138.649 176.848L137.273 178.192C137.507 178.341 137.795 178.469 138.137 178.576C138.478 178.683 138.958 178.779 139.577 178.864C140.195 178.949 141.038 179.035 142.105 179.12C144.217 179.312 145.742 179.824 146.681 180.656C147.619 181.467 148.089 182.555 148.089 183.92C148.089 184.859 147.833 185.744 147.321 186.576C146.83 187.429 146.051 188.112 144.985 188.624C143.939 189.157 142.595 189.424 140.953 189.424C138.734 189.424 136.931 188.997 135.545 188.144C134.179 187.312 133.497 186.043 133.497 184.336C133.497 183.675 133.667 183.013 134.009 182.352C134.371 181.712 134.937 181.104 135.705 180.528C135.257 180.336 134.862 180.133 134.521 179.92C134.201 179.685 133.913 179.451 133.657 179.216V178.448L136.409 175.632C135.171 174.565 134.553 173.168 134.553 171.44C134.553 170.395 134.798 169.445 135.289 168.592C135.801 167.717 136.537 167.024 137.497 166.512C138.457 166 139.609 165.744 140.953 165.744C141.849 165.744 142.681 165.872 143.449 166.128H149.369V168.368L146.553 168.528C147.065 169.403 147.321 170.373 147.321 171.44C147.321 172.507 147.065 173.467 146.553 174.32C146.062 175.173 145.337 175.856 144.377 176.368C143.438 176.88 142.297 177.136 140.953 177.136ZM140.953 174.48C141.934 174.48 142.723 174.224 143.321 173.712C143.939 173.179 144.249 172.432 144.249 171.472C144.249 170.491 143.939 169.744 143.321 169.232C142.723 168.72 141.934 168.464 140.953 168.464C139.95 168.464 139.139 168.72 138.521 169.232C137.923 169.744 137.625 170.491 137.625 171.472C137.625 172.432 137.923 173.179 138.521 173.712C139.139 174.224 139.95 174.48 140.953 174.48ZM136.697 184.016C136.697 184.933 137.102 185.616 137.913 186.064C138.723 186.533 139.737 186.768 140.953 186.768C142.126 186.768 143.075 186.512 143.801 186C144.526 185.509 144.889 184.848 144.889 184.016C144.889 183.397 144.643 182.864 144.153 182.416C143.662 181.989 142.734 181.723 141.369 181.616C140.345 181.552 139.438 181.456 138.649 181.328C137.902 181.733 137.39 182.171 137.113 182.64C136.835 183.109 136.697 183.568 136.697 184.016ZM160.457 182V158.96H163.849V168.688C164.382 167.771 165.118 167.056 166.057 166.544C167.017 166.011 168.073 165.744 169.225 165.744C171.123 165.744 172.617 166.341 173.705 167.536C174.793 168.731 175.337 170.512 175.337 172.88V182H171.977V173.232C171.977 170.16 170.75 168.624 168.297 168.624C167.017 168.624 165.95 169.072 165.097 169.968C164.265 170.864 163.849 172.144 163.849 173.808V182H160.457ZM186.756 182.384C185.241 182.384 183.876 182.043 182.66 181.36C181.465 180.656 180.516 179.685 179.812 178.448C179.108 177.189 178.756 175.728 178.756 174.064C178.756 172.4 179.108 170.949 179.812 169.712C180.537 168.453 181.508 167.483 182.724 166.8C183.94 166.096 185.294 165.744 186.788 165.744C188.302 165.744 189.657 166.096 190.852 166.8C192.068 167.483 193.028 168.453 193.732 169.712C194.457 170.949 194.819 172.4 194.819 174.064C194.819 175.728 194.457 177.189 193.732 178.448C193.028 179.685 192.068 180.656 190.852 181.36C189.636 182.043 188.27 182.384 186.756 182.384ZM186.756 179.472C187.566 179.472 188.313 179.269 188.996 178.864C189.7 178.459 190.265 177.861 190.692 177.072C191.118 176.261 191.332 175.259 191.332 174.064C191.332 172.869 191.118 171.877 190.692 171.088C190.286 170.277 189.732 169.669 189.028 169.264C188.345 168.859 187.598 168.656 186.788 168.656C185.977 168.656 185.22 168.859 184.516 169.264C183.833 169.669 183.278 170.277 182.852 171.088C182.425 171.877 182.212 172.869 182.212 174.064C182.212 175.259 182.425 176.261 182.852 177.072C183.278 177.861 183.833 178.459 184.516 178.864C185.198 179.269 185.945 179.472 186.756 179.472ZM204.344 182.384C202.424 182.384 200.909 181.787 199.8 180.592C198.712 179.397 198.168 177.616 198.168 175.248V166.128H201.56V174.896C201.56 177.968 202.818 179.504 205.336 179.504C206.594 179.504 207.629 179.056 208.44 178.16C209.25 177.264 209.656 175.984 209.656 174.32V166.128H213.048V182H210.04L209.784 179.216C209.293 180.197 208.568 180.976 207.608 181.552C206.669 182.107 205.581 182.384 204.344 182.384ZM217.363 182V166.128H220.403L220.691 169.136C221.245 168.091 222.013 167.269 222.995 166.672C223.997 166.053 225.203 165.744 226.611 165.744V169.296H225.683C224.744 169.296 223.901 169.456 223.155 169.776C222.429 170.075 221.843 170.597 221.395 171.344C220.968 172.069 220.755 173.083 220.755 174.384V182H217.363ZM235.855 182.384C233.85 182.384 232.196 181.893 230.895 180.912C229.594 179.931 228.847 178.629 228.655 177.008H232.079C232.25 177.733 232.655 178.363 233.295 178.896C233.935 179.408 234.778 179.664 235.823 179.664C236.847 179.664 237.594 179.451 238.063 179.024C238.532 178.597 238.767 178.107 238.767 177.552C238.767 176.741 238.436 176.197 237.775 175.92C237.135 175.621 236.239 175.355 235.087 175.12C234.191 174.928 233.295 174.672 232.399 174.352C231.524 174.032 230.788 173.584 230.191 173.008C229.615 172.411 229.327 171.611 229.327 170.608C229.327 169.221 229.86 168.069 230.927 167.152C231.994 166.213 233.487 165.744 235.407 165.744C237.178 165.744 238.607 166.171 239.695 167.024C240.804 167.877 241.455 169.083 241.647 170.64H238.383C238.276 169.957 237.956 169.424 237.423 169.04C236.911 168.656 236.218 168.464 235.343 168.464C234.49 168.464 233.828 168.645 233.359 169.008C232.89 169.349 232.655 169.797 232.655 170.352C232.655 170.907 232.975 171.344 233.615 171.664C234.276 171.984 235.14 172.272 236.207 172.528C237.274 172.763 238.255 173.04 239.151 173.36C240.068 173.659 240.804 174.107 241.359 174.704C241.914 175.301 242.191 176.176 242.191 177.328C242.212 178.779 241.647 179.984 240.495 180.944C239.364 181.904 237.818 182.384 235.855 182.384Z"
                fill="#000F52" />
            <path
                d="M258.4 136C265.911 136 272.071 129.896 271.321 122.422C268.203 91.3393 254.451 62.1178 232.167 39.8335C206.662 14.3285 172.069 2.72317e-06 136 0C99.9306 -2.72317e-06 65.3384 14.3285 39.8335 39.8335C17.5491 62.1178 3.79683 91.3393 0.679057 122.422C-0.0705816 129.896 6.08893 136 13.6 136V136C21.1111 136 27.1122 129.887 28.0485 122.435C31.0455 98.581 41.8867 76.2469 59.0668 59.0668C79.4707 38.6628 107.144 27.2 136 27.2C164.856 27.2 192.529 38.6628 212.933 59.0668C230.113 76.2469 240.955 98.581 243.951 122.435C244.888 129.887 250.889 136 258.4 136V136Z"
                fill="#D9D9D9" />
            <path
                d="M13.6 136C6.08892 136 -0.0705003 129.896 0.679305 122.422C3.24136 96.8853 12.9918 72.4925 28.9309 52.1417C44.87 31.7909 66.2161 16.48 90.3952 7.87406C97.4715 5.35546 104.874 9.8729 106.673 17.1652V17.1652C108.473 24.4575 103.977 31.7485 96.9655 34.4432C78.6722 41.4743 62.5326 53.3521 50.3447 68.9134C38.1569 84.4746 30.4921 102.99 28.0488 122.435C27.1123 129.888 21.1111 136 13.6 136V136Z"
                fill="#FFC108" />
            <path
                d="M123.068 116.36C121.528 116.36 120.198 116.09 119.078 115.55C117.978 115.01 117.108 114.27 116.468 113.33C115.848 112.37 115.488 111.29 115.388 110.09H119.138C119.318 110.95 119.758 111.67 120.458 112.25C121.158 112.81 122.028 113.09 123.068 113.09C124.188 113.09 125.098 112.68 125.798 111.86C126.518 111.04 126.878 110.02 126.878 108.8C126.878 107.54 126.518 106.54 125.798 105.8C125.098 105.06 124.208 104.69 123.128 104.69C122.228 104.69 121.448 104.91 120.788 105.35C120.128 105.79 119.658 106.34 119.378 107H115.688L117.488 95H129.128V98.36H120.368L119.408 103.22C119.848 102.74 120.448 102.35 121.208 102.05C121.968 101.73 122.818 101.57 123.758 101.57C125.258 101.57 126.508 101.91 127.508 102.59C128.508 103.25 129.268 104.13 129.788 105.23C130.308 106.31 130.568 107.49 130.568 108.77C130.568 110.23 130.248 111.53 129.608 112.67C128.988 113.81 128.108 114.71 126.968 115.37C125.848 116.03 124.548 116.36 123.068 116.36Z"
                fill="#000F52" />
            <path
                d="M141.2 116V94.4H145.04V103.4C145.54 102.58 146.21 101.94 147.05 101.48C147.91 101 148.89 100.76 149.99 100.76C151.83 100.76 153.25 101.34 154.25 102.5C155.27 103.66 155.78 105.36 155.78 107.6V116H151.97V107.96C151.97 106.68 151.71 105.7 151.19 105.02C150.69 104.34 149.89 104 148.79 104C147.71 104 146.81 104.38 146.09 105.14C145.39 105.9 145.04 106.96 145.04 108.32V116H141.2Z"
                fill="#BEBEBE" />
        </svg>
    </div>
    <h1 class="text-base font-medium text-center mb-2  text-primary-900">Select Appliances</h1>
    <div class="flex justify-center items-center  my-7">
            <Tabs @bind-Items="tabs"></Tabs>
    </div>
    <div class="grid mx-auto gap-4 space-y-2 grid-cols-2 mt-2 justify-center">
        @if(tabs[0].active) {
            @foreach (var appliance in appliances)
            {
                if (appliance.quantity > 0)
                {
                    <div @onclick="@(() => IncrementApplianceCount(appliance))">
                        <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1" ImageName="@(appliance.type + ".svg")" Name="@appliance.type" Count="@appliance.quantity" />
                    </div>
                } else {
                    <div class="fade-in-active" @onclick="@(() => IncrementApplianceCount(appliance))">
                        <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1" ImageName="@(appliance.type + ".svg")" Name="@appliance.type" />
                    </div>
                }
            }
        } else {
            @foreach (var appliance in appliances)
            {
                if (appliance.quantity > 0)
                {
                    <div @onclick="@(() => DecrementApplianceCount(appliance))">
                        <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1" ImageName="@(appliance.type + ".svg")" Name="@appliance.type" Count="@appliance.quantity" />
                    </div>
                } else {
                    <div class="fade-in-active">
                        <Appliance css="hover:shadow transition-all duration-300 hover:-translate-y-1" ImageName="@(appliance.type + ".svg")" Name="@appliance.type" />
                    </div>
                }
            }
        }
    </div>
    <div class="flex mt-10 mx-auto gap-6 items-center>">
        <Button css="h-16 w-full" style="outline">
            <content>
                <p @onclick="ResetHome">Reset</p>
            </content>
        </Button>
        <Button css="h-16 w-full" style="pill">
            <content>
                <p @onclick="SaveCalculation">Save this calculation</p>
            </content>
        </Button>
    </div>
    </div>

@code {
    [Parameter]
    public List<ApplianceModel> appliances { get; set; } = new List<ApplianceModel>();
    [Parameter]
    public List<SystemModel> systems { get; set; } = new List<SystemModel>();
    [Parameter]
    public BasicCalculationModel basicCalc { get; set; } = new BasicCalculationModel();
    [Parameter]
    public int solarScore { get; set; }
    [Parameter]
    public int selectedSystem { get; set; }
    [Parameter]
    public EventCallback<int> selectedSystemChanged { get; set; }
    [Parameter]
    public List<ReportAllApplianceModel>? reportAllAppliance  { get; set; } 
    [Parameter]
    public ReportModel? currentReport  { get; set; }
    [Parameter]
    public bool edit { get; set; }
    private List<ReportModel> reports = new List<ReportModel>();
    private string? API_PORT = Environment.GetEnvironmentVariable("API_PORT");
    private int userId = -1;
    private ModalPopup ModalPopup { get; set; } = new ModalPopup();
    private string? calculationName { get; set; }
    private List<ApplianceModel> applianceQuantities = new List<ApplianceModel>();
    private List<TabItemModel> tabs = new List<TabItemModel>
    {
        new TabItemModel("Add", true),
        new TabItemModel("Remove", false)
    };
    float runningHoursPercentage = 0f;
    float dlh = 0f;
    float daylight = 0f;
    DaylightChart daylightChart = new DaylightChart();
    

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Solar Score: " + solarScore);
        var usId = await ProtectedLocalStore.GetAsync<int>("userId"); 
        userId = usId.Value;

        CalculateRunningHours();
    }

    protected override void OnParametersSet(){
        for (int i = 0; i < reportAllAppliance!.Count; i++)
        {
            
        if (reportAllAppliance[i].type!.Equals("Kettle"))
        {
            appliances[0].quantity = reportAllAppliance[i].numberOfAppliances;
        } else if (reportAllAppliance[i].type!.Equals("Fridge"))
        {
            appliances[1].quantity = reportAllAppliance[i].numberOfAppliances;
        } else if (reportAllAppliance[i].type!.Equals("LED Lights"))
        {
            appliances[2].quantity = reportAllAppliance[i].numberOfAppliances;
        } else if (reportAllAppliance[i].type!.Equals("TV"))
        {
            appliances[3].quantity = reportAllAppliance[i].numberOfAppliances;
        } else if (reportAllAppliance[i].type!.Equals("Computer"))
        {
            appliances[4].quantity = reportAllAppliance[i].numberOfAppliances;
        } else if (reportAllAppliance[i].type!.Equals("Microwave"))
        {
            appliances[5].quantity = reportAllAppliance[i].numberOfAppliances;
        } else if (reportAllAppliance[i].type!.Equals("CCTV"))
        {
            appliances[6].quantity = reportAllAppliance[i].numberOfAppliances;
        } else if (reportAllAppliance[i].type!.Equals("Washing Machine"))
        {
            appliances[7].quantity = reportAllAppliance[i].numberOfAppliances;
        }
        
        }
        calculationName = currentReport!.reportName;
        Console.WriteLine("Edit: " + edit);

        for (int i = 0; i < appliances.Count; i++)
        {
            ApplianceModel appliance = new ApplianceModel();
            appliance.applianceId = appliances[i].applianceId;
            appliance.type = appliances[i].type;
            appliance.powerUsage = appliances[i].powerUsage;
            appliance.quantity = appliances[i].quantity;
            applianceQuantities.Add(appliance);
        }
    }
    public Task OnSelectedSystemChanged(ChangeEventArgs e)
    {
        selectedSystem = Convert.ToInt32(e.Value);
        return selectedSystemChanged.InvokeAsync(selectedSystem);
    }
    private void IncrementApplianceCount(ApplianceModel appliance) {
        appliance.fade = "fade-in-active";
        StateHasChanged();
        appliance.quantity++;
        updateApplianceStorage();
        CalculateRunningHours();
    }
    private async void DecrementApplianceCount(ApplianceModel appliance) {
        if (appliance.quantity == 1) {
            appliance.fade = "fade-out-active";
            StateHasChanged();
            await Task.Delay(300);
        }
        appliance.quantity--;
        if(appliance.quantity < 0) {
            appliance.quantity = 0;
        }
        appliance.fade = "fade-in-active";
        StateHasChanged();
        updateApplianceStorage();
         CalculateRunningHours();
    }
    private async void updateApplianceStorage()
    {
        await ProtectedSessionStore.SetAsync("advancedCalculationAppliances", appliances);
    }
    private void SetSystemSize(int selection)
    {
        selectedSystem = selection;
        ProtectedSessionStore.SetAsync("selectedSystem", selectedSystem);
        selectedSystemChanged.InvokeAsync(selectedSystem);
        CalculateRunningHours();
    }
    private void ApplyTemplate(ChangeEventArgs e) {
        switch (e.Value)
        {
            case "2":
                selectedSystem = 0;
                appliances[0].quantity = 1;
                appliances[1].quantity = 1;
                appliances[2].quantity = 15;
                appliances[3].quantity = 1;
                appliances[4].quantity = 0;
                appliances[5].quantity = 1;
                appliances[6].quantity = 0;
                appliances[7].quantity = 0;

                break;
            case "3":
                selectedSystem = 1;
                appliances[0].quantity = 1;
                appliances[1].quantity = 1;
                appliances[2].quantity = 20;
                appliances[3].quantity = 1;
                appliances[4].quantity = 1;
                appliances[5].quantity = 1;
                appliances[6].quantity = 0;
                appliances[7].quantity = 0;
                break;
            case "4":
                selectedSystem = 2;
                appliances[0].quantity = 2;
                appliances[1].quantity = 1;
                appliances[2].quantity = 30;
                appliances[3].quantity = 2;
                appliances[4].quantity = 2;
                appliances[5].quantity = 1;
                appliances[6].quantity = 0;
                appliances[7].quantity = 1;
                break;
            default:
                selectedSystem = 0;
                appliances[0].quantity = 1;
                appliances[1].quantity = 1;
                appliances[2].quantity = 15;
                appliances[3].quantity = 1;
                appliances[4].quantity = 0;
                appliances[5].quantity = 1;
                appliances[6].quantity = 0;
                appliances[7].quantity = 0;
                break;
        }
    }
    private async void ResetHome(){
        Console.WriteLine("Resetting"); 
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('selectHome').value = 1;");
        appliances[0].quantity = 0;
        appliances[1].quantity = 0;
        appliances[2].quantity = 0;
        appliances[3].quantity = 0;
        appliances[4].quantity = 0;
        appliances[5].quantity = 0;
        appliances[6].quantity = 0;
        appliances[7].quantity = 0;
        selectedSystem = 0;
        await selectedSystemChanged.InvokeAsync(selectedSystem);
        CalculateRunningHours();
    }
    private async void SaveCalculation(){
        ModalPopup.Dismiss();
        ShowLoadingScreen();
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, API_PORT + "/Report/create");
        Console.WriteLine("BasicCalculationId: " + basicCalc.basicCalculationId);
        var content = new StringContent("{\r\n  \"reportName\": \"" + calculationName + "\",\r\n  \"userId\": " + userId + ",\r\n  \"basicCalculationId\": " + basicCalc.basicCalculationId + ",\r\n  \"solarScore\": " + solarScore + ",\r\n  \"runningTime\": " + 9 + "\r\n}", null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);
        if(response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            toastService.ShowToast("Saved Calculation", "Report successfuly saved.", "success");

            Console.WriteLine("Report created successfully");
            int reportId = await GetCreatedReportId();
            foreach (var appliance in appliances)
            {
                await createReportAppliance(reportId, appliance);
            }
            await updateBasicCalculation();
        }
        else
        {
            Console.WriteLine("Failed to create report");
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
        NavigationManager.NavigateTo("/dashboard");
    }
    private async Task UpdateCalculation(){
        ShowLoadingScreen();
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Patch, API_PORT + "/Report/update");
        var content = new StringContent("{\r\n  \"reportId\": \"" + currentReport!.reportId + "\",\r\n  \"reportName\": \"" + calculationName + "\",\r\n  \"userId\": " + userId + ",\r\n  \"basicCalculationId\": " + currentReport.basicCalculationId + ",\r\n  \"solarScore\": " + solarScore + ",\r\n  \"runningTime\": " + 9 + "\r\n}", null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);
        if(response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            toastService.ShowToast("Updated Calculation", "Report updated saved.", "success");

            Console.WriteLine("Report created successfully");
            int reportId = await GetCreatedReportId();

            for (int i = 0; i < 8; i++)
            {
                Console.WriteLine(i);
                if (appliances[i].quantity != applianceQuantities[i].quantity)
                {
                    await updateReportAppliance(reportId, appliances[i]);
                }
            }
            await updateBasicCalculation();
        }
        else
        {
            Console.WriteLine("Failed to create report");
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
        NavigationManager.NavigateTo("/dashboard");
    }
    private async Task updateReportAppliance(int reportId, ApplianceModel appliance){
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Patch, API_PORT + "/ReportAppliance/updateNumberOfAppliances");
        var content = new StringContent("{\r\n  \"reportId\": " + reportId + ",\r\n  \"applianceId\": " + appliance.applianceId + ",\r\n  \"numberOfAppliances\": " + appliance.quantity + "\r\n}", null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);
        if(response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Console.WriteLine("ReportAppliance Updated successfully");
        }
        else
        {
            Console.WriteLine("Failed to update ReportAppliance - " + response.StatusCode);
        }
    }
    private async Task createReportAppliance(int reportId, ApplianceModel appliance){
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, API_PORT + "/ReportAppliance/create");
        var content = new StringContent("{\r\n  \"reportId\": " + reportId + ",\r\n  \"applianceId\": " + appliance.applianceId + ",\r\n  \"numberOfAppliances\": " + appliance.quantity + "\r\n}", null, "application/json");
        request.Content = content;
        var response = await client.SendAsync(request);
        if(response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Console.WriteLine("ReportAppliance created successfully");
        }
        else
        {
            Console.WriteLine("Failed to create ReportAppliance - " + response.StatusCode);
        }
    }
    private async Task updateBasicCalculation(){
        var client = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Patch, API_PORT + "/BasicCalculation/update");
                var content = new StringContent("{\r\n        \"basicCalculationId\": "
                    + basicCalc.basicCalculationId
                    + ",\r\n        \"systemId\": "
                    + systems[selectedSystem].systemId
                    + ",\r\n        \"dayLightHours\": \""
                    + basicCalc.daylightHours
                    + "\",\r\n        \"location\": \""
                    + basicCalc.location
                    + "\",\r\n        \"batteryLife\": "
                    + basicCalc.batteryLife
                    + ",\r\n        \"image\": \""
                    + basicCalc.image
                    + "\"\r\n}", null, "application/json");
                request.Content = content;
                var response = await client.SendAsync(request);
                if(response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    Console.WriteLine("Basic Calculation updated successfully");
                }
                else
                {
                    Console.WriteLine("Failed to update Basic Calculation");
                }
    }
    private async Task<int> GetCreatedReportId(){
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Get, API_PORT + "/Report/getUserReports/" + userId);
        var response = await client.SendAsync(request);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var data = await response.Content.ReadAsStringAsync();
            reports = JsonSerializer.Deserialize<List<ReportModel>>(data, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive =
                true
                })!;
            if (reports.Count > 0)
            {
                await ProtectedSessionStore.SetAsync("userReports", reports);
            }
            await ProtectedSessionStore.SetAsync("createdReport", reports[reports.Count - 1].reportId);
            Console.WriteLine("ReportId: " + reports[reports.Count - 1].reportId);
            return reports[reports.Count - 1].reportId;
        }
        else
        {
            Console.WriteLine("Failed to get user reports");
            return -1;
        }
    }
    private void ShowLoadingScreen() {
        loadingService.ShowLoadingScreen();
    }
    private void CalculateRunningHours() {
        //running Hours = (num batteries * battery storage)  / (sum of all appliances)  
        // % = (running hours / non-daylight hours) * 100
        int numBatteries = systems[selectedSystem].numberOfBatteries; 
        int batteryStorage = systems[selectedSystem].batterySize *1000; // kwh
        float sumOfAppliances = 0f;

        foreach (var appliance in appliances)
        {
            if(appliance.quantity > 0) {
                sumOfAppliances += appliance.quantity * appliance.powerUsage ;
            }
        }

        float runningHours = (numBatteries * batteryStorage) / sumOfAppliances;
        float nonDaylightHours = 24 - float.Parse(basicCalc.daylightHours!);
        runningHoursPercentage = (runningHours / nonDaylightHours) * 100;
        if(runningHoursPercentage > 100)
        {
            runningHoursPercentage = 100;
        }
        Console.WriteLine("runningHoursPercentage hours: " + runningHoursPercentage);        
    }

}